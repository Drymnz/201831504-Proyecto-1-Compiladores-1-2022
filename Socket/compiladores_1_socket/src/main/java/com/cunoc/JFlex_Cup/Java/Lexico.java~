// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: lexico.jflex

/*primer seccion: codigo java que se copiara arriba*/
package com.cunoc.JFlex_Cup.Java;
import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import com.cunoc.JFlex_Cup.Token;
import com.cunoc.Server.Console;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\10\0\2\1\1\2\1\3\2\4\22\0\1\1\1\5"+
    "\1\6\2\0\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\11\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\0\22\32\1\33"+
    "\7\32\1\34\1\0\1\35\1\0\1\32\1\0\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\47"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\47\1\66\1\67\1\70\7\0\1\3\53\0\1\32"+
    "\21\0\1\32\35\0\2\32\6\0\2\32\2\0\2\32"+
    "\2\0\1\32\1\0\2\32\5\0\2\32\u012c\0\2\3"+
    "\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\2\17\1\20\1\21\1\22\1\23\1\24\1\25\2\26"+
    "\1\27\1\30\16\26\1\31\1\2\1\32\1\33\1\0"+
    "\1\34\1\35\1\36\1\0\2\37\1\40\1\41\1\42"+
    "\1\43\1\44\2\0\1\45\2\0\1\46\1\47\1\50"+
    "\1\0\10\26\1\51\6\26\1\52\20\26\1\37\2\17"+
    "\1\2\1\53\1\0\1\54\1\0\1\55\1\0\2\56"+
    "\1\0\2\57\17\26\1\60\1\26\1\61\1\26\1\62"+
    "\13\26\1\63\2\26\1\37\1\64\1\56\1\65\3\26"+
    "\1\66\1\67\1\26\1\70\3\26\1\71\6\26\1\72"+
    "\11\26\1\73\1\74\1\75\3\26\1\76\1\77\1\100"+
    "\3\26\1\101\1\102\1\103\7\26\1\104\1\26\1\105"+
    "\1\26\1\106\1\107\2\26\1\110\2\26\1\111\3\26"+
    "\1\112\1\113\1\114\1\115\1\116\1\117\1\120\1\26"+
    "\1\121\1\122\4\26\1\123\1\124";

  private static int [] zzUnpackAction() {
    int [] result = new int[232];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u0156\0\u018f"+
    "\0\71\0\71\0\u01c8\0\u0201\0\71\0\u023a\0\71\0\u0273"+
    "\0\u02ac\0\u02e5\0\71\0\71\0\u031e\0\u0357\0\u0390\0\71"+
    "\0\u03c9\0\u0402\0\71\0\71\0\u043b\0\u0474\0\u04ad\0\u04e6"+
    "\0\u051f\0\u0558\0\u0591\0\u05ca\0\u0603\0\u063c\0\u0675\0\u06ae"+
    "\0\u06e7\0\u0720\0\71\0\u0759\0\71\0\71\0\344\0\71"+
    "\0\71\0\71\0\u0792\0\u07cb\0\u0804\0\71\0\71\0\71"+
    "\0\71\0\71\0\u083d\0\u0876\0\71\0\u08af\0\u08e8\0\71"+
    "\0\71\0\71\0\u0921\0\u095a\0\u0993\0\u09cc\0\u0a05\0\u0a3e"+
    "\0\u0a77\0\u0ab0\0\u0ae9\0\u0b22\0\u0b5b\0\u0b94\0\u0bcd\0\u0c06"+
    "\0\u0c3f\0\u0c78\0\u03c9\0\u0cb1\0\u0cea\0\u0d23\0\u0d5c\0\u0d95"+
    "\0\u0dce\0\u0e07\0\u0e40\0\u0e79\0\u0eb2\0\u0eeb\0\u0f24\0\u0f5d"+
    "\0\u0f96\0\u0fcf\0\u1008\0\u1041\0\u107a\0\u10b3\0\u10ec\0\71"+
    "\0\u1125\0\u115e\0\u1197\0\71\0\u11d0\0\u1209\0\u1242\0\u127b"+
    "\0\u12b4\0\u12ed\0\u1326\0\u135f\0\u1398\0\u13d1\0\u140a\0\u1443"+
    "\0\u147c\0\u14b5\0\u14ee\0\u1527\0\u1560\0\u1599\0\u15d2\0\u160b"+
    "\0\u1644\0\u03c9\0\u167d\0\u03c9\0\u16b6\0\u03c9\0\u16ef\0\u1728"+
    "\0\u1761\0\u179a\0\u17d3\0\u180c\0\u1845\0\u187e\0\u18b7\0\u18f0"+
    "\0\u1929\0\u03c9\0\u1962\0\u199b\0\71\0\71\0\71\0\71"+
    "\0\u19d4\0\u1a0d\0\u1a46\0\u03c9\0\u03c9\0\u1a7f\0\u03c9\0\u1ab8"+
    "\0\u1af1\0\u1b2a\0\u03c9\0\u1b63\0\u1b9c\0\u1bd5\0\u1c0e\0\u1c47"+
    "\0\u1c80\0\u03c9\0\u1cb9\0\u1cf2\0\u1d2b\0\u1d64\0\u1d9d\0\u1dd6"+
    "\0\u1e0f\0\u1e48\0\u1e81\0\u03c9\0\u03c9\0\u03c9\0\u1eba\0\u1ef3"+
    "\0\u1f2c\0\u03c9\0\u03c9\0\u03c9\0\u1f65\0\u1f9e\0\u1fd7\0\u03c9"+
    "\0\u03c9\0\u03c9\0\u2010\0\u2049\0\u2082\0\u20bb\0\u20f4\0\u212d"+
    "\0\u2166\0\u03c9\0\u219f\0\u03c9\0\u21d8\0\u03c9\0\u03c9\0\u2211"+
    "\0\u224a\0\u03c9\0\u2283\0\u22bc\0\u03c9\0\u22f5\0\u232e\0\u2367"+
    "\0\u03c9\0\u03c9\0\u03c9\0\u03c9\0\u03c9\0\u03c9\0\u03c9\0\u23a0"+
    "\0\u03c9\0\u03c9\0\u23d9\0\u2412\0\u244b\0\u2484\0\u03c9\0\u03c9";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[232];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\31\1\35\1\36"+
    "\1\37\1\40\1\41\2\31\1\42\2\31\1\43\1\31"+
    "\1\44\1\31\1\45\1\46\1\47\1\50\1\31\1\51"+
    "\1\52\2\31\1\53\1\54\1\55\72\0\2\3\1\0"+
    "\1\3\62\0\1\3\30\0\1\56\41\0\6\57\1\60"+
    "\62\57\27\0\1\61\51\0\1\62\60\0\2\63\3\0"+
    "\4\63\1\64\55\63\1\65\1\63\27\0\1\66\56\0"+
    "\1\67\4\0\1\21\1\22\3\0\1\70\60\0\1\71"+
    "\2\0\1\21\1\22\3\0\1\72\55\0\1\73\4\0"+
    "\1\74\5\0\1\75\31\0\1\76\27\0\1\77\70\0"+
    "\1\77\1\0\2\22\74\0\1\100\70\0\1\101\70\0"+
    "\1\102\56\0\1\103\1\0\1\103\2\0\2\31\6\0"+
    "\2\31\2\0\30\31\1\0\1\31\16\0\1\103\1\0"+
    "\1\103\2\0\2\31\6\0\2\31\2\0\22\31\1\104"+
    "\5\31\1\0\1\31\16\0\1\103\1\0\1\103\2\0"+
    "\2\31\6\0\2\31\2\0\16\31\1\105\1\31\1\106"+
    "\6\31\1\107\1\0\1\31\16\0\1\103\1\0\1\103"+
    "\2\0\2\31\6\0\2\31\2\0\1\110\6\31\1\111"+
    "\3\31\1\112\14\31\1\0\1\31\16\0\1\103\1\0"+
    "\1\103\2\0\2\31\6\0\2\31\2\0\4\31\1\113"+
    "\11\31\1\114\11\31\1\0\1\31\16\0\1\103\1\0"+
    "\1\103\2\0\2\31\6\0\2\31\2\0\13\31\1\115"+
    "\12\31\1\116\1\31\1\0\1\31\16\0\1\103\1\0"+
    "\1\103\2\0\2\31\6\0\2\31\2\0\1\117\7\31"+
    "\1\120\2\31\1\121\2\31\1\122\11\31\1\0\1\31"+
    "\16\0\1\103\1\0\1\103\2\0\2\31\6\0\2\31"+
    "\2\0\5\31\1\123\6\31\1\124\1\125\12\31\1\0"+
    "\1\31\16\0\1\103\1\0\1\103\2\0\2\31\6\0"+
    "\2\31\2\0\16\31\1\126\11\31\1\0\1\31\16\0"+
    "\1\103\1\0\1\103\2\0\2\31\6\0\2\31\2\0"+
    "\4\31\1\127\23\31\1\0\1\31\16\0\1\103\1\0"+
    "\1\103\2\0\2\31\6\0\2\31\2\0\1\130\17\31"+
    "\1\131\2\31\1\132\4\31\1\0\1\31\16\0\1\103"+
    "\1\0\1\103\2\0\2\31\6\0\2\31\2\0\4\31"+
    "\1\133\23\31\1\0\1\31\16\0\1\103\1\0\1\103"+
    "\2\0\2\31\6\0\2\31\2\0\7\31\1\134\12\31"+
    "\1\135\1\136\1\31\1\137\2\31\1\0\1\31\16\0"+
    "\1\103\1\0\1\103\2\0\2\31\6\0\2\31\2\0"+
    "\7\31\1\140\10\31\1\141\7\31\1\0\1\31\16\0"+
    "\1\103\1\0\1\103\2\0\2\31\6\0\2\31\2\0"+
    "\16\31\1\142\11\31\1\0\1\31\16\0\1\103\1\0"+
    "\1\103\2\0\2\31\6\0\2\31\2\0\7\31\1\143"+
    "\20\31\1\0\1\31\2\0\2\3\1\0\1\3\4\0"+
    "\1\144\3\0\1\103\1\0\1\103\2\0\1\145\1\146"+
    "\6\0\2\31\2\0\30\31\1\0\1\147\12\0\1\150"+
    "\70\0\1\150\55\0\1\151\12\0\1\152\57\0\14\73"+
    "\1\153\54\73\2\74\1\154\66\74\15\0\1\155\1\0"+
    "\1\155\2\0\1\156\1\157\43\0\1\155\16\0\1\160"+
    "\1\0\1\160\2\0\1\161\1\162\43\0\1\160\23\0"+
    "\2\31\62\0\1\103\1\0\1\103\2\0\2\31\6\0"+
    "\2\31\2\0\20\31\1\163\7\31\1\0\1\31\16\0"+
    "\1\103\1\0\1\103\2\0\2\31\6\0\2\31\2\0"+
    "\16\31\1\164\11\31\1\0\1\31\16\0\1\103\1\0"+
    "\1\103\2\0\2\31\6\0\2\31\2\0\4\31\1\165"+
    "\23\31\1\0\1\31\16\0\1\103\1\0\1\103\2\0"+
    "\2\31\6\0\2\31\2\0\22\31\1\166\5\31\1\0"+
    "\1\31\16\0\1\103\1\0\1\103\2\0\2\31\6\0"+
    "\2\31\2\0\21\31\1\167\1\170\5\31\1\0\1\31"+
    "\16\0\1\103\1\0\1\103\2\0\2\31\6\0\2\31"+
    "\2\0\1\171\27\31\1\0\1\31\16\0\1\103\1\0"+
    "\1\103\2\0\2\31\6\0\2\31\2\0\1\172\27\31"+
    "\1\0\1\31\16\0\1\103\1\0\1\103\2\0\2\31"+
    "\6\0\2\31\2\0\5\31\1\173\22\31\1\0\1\31"+
    "\16\0\1\103\1\0\1\103\2\0\2\31\6\0\2\31"+
    "\2\0\23\31\1\174\4\31\1\0\1\31\16\0\1\103"+
    "\1\0\1\103\2\0\2\31\6\0\2\31\2\0\21\31"+
    "\1\175\6\31\1\0\1\31\16\0\1\103\1\0\1\103"+
    "\2\0\2\31\6\0\2\31\2\0\22\31\1\176\5\31"+
    "\1\0\1\31\16\0\1\103\1\0\1\103\2\0\2\31"+
    "\6\0\2\31\2\0\13\31\1\177\14\31\1\0\1\31"+
    "\16\0\1\103\1\0\1\103\2\0\2\31\6\0\2\31"+
    "\2\0\15\31\1\200\12\31\1\0\1\31\16\0\1\103"+
    "\1\0\1\103\2\0\2\31\6\0\2\31\2\0\16\31"+
    "\1\201\11\31\1\0\1\31\16\0\1\103\1\0\1\103"+
    "\2\0\2\31\6\0\2\31\2\0\20\31\1\202\7\31"+
    "\1\0\1\31\16\0\1\103\1\0\1\103\2\0\2\31"+
    "\6\0\2\31\2\0\17\31\1\203\10\31\1\0\1\31"+
    "\16\0\1\103\1\0\1\103\2\0\2\31\6\0\2\31"+
    "\2\0\22\31\1\204\5\31\1\0\1\31\16\0\1\103"+
    "\1\0\1\103\2\0\2\31\6\0\2\31\2\0\15\31"+
    "\1\205\12\31\1\0\1\31\16\0\1\103\1\0\1\103"+
    "\2\0\2\31\6\0\2\31\2\0\25\31\1\206\2\31"+
    "\1\0\1\31\16\0\1\103\1\0\1\103\2\0\2\31"+
    "\6\0\2\31\2\0\2\31\1\207\25\31\1\0\1\31"+
    "\16\0\1\103\1\0\1\103\2\0\2\31\6\0\2\31"+
    "\2\0\10\31\1\210\5\31\1\211\11\31\1\0\1\31"+
    "\16\0\1\103\1\0\1\103\2\0\2\31\6\0\2\31"+
    "\2\0\1\31\1\212\26\31\1\0\1\31\16\0\1\103"+
    "\1\0\1\103\2\0\2\31\6\0\2\31\2\0\22\31"+
    "\1\213\5\31\1\0\1\31\16\0\1\103\1\0\1\103"+
    "\2\0\2\31\6\0\2\31\2\0\16\31\1\214\11\31"+
    "\1\0\1\31\16\0\1\103\1\0\1\103\2\0\2\31"+
    "\6\0\2\31\2\0\1\215\27\31\1\0\1\31\16\0"+
    "\1\103\1\0\1\103\2\0\2\31\6\0\2\31\2\0"+
    "\17\31\1\216\10\31\1\0\1\31\16\0\1\103\1\0"+
    "\1\103\2\0\2\31\6\0\2\31\2\0\10\31\1\217"+
    "\17\31\1\0\1\31\16\0\1\103\1\0\1\103\2\0"+
    "\2\31\6\0\2\31\2\0\10\31\1\220\17\31\1\0"+
    "\1\31\16\0\1\103\1\0\1\103\2\0\2\31\6\0"+
    "\2\31\2\0\23\31\1\221\3\31\1\222\1\0\1\31"+
    "\16\0\1\103\1\0\1\103\2\0\2\31\6\0\2\31"+
    "\2\0\10\31\1\223\17\31\1\0\1\31\16\0\1\103"+
    "\1\0\1\103\2\0\2\31\6\0\2\31\2\0\10\31"+
    "\1\224\17\31\1\0\1\31\70\0\1\151\16\0\1\103"+
    "\1\0\1\103\1\77\1\0\2\31\6\0\2\31\2\0"+
    "\30\31\1\0\1\31\16\0\1\103\1\0\1\103\1\77"+
    "\1\0\2\146\6\0\2\31\2\0\30\31\1\0\1\31"+
    "\2\0\2\3\1\0\1\3\10\0\1\103\1\0\1\103"+
    "\2\0\2\31\6\0\2\31\2\0\30\31\1\0\1\147"+
    "\12\0\1\225\70\0\1\144\55\0\1\225\1\0\14\73"+
    "\1\153\4\73\1\226\47\73\22\0\1\156\1\157\103\0"+
    "\30\227\25\0\2\157\12\0\30\227\25\0\1\161\1\162"+
    "\110\0\1\230\47\0\2\162\17\0\1\230\42\0\1\103"+
    "\1\0\1\103\2\0\2\31\6\0\2\31\2\0\10\31"+
    "\1\231\17\31\1\0\1\31\16\0\1\103\1\0\1\103"+
    "\2\0\2\31\6\0\2\31\2\0\13\31\1\232\14\31"+
    "\1\0\1\31\16\0\1\103\1\0\1\103\2\0\2\31"+
    "\6\0\2\31\2\0\1\233\27\31\1\0\1\31\16\0"+
    "\1\103\1\0\1\103\2\0\2\31\6\0\2\31\2\0"+
    "\4\31\1\234\23\31\1\0\1\31\16\0\1\103\1\0"+
    "\1\103\2\0\2\31\6\0\2\31\2\0\4\31\1\235"+
    "\23\31\1\0\1\31\16\0\1\103\1\0\1\103\2\0"+
    "\2\31\6\0\2\31\2\0\2\31\1\236\25\31\1\0"+
    "\1\31\16\0\1\103\1\0\1\103\2\0\2\31\6\0"+
    "\2\31\2\0\20\31\1\237\7\31\1\0\1\31\16\0"+
    "\1\103\1\0\1\103\2\0\2\31\6\0\2\31\2\0"+
    "\21\31\1\240\6\31\1\0\1\31\16\0\1\103\1\0"+
    "\1\103\2\0\2\31\6\0\2\31\2\0\1\241\27\31"+
    "\1\0\1\31\16\0\1\103\1\0\1\103\2\0\2\31"+
    "\6\0\2\31\2\0\1\31\1\242\26\31\1\0\1\31"+
    "\16\0\1\103\1\0\1\103\2\0\2\31\6\0\2\31"+
    "\2\0\4\31\1\243\23\31\1\0\1\31\16\0\1\103"+
    "\1\0\1\103\2\0\2\31\6\0\2\31\2\0\4\31"+
    "\1\244\23\31\1\0\1\31\16\0\1\103\1\0\1\103"+
    "\2\0\2\31\6\0\2\31\2\0\21\31\1\245\6\31"+
    "\1\0\1\31\16\0\1\103\1\0\1\103\2\0\2\31"+
    "\6\0\2\31\2\0\1\246\27\31\1\0\1\31\16\0"+
    "\1\103\1\0\1\103\2\0\2\31\6\0\2\31\2\0"+
    "\1\247\27\31\1\0\1\31\16\0\1\103\1\0\1\103"+
    "\2\0\2\31\6\0\2\31\2\0\13\31\1\250\2\31"+
    "\1\251\11\31\1\0\1\31\16\0\1\103\1\0\1\103"+
    "\2\0\2\31\6\0\2\31\2\0\6\31\1\252\21\31"+
    "\1\0\1\31\16\0\1\103\1\0\1\103\2\0\2\31"+
    "\6\0\2\31\2\0\12\31\1\253\15\31\1\0\1\31"+
    "\16\0\1\103\1\0\1\103\2\0\2\31\6\0\2\31"+
    "\2\0\24\31\1\254\3\31\1\0\1\31\16\0\1\103"+
    "\1\0\1\103\2\0\2\31\6\0\2\31\2\0\22\31"+
    "\1\255\5\31\1\0\1\31\16\0\1\103\1\0\1\103"+
    "\2\0\2\31\6\0\2\31\2\0\13\31\1\256\14\31"+
    "\1\0\1\31\16\0\1\103\1\0\1\103\2\0\2\31"+
    "\6\0\2\31\2\0\23\31\1\257\4\31\1\0\1\31"+
    "\16\0\1\103\1\0\1\103\2\0\2\31\6\0\2\31"+
    "\2\0\20\31\1\260\7\31\1\0\1\31\16\0\1\103"+
    "\1\0\1\103\2\0\2\31\6\0\2\31\2\0\22\31"+
    "\1\261\5\31\1\0\1\31\16\0\1\103\1\0\1\103"+
    "\2\0\2\31\6\0\2\31\2\0\4\31\1\262\23\31"+
    "\1\0\1\31\16\0\1\103\1\0\1\103\2\0\2\31"+
    "\6\0\2\31\2\0\22\31\1\263\5\31\1\0\1\31"+
    "\16\0\1\103\1\0\1\103\2\0\2\31\6\0\2\31"+
    "\2\0\21\31\1\264\6\31\1\0\1\31\16\0\1\103"+
    "\1\0\1\103\2\0\2\31\6\0\2\31\2\0\4\31"+
    "\1\265\23\31\1\0\1\31\16\0\1\103\1\0\1\103"+
    "\2\0\2\31\6\0\2\31\2\0\3\31\1\266\24\31"+
    "\1\0\1\31\16\0\1\103\1\0\1\103\2\0\2\31"+
    "\6\0\2\31\2\0\13\31\1\267\14\31\1\0\1\31"+
    "\16\0\1\103\1\0\1\103\2\0\2\31\6\0\2\31"+
    "\2\0\15\31\1\270\12\31\1\0\1\31\16\0\1\103"+
    "\1\0\1\103\2\0\2\31\6\0\2\31\2\0\4\31"+
    "\1\271\23\31\1\0\1\31\16\0\1\103\1\0\1\103"+
    "\2\0\2\31\6\0\2\31\2\0\12\31\1\272\15\31"+
    "\1\0\1\31\16\0\1\103\1\0\1\103\2\0\2\31"+
    "\6\0\2\31\2\0\7\31\1\273\20\31\1\0\1\31"+
    "\16\0\1\103\1\0\1\103\2\0\2\31\6\0\2\31"+
    "\2\0\21\31\1\274\6\31\1\0\1\31\16\0\1\103"+
    "\1\0\1\103\2\0\2\31\6\0\2\31\2\0\23\31"+
    "\1\275\4\31\1\0\1\31\16\0\1\103\1\0\1\103"+
    "\2\0\2\31\6\0\2\31\2\0\13\31\1\276\14\31"+
    "\1\0\1\31\16\0\1\103\1\0\1\103\2\0\2\31"+
    "\6\0\2\31\2\0\15\31\1\277\12\31\1\0\1\31"+
    "\16\0\1\103\1\0\1\103\2\0\2\31\6\0\2\31"+
    "\2\0\4\31\1\300\23\31\1\0\1\31\16\0\1\103"+
    "\1\0\1\103\2\0\2\31\6\0\2\31\2\0\13\31"+
    "\1\301\14\31\1\0\1\31\16\0\1\103\1\0\1\103"+
    "\2\0\2\31\6\0\2\31\2\0\22\31\1\302\5\31"+
    "\1\0\1\31\16\0\1\103\1\0\1\103\2\0\2\31"+
    "\6\0\2\31\2\0\4\31\1\303\23\31\1\0\1\31"+
    "\16\0\1\103\1\0\1\103\2\0\2\31\6\0\2\31"+
    "\2\0\20\31\1\304\7\31\1\0\1\31\16\0\1\103"+
    "\1\0\1\103\2\0\2\31\6\0\2\31\2\0\1\305"+
    "\27\31\1\0\1\31\16\0\1\103\1\0\1\103\2\0"+
    "\2\31\6\0\2\31\2\0\1\306\27\31\1\0\1\31"+
    "\16\0\1\103\1\0\1\103\2\0\2\31\6\0\2\31"+
    "\2\0\4\31\1\307\23\31\1\0\1\31\16\0\1\103"+
    "\1\0\1\103\2\0\2\31\6\0\2\31\2\0\10\31"+
    "\1\310\17\31\1\0\1\31\16\0\1\103\1\0\1\103"+
    "\2\0\2\31\6\0\2\31\2\0\20\31\1\311\7\31"+
    "\1\0\1\31\16\0\1\103\1\0\1\103\2\0\2\31"+
    "\6\0\2\31\2\0\22\31\1\312\5\31\1\0\1\31"+
    "\16\0\1\103\1\0\1\103\2\0\2\31\6\0\2\31"+
    "\2\0\10\31\1\313\17\31\1\0\1\31\16\0\1\103"+
    "\1\0\1\103\2\0\2\31\6\0\2\31\2\0\20\31"+
    "\1\314\7\31\1\0\1\31\16\0\1\103\1\0\1\103"+
    "\2\0\2\31\6\0\2\31\2\0\2\31\1\315\25\31"+
    "\1\0\1\31\16\0\1\103\1\0\1\103\2\0\2\31"+
    "\6\0\2\31\2\0\4\31\1\316\23\31\1\0\1\31"+
    "\16\0\1\103\1\0\1\103\2\0\2\31\6\0\2\31"+
    "\2\0\6\31\1\317\21\31\1\0\1\31\16\0\1\103"+
    "\1\0\1\103\2\0\2\31\6\0\2\31\2\0\1\320"+
    "\27\31\1\0\1\31\16\0\1\103\1\0\1\103\2\0"+
    "\2\31\6\0\2\31\2\0\13\31\1\321\14\31\1\0"+
    "\1\31\16\0\1\103\1\0\1\103\2\0\2\31\6\0"+
    "\2\31\2\0\4\31\1\322\23\31\1\0\1\31\16\0"+
    "\1\103\1\0\1\103\2\0\2\31\6\0\2\31\2\0"+
    "\3\31\1\323\24\31\1\0\1\31\16\0\1\103\1\0"+
    "\1\103\2\0\2\31\6\0\2\31\2\0\14\31\1\324"+
    "\13\31\1\0\1\31\16\0\1\103\1\0\1\103\2\0"+
    "\2\31\6\0\2\31\2\0\22\31\1\325\5\31\1\0"+
    "\1\31\16\0\1\103\1\0\1\103\2\0\2\31\6\0"+
    "\2\31\2\0\6\31\1\326\21\31\1\0\1\31\16\0"+
    "\1\103\1\0\1\103\2\0\2\31\6\0\2\31\2\0"+
    "\22\31\1\327\5\31\1\0\1\31\16\0\1\103\1\0"+
    "\1\103\2\0\2\31\6\0\2\31\2\0\2\31\1\330"+
    "\25\31\1\0\1\31\16\0\1\103\1\0\1\103\2\0"+
    "\2\31\6\0\2\31\2\0\2\31\1\331\25\31\1\0"+
    "\1\31\16\0\1\103\1\0\1\103\2\0\2\31\6\0"+
    "\2\31\2\0\15\31\1\332\12\31\1\0\1\31\16\0"+
    "\1\103\1\0\1\103\2\0\2\31\6\0\2\31\2\0"+
    "\2\31\1\333\25\31\1\0\1\31\16\0\1\103\1\0"+
    "\1\103\2\0\2\31\6\0\2\31\2\0\7\31\1\334"+
    "\20\31\1\0\1\31\16\0\1\103\1\0\1\103\2\0"+
    "\2\31\6\0\2\31\2\0\15\31\1\335\12\31\1\0"+
    "\1\31\16\0\1\103\1\0\1\103\2\0\2\31\6\0"+
    "\2\31\2\0\22\31\1\336\5\31\1\0\1\31\16\0"+
    "\1\103\1\0\1\103\2\0\2\31\6\0\2\31\2\0"+
    "\21\31\1\337\6\31\1\0\1\31\16\0\1\103\1\0"+
    "\1\103\2\0\2\31\6\0\2\31\2\0\4\31\1\340"+
    "\23\31\1\0\1\31\16\0\1\103\1\0\1\103\2\0"+
    "\2\31\6\0\2\31\2\0\4\31\1\341\23\31\1\0"+
    "\1\31\16\0\1\103\1\0\1\103\2\0\2\31\6\0"+
    "\2\31\2\0\4\31\1\342\23\31\1\0\1\31\16\0"+
    "\1\103\1\0\1\103\2\0\2\31\6\0\2\31\2\0"+
    "\22\31\1\343\5\31\1\0\1\31\16\0\1\103\1\0"+
    "\1\103\2\0\2\31\6\0\2\31\2\0\15\31\1\344"+
    "\12\31\1\0\1\31\16\0\1\103\1\0\1\103\2\0"+
    "\2\31\6\0\2\31\2\0\4\31\1\345\23\31\1\0"+
    "\1\31\16\0\1\103\1\0\1\103\2\0\2\31\6\0"+
    "\2\31\2\0\22\31\1\346\5\31\1\0\1\31\16\0"+
    "\1\103\1\0\1\103\2\0\2\31\6\0\2\31\2\0"+
    "\3\31\1\347\24\31\1\0\1\31\16\0\1\103\1\0"+
    "\1\103\2\0\2\31\6\0\2\31\2\0\21\31\1\350"+
    "\6\31\1\0\1\31\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9405];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\6\1\2\11\2\1\1\11\1\1\1\11"+
    "\3\1\2\11\3\1\1\11\2\1\2\11\16\1\1\11"+
    "\1\1\2\11\1\0\3\11\1\0\2\1\5\11\2\0"+
    "\1\11\2\0\3\11\1\0\44\1\1\11\1\0\1\1"+
    "\1\0\1\11\1\0\2\1\1\0\44\1\4\11\120\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[232];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private  List<Token> listComments =  new ArrayList<>();
    private String report = "";
    private void addComments(){
        listComments.add(new Token((yyline+1),(yycolumn+1),yytext()));
    }
    private void print(String token){
        //Console.ConsoleText.append("\n<linea:"+(yyline+1)+"><colum:"+(yycolumn+1)+"><TOKEN:"+yytext()+">");
        report+="\n<linea:"+(yyline+1)+"><colum:"+(yycolumn+1)+"><TOKEN:"+yytext()+">";
    }
    public String getReport(){
        return this.report;
    }
    public void setReport(String repor){
        this.report = repor;
    }
    
    public List<Token>  getlistComments(){
        return this.listComments;
    };


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { print("ERROR");
            }
            // fall through
          case 85: break;
          case 2:
            { /*ESPACIOS*/
            }
            // fall through
          case 86: break;
          case 3:
            { print("!");return new Symbol(sym.ADMIRACION,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 87: break;
          case 4:
            { print("%");return new Symbol(sym.MODULO,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 88: break;
          case 5:
            { print("&");return new Symbol(sym.ONEY,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 89: break;
          case 6:
            { print("'");return new Symbol(sym.SIMPLE_COMILLA,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 90: break;
          case 7:
            { print("(");return new Symbol(sym.P_APERTURA,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 91: break;
          case 8:
            { print(")");return new Symbol(sym.P_CIERRE,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 92: break;
          case 9:
            { print("*");return new Symbol(sym.MULTIPLICACION,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 93: break;
          case 10:
            { print("+");return new Symbol(sym.SUMA,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 94: break;
          case 11:
            { print(",");return new Symbol(sym.COMA,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 95: break;
          case 12:
            { print("-");return new Symbol(sym.RESTA,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 96: break;
          case 13:
            { print(".");return new Symbol(sym.PUNTO,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 97: break;
          case 14:
            { print("/");return new Symbol(sym.DIVISION,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 98: break;
          case 15:
            { print("{ENTERO}" );return new Symbol(sym.ENTERO,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 99: break;
          case 16:
            { print(":");return new Symbol(sym.DOBLE_PUNTO,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 100: break;
          case 17:
            { print(";");return new Symbol(sym.PUNTO_COMA,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 101: break;
          case 18:
            { print("<");return new Symbol(sym.MENOR_Q,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 102: break;
          case 19:
            { print("=");return new Symbol(sym.IGUAL,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 103: break;
          case 20:
            { print(">");return new Symbol(sym.MAYOR_Q,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 104: break;
          case 21:
            { print("?");return new Symbol(sym.INTERO,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 105: break;
          case 22:
            { print("{ID}" );return new Symbol(sym.ID,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 106: break;
          case 23:
            { print("[");return new Symbol(sym.C_APERTURA,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 107: break;
          case 24:
            { print("]");return new Symbol(sym.C_CIERRE,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 108: break;
          case 25:
            { print("{");return new Symbol(sym.L_APERTURA,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 109: break;
          case 26:
            { print("}");return new Symbol(sym.L_CIERRE,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 110: break;
          case 27:
            { print("!=");return new Symbol(sym.ADMIRACION_IGUAL,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 111: break;
          case 28:
            { print("{STRING}" );return new Symbol(sym.TEXT,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 112: break;
          case 29:
            { print("%=");return new Symbol(sym.MODULO_IGUAL,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 113: break;
          case 30:
            { print("&&");return new Symbol(sym.TWOY,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 114: break;
          case 31:
            { print("OROR");return new Symbol(sym.TWOO,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 115: break;
          case 32:
            { print("*=");return new Symbol(sym.MULTIPLICACION_IGUAL,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 116: break;
          case 33:
            { print("++");return new Symbol(sym.CREMENTO,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 117: break;
          case 34:
            { print("+=");return new Symbol(sym.SUMA_IGUAL,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 118: break;
          case 35:
            { print("--");return new Symbol(sym.INCREMENTO,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 119: break;
          case 36:
            { print("-=");return new Symbol(sym.RESTA_IGUAL,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 120: break;
          case 37:
            { print("/=");return new Symbol(sym.DIVISION_IGUAL,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 121: break;
          case 38:
            { print("<=");return new Symbol(sym.MENOR_Q_IGUAL,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 122: break;
          case 39:
            { print("==");return new Symbol(sym.DOUBLE_IGUAL,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 123: break;
          case 40:
            { print(">=");return new Symbol(sym.MAYOR_Q_IGUAL,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 124: break;
          case 41:
            { print("do");return new Symbol(sym.DO,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 125: break;
          case 42:
            { print("if");return new Symbol(sym.IF,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 126: break;
          case 43:
            { print("'"+"'");return new Symbol(sym.CARACTER,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 127: break;
          case 44:
            { print("OR");return new Symbol(sym.ONEO,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 128: break;
          case 45:
            { addComments();/*COMENTARIO DE UNA LINEA*/
            }
            // fall through
          case 129: break;
          case 46:
            { print("/u");return new Symbol(sym.CHARTN,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 130: break;
          case 47:
            { print("{DECIMAL}" );return new Symbol(sym.DECIMAL,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 131: break;
          case 48:
            { print("for");return new Symbol(sym.FOR,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 132: break;
          case 49:
            { print("int");return new Symbol(sym.INT,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 133: break;
          case 50:
            { print("new");return new Symbol(sym.NEW,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 134: break;
          case 51:
            { print("try");return new Symbol(sym.TRY,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 135: break;
          case 52:
            { addComments();/*COMENTARIO MULTILINEA*/
            }
            // fall through
          case 136: break;
          case 53:
            { print("f");return new Symbol(sym.F,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 137: break;
          case 54:
            { print("byte");return new Symbol(sym.BYTE,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 138: break;
          case 55:
            { print("case");return new Symbol(sym.CASE,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 139: break;
          case 56:
            { print("char");return new Symbol(sym.CHAR,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 140: break;
          case 57:
            { print("else");return new Symbol(sym.ELSE,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 141: break;
          case 58:
            { print("long");return new Symbol(sym.LONG,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 142: break;
          case 59:
            { print("this");return new Symbol(sym.THIS,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 143: break;
          case 60:
            { print("true");return new Symbol(sym.TRUE,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 144: break;
          case 61:
            { print("void");return new Symbol(sym.VOID,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 145: break;
          case 62:
            { print("break");return new Symbol(sym.BREAK,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 146: break;
          case 63:
            { print("catch");return new Symbol(sym.CATCH,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 147: break;
          case 64:
            { print("class");return new Symbol(sym.CLASS,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 148: break;
          case 65:
            { print("false");return new Symbol(sym.FALSE,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 149: break;
          case 66:
            { print("final");return new Symbol(sym.FINAL,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 150: break;
          case 67:
            { print("float");return new Symbol(sym.FLOAT,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 151: break;
          case 68:
            { print("short");return new Symbol(sym.SHORT,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 152: break;
          case 69:
            { print("super");return new Symbol(sym.SUPER,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 153: break;
          case 70:
            { print("while");return new Symbol(sym.WHILE,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 154: break;
          case 71:
            { print("String");return new Symbol(sym.STRING,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 155: break;
          case 72:
            { print("double");return new Symbol(sym.DOUBLE,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 156: break;
          case 73:
            { print("import");return new Symbol(sym.IMPORT,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 157: break;
          case 74:
            { print("public");return new Symbol(sym.PUBLIC,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 158: break;
          case 75:
            { print("return");return new Symbol(sym.RETURN,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 159: break;
          case 76:
            { print("static");return new Symbol(sym.STATIC,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 160: break;
          case 77:
            { print("switch");return new Symbol(sym.SWITCH,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 161: break;
          case 78:
            { print("boolean");return new Symbol(sym.BOOLEAN,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 162: break;
          case 79:
            { print("default");return new Symbol(sym.DEFAULT,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 163: break;
          case 80:
            { print("extends");return new Symbol(sym.EXNTENDS,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 164: break;
          case 81:
            { print("package");return new Symbol(sym.PACKAGE,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 165: break;
          case 82:
            { print("private");return new Symbol(sym.PRIVATE,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 166: break;
          case 83:
            { print("protected");return new Symbol(sym.PROTECTED,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 167: break;
          case 84:
            { print("implements");return new Symbol(sym.IMPLEMENTS,yyline,yycolumn, (yytext()));
            }
            // fall through
          case 168: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
