
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.cunoc.JFlex_Cup.Java;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import com.cunoc.JFlex_Cup.Java.repetition.ListType;
import com.cunoc.JFlex_Cup.Java.repetition.Method;
import com.cunoc.JFlex_Cup.Java.repetition.Variable;
import com.cunoc.JFlex_Cup.Java.repetition.ClassSyntax;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\375\000\002\002\004\000\002\002\004\000\002\005" +
    "\006\000\002\005\003\000\002\012\005\000\002\012\003" +
    "\000\002\006\006\000\002\006\002\000\002\010\004\000" +
    "\002\010\003\000\002\011\004\000\002\011\004\000\002" +
    "\007\003\000\002\007\003\000\002\130\002\000\002\015" +
    "\012\000\002\024\002\000\002\024\006\000\002\024\006" +
    "\000\002\025\005\000\002\025\002\000\002\021\004\000" +
    "\002\021\004\000\002\013\003\000\002\013\002\000\002" +
    "\014\003\000\002\014\002\000\002\020\004\000\002\020" +
    "\004\000\002\054\003\000\002\054\002\000\002\055\003" +
    "\000\002\055\002\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\016\004\000\002\016\002\000\002" +
    "\027\004\000\002\027\003\000\002\046\003\000\002\046" +
    "\002\000\002\022\004\000\002\022\003\000\002\131\002" +
    "\000\002\023\005\000\002\132\002\000\002\023\005\000" +
    "\002\044\003\000\002\044\003\000\002\044\003\000\002" +
    "\044\003\000\002\044\003\000\002\044\003\000\002\044" +
    "\003\000\002\126\003\000\002\126\003\000\002\126\003" +
    "\000\002\126\003\000\002\126\003\000\002\126\003\000" +
    "\002\126\003\000\002\126\003\000\002\126\003\000\002" +
    "\126\003\000\002\133\002\000\002\031\005\000\002\134" +
    "\002\000\002\033\005\000\002\135\002\000\002\034\005" +
    "\000\002\136\002\000\002\035\005\000\002\137\002\000" +
    "\002\040\005\000\002\140\002\000\002\041\005\000\002" +
    "\141\002\000\002\032\005\000\002\142\002\000\002\032" +
    "\005\000\002\143\002\000\002\032\005\000\002\144\002" +
    "\000\002\032\005\000\002\053\003\000\002\145\002\000" +
    "\002\053\006\000\002\026\005\000\002\026\003\000\002" +
    "\043\006\000\002\043\006\000\002\043\006\000\002\043" +
    "\006\000\002\043\006\000\002\043\006\000\002\043\007" +
    "\000\002\043\005\000\002\043\005\000\002\043\005\000" +
    "\002\043\005\000\002\043\005\000\002\043\003\000\002" +
    "\043\003\000\002\043\004\000\002\043\005\000\002\043" +
    "\003\000\002\043\003\000\002\043\004\000\002\043\004" +
    "\000\002\043\004\000\002\043\003\000\002\043\003\000" +
    "\002\043\004\000\002\043\003\000\002\127\004\000\002" +
    "\127\005\000\002\124\003\000\002\124\003\000\002\124" +
    "\003\000\002\124\003\000\002\124\003\000\002\124\003" +
    "\000\002\124\002\000\002\114\002\000\002\114\006\000" +
    "\002\120\003\000\002\120\002\000\002\030\005\000\002" +
    "\030\003\000\002\057\004\000\002\057\003\000\002\042" +
    "\004\000\002\045\004\000\002\045\002\000\002\060\005" +
    "\000\002\060\003\000\002\065\005\000\002\065\002\000" +
    "\002\113\004\000\002\113\002\000\002\036\003\000\002" +
    "\036\002\000\002\037\003\000\002\037\002\000\002\112" +
    "\003\000\002\112\004\000\002\004\003\000\002\003\002" +
    "\000\002\121\005\000\002\122\003\000\002\122\003\000" +
    "\002\122\003\000\002\122\003\000\002\122\002\000\002" +
    "\123\004\000\002\123\004\000\002\123\003\000\002\123" +
    "\003\000\002\123\004\000\002\123\003\000\002\073\004" +
    "\000\002\061\004\000\002\061\006\000\002\061\005\000" +
    "\002\061\004\000\002\061\002\000\002\056\004\000\002" +
    "\074\003\000\002\146\002\000\002\047\011\000\002\147" +
    "\002\000\002\150\002\000\002\047\014\000\002\151\002" +
    "\000\002\047\012\000\002\152\002\000\002\050\005\000" +
    "\002\050\002\000\002\051\004\000\002\051\002\000\002" +
    "\064\004\000\002\064\002\000\002\063\003\000\002\063" +
    "\003\000\002\063\003\000\002\062\004\000\002\075\004" +
    "\000\002\075\003\000\002\075\003\000\002\075\003\000" +
    "\002\071\003\000\002\071\003\000\002\071\003\000\002" +
    "\071\003\000\002\071\003\000\002\071\003\000\002\066" +
    "\005\000\002\066\003\000\002\066\002\000\002\070\004" +
    "\000\002\070\003\000\002\072\005\000\002\072\003\000" +
    "\002\077\004\000\002\077\004\000\002\077\010\000\002" +
    "\052\005\000\002\052\002\000\002\125\005\000\002\125" +
    "\002\000\002\102\004\000\002\102\004\000\002\102\003" +
    "\000\002\102\004\000\002\102\006\000\002\102\005\000" +
    "\002\100\004\000\002\100\003\000\002\101\004\000\002" +
    "\101\003\000\002\067\005\000\002\067\004\000\002\076" +
    "\011\000\002\076\013\000\002\076\012\000\002\076\011" +
    "\000\002\076\006\000\002\115\007\000\002\115\005\000" +
    "\002\115\002\000\002\116\004\000\002\116\003\000\002" +
    "\117\003\000\002\117\003\000\002\104\006\000\002\104" +
    "\011\000\002\105\004\000\002\105\004\000\002\103\003" +
    "\000\002\103\003\000\002\103\003\000\002\103\003\000" +
    "\002\103\003\000\002\103\003\000\002\106\004\000\002" +
    "\106\005\000\002\107\004\000\002\107\003\000\002\110" +
    "\004\000\002\110\002\000\002\111\005\000\002\111\012" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01bd\000\020\023\005\024\004\055\ufffa\056\ufffa\057" +
    "\ufffa\060\ufffa\061\ufffa\001\002\000\004\064\u01b6\001\002" +
    "\000\004\064\u01af\001\002\000\014\055\ufffe\056\ufffe\057" +
    "\ufffe\060\ufffe\061\ufffe\001\002\000\004\002\u01ae\001\002" +
    "\000\014\055\015\056\011\057\013\060\021\061\012\001" +
    "\002\000\046\003\uffe0\004\uffe0\005\uffe0\006\uffe0\007\uffe0" +
    "\010\uffe0\012\uffe0\013\uffe0\016\uffe0\026\uffe0\032\uffe0\040" +
    "\uffe0\060\uffe0\061\uffe0\064\uffe0\065\uffe0\073\uffe0\101\uffe0" +
    "\001\002\000\052\003\uffe3\004\uffe3\005\uffe3\006\uffe3\007" +
    "\uffe3\010\uffe3\012\uffe3\013\uffe3\016\uffe3\026\uffe3\032\uffe3" +
    "\040\uffe3\055\uffe3\056\uffe3\057\uffe3\060\u01ad\064\uffe3\065" +
    "\uffe3\073\uffe3\101\uffe3\001\002\000\046\003\uffde\004\uffde" +
    "\005\uffde\006\uffde\007\uffde\010\uffde\012\uffde\013\uffde\016" +
    "\uffde\026\uffde\032\uffde\040\uffde\060\uffde\061\uffde\064\uffde" +
    "\065\uffde\073\uffde\101\uffde\001\002\000\010\032\uffe7\060" +
    "\021\061\012\001\002\000\046\003\uffdf\004\uffdf\005\uffdf" +
    "\006\uffdf\007\uffdf\010\uffdf\012\uffdf\013\uffdf\016\uffdf\026" +
    "\uffdf\032\uffdf\040\uffdf\060\uffdf\061\uffdf\064\uffdf\065\uffdf" +
    "\073\uffdf\101\uffdf\001\002\000\012\032\uffe9\055\015\056" +
    "\011\057\013\001\002\000\004\032\024\001\002\000\004" +
    "\002\000\001\002\000\052\003\uffe1\004\uffe1\005\uffe1\006" +
    "\uffe1\007\uffe1\010\uffe1\012\uffe1\013\uffe1\016\uffe1\026\uffe1" +
    "\032\uffe1\040\uffe1\055\uffe1\056\uffe1\057\uffe1\061\022\064" +
    "\uffe1\065\uffe1\073\uffe1\101\uffe1\001\002\000\050\003\uffe2" +
    "\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\012\uffe2\013" +
    "\uffe2\016\uffe2\026\uffe2\032\uffe2\040\uffe2\055\uffe2\056\uffe2" +
    "\057\uffe2\064\uffe2\065\uffe2\073\uffe2\101\uffe2\001\002\000" +
    "\050\003\uffe5\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5" +
    "\012\uffe5\013\uffe5\016\uffe5\026\uffe5\032\uffe5\040\uffe5\055" +
    "\uffe5\056\uffe5\057\uffe5\064\uffe5\065\uffe5\073\uffe5\101\uffe5" +
    "\001\002\000\004\064\025\001\002\000\010\034\ufff3\035" +
    "\ufff3\103\ufff3\001\002\000\010\034\030\035\031\103\ufff1" +
    "\001\002\000\004\103\043\001\002\000\004\064\040\001" +
    "\002\000\004\064\032\001\002\000\012\025\033\034\uffed" +
    "\035\uffed\103\uffed\001\002\000\004\064\036\001\002\000" +
    "\010\034\030\035\031\103\ufff1\001\002\000\004\103\uffef" +
    "\001\002\000\012\025\033\034\uffed\035\uffed\103\uffed\001" +
    "\002\000\010\034\uffee\035\uffee\103\uffee\001\002\000\012" +
    "\025\033\034\uffed\035\uffed\103\uffed\001\002\000\010\034" +
    "\030\035\031\103\ufff1\001\002\000\004\103\ufff0\001\002" +
    "\000\054\003\uffd8\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010" +
    "\uffd8\012\uffd8\013\uffd8\016\uffd8\026\uffd8\040\uffd8\055\015" +
    "\056\011\057\013\060\021\061\012\064\uffd8\065\uffd8\073" +
    "\uffd8\101\uffd8\104\uffdc\001\002\000\040\003\075\004\064" +
    "\005\077\006\061\007\055\010\072\012\106\013\063\016" +
    "\067\026\100\040\103\064\066\065\070\073\060\101\uff58" +
    "\001\002\000\004\104\052\001\002\000\044\003\uffd8\004" +
    "\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8\012\uffd8\013\uffd8" +
    "\016\uffd8\026\uffd8\040\uffd8\060\021\061\012\064\uffd8\065" +
    "\uffd8\073\uffd8\101\uffd8\001\002\000\040\003\uffda\004\uffda" +
    "\005\uffda\006\uffda\007\uffda\010\uffda\012\uffda\013\uffda\016" +
    "\uffda\026\uffda\040\uffda\064\uffda\065\uffda\073\uffda\101\uffda" +
    "\001\002\000\040\003\uffd9\004\uffd9\005\uffd9\006\uffd9\007" +
    "\uffd9\010\uffd9\012\uffd9\013\uffd9\016\uffd9\026\uffd9\040\uffd9" +
    "\064\uffd9\065\uffd9\073\uffd9\101\uffd9\001\002\000\040\003" +
    "\uffdb\004\uffdb\005\uffdb\006\uffdb\007\uffdb\010\uffdb\012\uffdb" +
    "\013\uffdb\016\uffdb\026\uffdb\040\uffdb\064\uffdb\065\uffdb\073" +
    "\uffdb\101\uffdb\001\002\000\004\002\ufff2\001\002\000\054" +
    "\003\uffd3\004\uffd3\005\uffd3\006\uffd3\007\uffd3\010\uffd3\012" +
    "\uffd3\013\uffd3\016\uffd3\026\uffd3\040\uffd3\055\uffd3\056\uffd3" +
    "\057\uffd3\060\uffd3\061\uffd3\064\uffd3\065\uffd3\073\uffd3\101" +
    "\uffd3\104\uffd3\001\002\000\022\003\uffcb\026\uffcb\031\uffcb" +
    "\040\uffcb\064\uffcb\073\uffcb\101\uffcb\102\uffcb\001\002\000" +
    "\006\064\uffae\105\uffae\001\002\000\004\104\uffdd\001\002" +
    "\000\004\101\u019e\001\002\000\040\011\207\015\222\017" +
    "\205\020\212\021\211\027\220\037\214\062\202\063\215" +
    "\064\206\066\216\067\204\070\223\101\210\103\200\001" +
    "\002\000\006\064\uffb0\105\uffb0\001\002\000\022\003\uffd0" +
    "\026\uffd0\031\uffd0\040\uffd0\064\uffd0\073\uffd0\101\uffd0\102" +
    "\uffd0\001\002\000\006\064\uffbc\105\uffbc\001\002\000\006" +
    "\064\uffb4\105\uffb4\001\002\000\022\003\uffcc\026\uffcc\031" +
    "\uffcc\040\uffcc\064\uffcc\073\uffcc\101\uffcc\102\uffcc\001\002" +
    "\000\010\064\uffb6\101\uff53\105\uffb6\001\002\000\006\064" +
    "\uffba\105\uffba\001\002\000\006\064\uffb8\105\uffb8\001\002" +
    "\000\022\003\uffce\026\uffce\031\uffce\040\uffce\064\uffce\073" +
    "\uffce\101\uffce\102\uffce\001\002\000\006\064\uffc0\105\uffc0" +
    "\001\002\000\004\104\uffd6\001\002\000\132\003\uffa8\004" +
    "\uffa8\005\uffa8\006\uffa8\007\uffa8\010\uffa8\011\uffa8\012\uffa8" +
    "\013\uffa8\015\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\026" +
    "\uffa8\027\uffa8\033\uffa8\036\uffa8\037\uffa8\040\uffa8\043\uffa8" +
    "\044\uffa8\045\uffa8\046\uffa8\050\uffa8\053\uffa8\054\uffa8\055" +
    "\uffa8\056\uffa8\057\uffa8\060\uffa8\061\uffa8\062\uffa8\063\uffa8" +
    "\064\uffa8\065\uffa8\066\uffa8\067\uffa8\070\uffa8\073\uffa8\101" +
    "\uffa8\102\uffa8\103\uffa8\104\uffa8\001\002\000\140\003\ufff4" +
    "\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012" +
    "\ufff4\013\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4" +
    "\024\ufff4\026\ufff4\027\ufff4\033\ufff4\036\ufff4\037\ufff4\040" +
    "\ufff4\043\ufff4\044\ufff4\045\ufff4\046\ufff4\050\ufff4\051\ufff4" +
    "\052\ufff4\053\ufff4\054\ufff4\055\ufff4\056\ufff4\057\ufff4\060" +
    "\ufff4\061\ufff4\062\ufff4\063\ufff4\064\ufff4\065\ufff4\066\ufff4" +
    "\067\ufff4\070\ufff4\073\ufff4\101\ufff4\102\ufff4\103\ufff4\104" +
    "\ufff4\001\002\000\016\003\075\026\100\040\103\064\u0188" +
    "\073\060\101\uff58\001\002\000\006\064\uffb2\105\uffb2\001" +
    "\002\000\140\003\ufff5\004\ufff5\005\ufff5\006\ufff5\007\ufff5" +
    "\010\ufff5\011\ufff5\012\ufff5\013\ufff5\015\ufff5\016\ufff5\017" +
    "\ufff5\020\ufff5\021\ufff5\024\ufff5\026\ufff5\027\ufff5\033\ufff5" +
    "\036\ufff5\037\ufff5\040\ufff5\043\ufff5\044\ufff5\045\ufff5\046" +
    "\ufff5\050\ufff5\051\ufff5\052\ufff5\053\ufff5\054\ufff5\055\ufff5" +
    "\056\ufff5\057\ufff5\060\ufff5\061\ufff5\062\ufff5\063\ufff5\064" +
    "\ufff5\065\ufff5\066\ufff5\067\ufff5\070\ufff5\073\ufff5\101\ufff5" +
    "\102\ufff5\103\ufff5\104\ufff5\001\002\000\022\003\uffcf\026" +
    "\uffcf\031\uffcf\040\uffcf\064\uffcf\073\uffcf\101\uffcf\102\uffcf" +
    "\001\002\000\054\003\uffd5\004\uffd5\005\uffd5\006\uffd5\007" +
    "\uffd5\010\uffd5\012\uffd5\013\uffd5\016\uffd5\026\uffd5\040\uffd5" +
    "\055\uffd5\056\uffd5\057\uffd5\060\uffd5\061\uffd5\064\uffd5\065" +
    "\uffd5\073\uffd5\101\uffd5\104\uffd5\001\002\000\004\064\uff56" +
    "\001\002\000\022\003\uffd1\026\uffd1\031\uffd1\040\uffd1\064" +
    "\uffd1\073\uffd1\101\uffd1\102\uffd1\001\002\000\022\003\uffcd" +
    "\026\uffcd\031\uffcd\040\uffcd\064\uffcd\073\uffcd\101\uffcd\102" +
    "\uffcd\001\002\000\006\064\uffbe\105\uffbe\001\002\000\006" +
    "\064\112\105\110\001\002\000\004\106\113\001\002\000" +
    "\022\003\uffbd\026\uffbd\031\uffbd\040\uffbd\064\uffbd\073\uffbd" +
    "\101\uffbd\102\uffbd\001\002\000\022\003\uffac\026\uffac\031" +
    "\uffac\040\uffac\064\uffac\073\uffac\101\uffac\102\uffac\001\002" +
    "\000\006\064\uffab\105\uffab\001\002\000\006\064\112\105" +
    "\110\001\002\000\022\003\uffaa\026\uffaa\031\uffaa\040\uffaa" +
    "\064\uffaa\073\uffaa\101\uffaa\102\uffaa\001\002\000\004\064" +
    "\117\001\002\000\004\101\uff55\001\002\000\004\101\121" +
    "\001\002\000\030\004\064\005\077\006\061\007\055\010" +
    "\072\012\106\013\063\016\067\064\123\065\070\102\uff4f" +
    "\001\002\000\004\102\133\001\002\000\006\064\uffb6\105" +
    "\uffb6\001\002\000\006\031\uff51\102\uff51\001\002\000\006" +
    "\031\126\102\uff4d\001\002\000\030\004\064\005\077\006" +
    "\061\007\055\010\072\012\106\013\063\016\067\064\123" +
    "\065\070\102\uff4f\001\002\000\004\102\uff50\001\002\000" +
    "\004\102\uff4e\001\002\000\006\064\112\105\110\001\002" +
    "\000\022\003\uffb5\026\uffb5\031\uffb5\040\uffb5\064\uffb5\073" +
    "\uffb5\101\uffb5\102\uffb5\001\002\000\004\103\134\001\002" +
    "\000\054\004\064\005\077\006\061\007\055\010\072\012" +
    "\106\013\063\016\067\033\147\036\162\043\163\044\140" +
    "\045\150\046\144\050\143\053\152\054\141\060\154\064" +
    "\145\065\070\104\uff4b\001\002\000\010\003\uff3d\026\uff3d" +
    "\073\uff3d\001\002\000\062\003\uff43\004\uff48\005\uff48\006" +
    "\uff48\007\uff48\010\uff48\012\uff48\013\uff48\016\uff48\026\uff43" +
    "\033\uff48\036\uff48\043\uff48\044\uff48\045\uff48\046\uff48\050" +
    "\uff48\053\uff48\054\uff48\060\uff48\064\uff48\065\uff48\073\uff43" +
    "\104\uff48\001\002\000\010\003\uff41\026\uff41\073\uff41\001" +
    "\002\000\004\101\u017d\001\002\000\040\011\207\015\222" +
    "\017\205\020\212\021\211\027\220\037\214\062\202\063" +
    "\215\064\206\066\216\067\204\070\223\101\210\103\200" +
    "\001\002\000\010\003\uff44\026\uff44\073\uff44\001\002\000" +
    "\004\101\u0168\001\002\000\004\101\u0154\001\002\000\026" +
    "\003\uff3a\025\u0134\026\uff3a\064\u0133\067\u013f\070\u0142\073" +
    "\u0141\101\u0144\102\uff3a\105\u0140\001\002\000\010\003\uff45" +
    "\026\uff45\073\uff45\001\002\000\016\003\uff3a\025\u0134\026" +
    "\uff3a\064\u0133\073\uff3a\102\uff3a\001\002\000\004\103\u012b" +
    "\001\002\000\010\003\uff3f\026\uff3f\073\uff3f\001\002\000" +
    "\006\003\075\026\100\001\002\000\054\004\064\005\077" +
    "\006\061\007\055\010\072\012\106\013\063\016\067\033" +
    "\147\036\162\043\163\044\140\045\150\046\144\050\143" +
    "\053\152\054\141\060\154\064\145\065\070\104\uff4b\001" +
    "\002\000\024\004\064\005\077\006\061\007\055\010\072" +
    "\012\106\013\063\016\067\065\070\001\002\000\004\104" +
    "\u0127\001\002\000\010\003\075\026\100\073\060\001\002" +
    "\000\054\004\uff49\005\uff49\006\uff49\007\uff49\010\uff49\012" +
    "\uff49\013\uff49\016\uff49\033\uff49\036\uff49\043\uff49\044\uff49" +
    "\045\uff49\046\uff49\050\uff49\053\uff49\054\uff49\060\uff49\064" +
    "\uff49\065\uff49\104\uff49\001\002\000\054\004\uff4a\005\uff4a" +
    "\006\uff4a\007\uff4a\010\uff4a\012\uff4a\013\uff4a\016\uff4a\033" +
    "\uff4a\036\uff4a\043\uff4a\044\uff4a\045\uff4a\046\uff4a\050\uff4a" +
    "\053\uff4a\054\uff4a\060\uff4a\064\uff4a\065\uff4a\104\uff4a\001" +
    "\002\000\010\003\uff40\026\uff40\073\uff40\001\002\000\006" +
    "\025\u011b\101\uff31\001\002\000\004\101\166\001\002\000" +
    "\010\003\uff42\026\uff42\073\uff42\001\002\000\010\003\uff3e" +
    "\026\uff3e\073\uff3e\001\002\000\026\004\064\005\077\006" +
    "\061\007\055\010\072\012\106\013\063\016\067\064\172" +
    "\065\070\001\002\000\010\003\uff0d\026\uff0d\073\uff0d\001" +
    "\002\000\010\003\075\026\100\073\060\001\002\000\010" +
    "\003\uff11\026\uff11\073\uff11\001\002\000\006\064\u0111\105" +
    "\u0112\001\002\000\010\003\uff0f\026\uff0f\073\uff0f\001\002" +
    "\000\010\003\uff10\026\uff10\073\uff10\001\002\000\010\003" +
    "\uff12\026\uff12\073\uff12\001\002\000\010\003\uff0e\026\uff0e" +
    "\073\uff0e\001\002\000\042\011\207\015\222\017\205\020" +
    "\212\021\211\027\220\037\214\062\202\063\215\064\206" +
    "\066\216\067\204\070\223\101\210\102\221\103\200\001" +
    "\002\000\042\011\207\015\222\017\205\020\212\021\211" +
    "\027\220\037\214\062\202\063\215\064\206\066\216\067" +
    "\204\070\223\101\210\103\200\104\u010b\001\002\000\034" +
    "\003\075\021\237\026\100\067\226\070\236\071\227\072" +
    "\235\073\233\074\234\075\232\076\230\077\225\100\231" +
    "\001\002\000\046\003\uff91\021\uff91\026\uff91\030\uff91\031" +
    "\uff91\067\uff91\070\uff91\071\uff91\072\uff91\073\uff91\074\uff91" +
    "\075\uff91\076\uff91\077\uff91\100\uff91\102\uff91\104\uff91\106" +
    "\uff91\001\002\000\054\004\uff1e\005\uff1e\006\uff1e\007\uff1e" +
    "\010\uff1e\012\uff1e\013\uff1e\016\uff1e\033\uff1e\036\uff1e\043" +
    "\uff1e\044\uff1e\045\uff1e\046\uff1e\050\uff1e\053\uff1e\054\uff1e" +
    "\060\uff1e\064\uff1e\065\uff1e\104\uff1e\001\002\000\040\011" +
    "\207\015\222\017\205\020\212\021\211\027\220\037\214" +
    "\062\202\063\215\064\206\066\216\067\204\070\223\101" +
    "\210\103\200\001\002\000\046\003\uff96\021\uff96\026\uff96" +
    "\030\uff96\031\uff96\067\uff96\070\uff96\071\uff96\072\uff96\073" +
    "\uff96\074\uff96\075\uff96\076\uff96\077\uff96\100\uff96\102\uff96" +
    "\104\uff96\106\uff96\001\002\000\054\003\uff5b\021\uff5b\025" +
    "\345\026\uff5b\030\uff5b\031\uff5b\067\uff5b\070\uff5b\071\uff5b" +
    "\072\uff5b\073\uff5b\074\uff5b\075\uff5b\076\uff5b\077\uff5b\100" +
    "\uff5b\101\344\102\uff5b\104\uff5b\105\343\106\uff5b\001\002" +
    "\000\046\003\uff9a\021\uff9a\026\uff9a\030\uff9a\031\uff9a\067" +
    "\uff9a\070\uff9a\071\uff9a\072\uff9a\073\uff9a\074\uff9a\075\uff9a" +
    "\076\uff9a\077\uff9a\100\uff9a\102\uff9a\104\uff9a\106\uff9a\001" +
    "\002\000\040\011\207\015\222\017\205\020\212\021\211" +
    "\027\220\037\214\062\202\063\215\064\206\066\216\067" +
    "\204\070\223\101\210\103\200\001\002\000\040\011\207" +
    "\015\222\017\205\020\212\021\211\027\220\037\214\062" +
    "\202\063\215\064\206\066\216\067\204\070\223\101\210" +
    "\103\200\001\002\000\046\003\uff97\021\uff97\026\uff97\030" +
    "\uff97\031\uff97\067\uff97\070\uff97\071\uff97\072\uff97\073\uff97" +
    "\074\uff97\075\uff97\076\uff97\077\uff97\100\uff97\102\uff97\104" +
    "\uff97\106\uff97\001\002\000\046\003\uff8f\021\uff8f\026\uff8f" +
    "\030\uff8f\031\uff8f\067\uff8f\070\uff8f\071\uff8f\072\uff8f\073" +
    "\uff8f\074\uff8f\075\uff8f\076\uff8f\077\uff8f\100\uff8f\102\uff8f" +
    "\104\uff8f\106\uff8f\001\002\000\026\004\312\005\315\006" +
    "\303\007\305\010\314\012\310\013\313\016\306\064\311" +
    "\065\307\001\002\000\046\003\uff92\021\uff92\026\uff92\030" +
    "\uff92\031\uff92\067\uff92\070\uff92\071\uff92\072\uff92\073\uff92" +
    "\074\uff92\075\uff92\076\uff92\077\uff92\100\uff92\102\uff92\104" +
    "\uff92\106\uff92\001\002\000\046\003\uff75\021\uff75\026\uff75" +
    "\030\uff75\031\uff75\067\301\070\uff75\071\uff75\072\uff75\073" +
    "\uff75\074\uff75\075\uff75\076\uff75\077\uff75\100\uff75\102\uff75" +
    "\104\uff75\106\uff75\001\002\000\046\003\uff9b\021\uff9b\026" +
    "\uff9b\030\uff9b\031\uff9b\067\uff9b\070\uff9b\071\uff9b\072\uff9b" +
    "\073\uff9b\074\uff9b\075\uff9b\076\uff9b\077\uff9b\100\uff9b\102" +
    "\uff9b\104\uff9b\106\uff9b\001\002\000\004\014\276\001\002" +
    "\000\004\103\273\001\002\000\046\003\uff80\021\uff80\026" +
    "\uff80\030\uff80\031\uff80\067\uff80\070\uff80\071\uff80\072\uff80" +
    "\073\uff80\074\uff80\075\uff80\076\uff80\077\uff80\100\uff80\102" +
    "\uff80\104\uff80\106\uff80\001\002\000\040\011\207\015\222" +
    "\017\205\020\212\021\211\027\220\037\214\062\202\063" +
    "\215\064\206\066\216\067\204\070\223\101\210\103\200" +
    "\001\002\000\046\003\uff94\021\237\026\uff94\030\uff94\031" +
    "\uff94\067\uff94\070\uff94\071\227\072\235\073\233\074\234" +
    "\075\232\076\230\077\225\100\231\102\uff94\104\uff94\106" +
    "\uff94\001\002\000\042\011\uff73\015\uff73\017\uff73\020\uff73" +
    "\021\uff73\027\uff73\037\uff73\062\uff73\063\uff73\064\uff73\066" +
    "\uff73\067\uff73\070\uff73\077\271\101\uff73\103\uff73\001\002" +
    "\000\040\011\207\015\222\017\205\020\212\021\211\027" +
    "\220\037\214\062\202\063\215\064\206\066\216\067\204" +
    "\070\223\101\210\103\200\001\002\000\040\011\207\015" +
    "\222\017\205\020\212\021\211\027\220\037\214\062\202" +
    "\063\215\064\206\066\216\067\204\070\223\101\210\103" +
    "\200\001\002\000\042\011\uff82\015\uff82\017\uff82\020\uff82" +
    "\021\uff82\027\uff82\037\uff82\062\uff82\063\uff82\064\uff82\066" +
    "\uff82\067\uff82\070\uff82\073\260\101\uff82\103\uff82\001\002" +
    "\000\042\011\uff71\015\uff71\017\uff71\020\uff71\021\uff71\027" +
    "\uff71\037\uff71\062\uff71\063\uff71\064\uff71\066\uff71\067\uff71" +
    "\070\uff71\100\242\101\uff71\103\uff71\001\002\000\042\011" +
    "\uff82\015\uff82\017\uff82\020\uff82\021\uff82\027\uff82\037\uff82" +
    "\062\uff82\063\uff82\064\uff82\066\uff82\067\uff82\070\uff82\073" +
    "\260\101\uff82\103\uff82\001\002\000\050\011\uff86\015\uff86" +
    "\017\uff86\020\uff86\021\uff86\027\uff86\037\uff86\062\uff86\063" +
    "\uff86\064\uff86\066\uff86\067\254\070\250\071\247\072\255" +
    "\073\253\074\252\101\uff86\103\uff86\001\002\000\040\011" +
    "\207\015\222\017\205\020\212\021\211\027\220\037\214" +
    "\062\202\063\215\064\206\066\216\067\204\070\223\101" +
    "\210\103\200\001\002\000\040\011\207\015\222\017\205" +
    "\020\212\021\211\027\220\037\214\062\202\063\215\064" +
    "\206\066\216\067\204\070\223\101\210\103\200\001\002" +
    "\000\040\011\207\015\222\017\205\020\212\021\211\027" +
    "\220\037\214\062\202\063\215\064\206\066\216\067\204" +
    "\070\223\101\210\103\200\001\002\000\004\073\240\001" +
    "\002\000\042\011\uff71\015\uff71\017\uff71\020\uff71\021\uff71" +
    "\027\uff71\037\uff71\062\uff71\063\uff71\064\uff71\066\uff71\067" +
    "\uff71\070\uff71\100\242\101\uff71\103\uff71\001\002\000\040" +
    "\011\207\015\222\017\205\020\212\021\211\027\220\037" +
    "\214\062\202\063\215\064\206\066\216\067\204\070\223" +
    "\101\210\103\200\001\002\000\040\011\uff72\015\uff72\017" +
    "\uff72\020\uff72\021\uff72\027\uff72\037\uff72\062\uff72\063\uff72" +
    "\064\uff72\066\uff72\067\uff72\070\uff72\101\uff72\103\uff72\001" +
    "\002\000\046\003\uffa1\021\uffa1\026\uffa1\030\uffa1\031\uffa1" +
    "\067\uffa1\070\uffa1\071\uffa1\072\uffa1\073\uffa1\074\uffa1\075" +
    "\uffa1\076\uffa1\077\uffa1\100\uffa1\102\uffa1\104\uffa1\106\uffa1" +
    "\001\002\000\046\003\uff9f\021\237\026\uff9f\030\uff9f\031" +
    "\uff9f\067\uff9f\070\uff9f\071\227\072\235\073\233\074\234" +
    "\075\232\076\230\077\225\100\231\102\uff9f\104\uff9f\106" +
    "\uff9f\001\002\000\046\003\uff9e\021\237\026\uff9e\030\uff9e" +
    "\031\uff9e\067\uff9e\070\uff9e\071\uff9e\072\uff9e\073\233\074" +
    "\uff9e\075\232\076\230\077\225\100\231\102\uff9e\104\uff9e" +
    "\106\uff9e\001\002\000\046\003\uff9c\021\237\026\uff9c\030" +
    "\uff9c\031\uff9c\067\uff9c\070\uff9c\071\uff9c\072\uff9c\073\233" +
    "\074\uff9c\075\232\076\230\077\225\100\231\102\uff9c\104" +
    "\uff9c\106\uff9c\001\002\000\040\011\uff88\015\uff88\017\uff88" +
    "\020\uff88\021\uff88\027\uff88\037\uff88\062\uff88\063\uff88\064" +
    "\uff88\066\uff88\067\uff88\070\uff88\101\uff88\103\uff88\001\002" +
    "\000\040\011\uff8a\015\uff8a\017\uff8a\020\uff8a\021\uff8a\027" +
    "\uff8a\037\uff8a\062\uff8a\063\uff8a\064\uff8a\066\uff8a\067\uff8a" +
    "\070\uff8a\101\uff8a\103\uff8a\001\002\000\040\011\207\015" +
    "\222\017\205\020\212\021\211\027\220\037\214\062\202" +
    "\063\215\064\206\066\216\067\204\070\223\101\210\103" +
    "\200\001\002\000\040\011\uff87\015\uff87\017\uff87\020\uff87" +
    "\021\uff87\027\uff87\037\uff87\062\uff87\063\uff87\064\uff87\066" +
    "\uff87\067\uff87\070\uff87\101\uff87\103\uff87\001\002\000\040" +
    "\011\uff8c\015\uff8c\017\uff8c\020\uff8c\021\uff8c\027\uff8c\037" +
    "\uff8c\062\uff8c\063\uff8c\064\uff8c\066\uff8c\067\uff8c\070\uff8c" +
    "\101\uff8c\103\uff8c\001\002\000\040\011\uff8b\015\uff8b\017" +
    "\uff8b\020\uff8b\021\uff8b\027\uff8b\037\uff8b\062\uff8b\063\uff8b" +
    "\064\uff8b\066\uff8b\067\uff8b\070\uff8b\101\uff8b\103\uff8b\001" +
    "\002\000\040\011\uff89\015\uff89\017\uff89\020\uff89\021\uff89" +
    "\027\uff89\037\uff89\062\uff89\063\uff89\064\uff89\066\uff89\067" +
    "\uff89\070\uff89\101\uff89\103\uff89\001\002\000\046\003\uffa6" +
    "\021\uffa6\026\uffa6\030\uffa6\031\uffa6\067\uffa6\070\uffa6\071" +
    "\uffa6\072\uffa6\073\uffa6\074\uffa6\075\uffa6\076\uffa6\077\uffa6" +
    "\100\uffa6\102\uffa6\104\uffa6\106\uffa6\001\002\000\040\011" +
    "\207\015\222\017\205\020\212\021\211\027\220\037\214" +
    "\062\202\063\215\064\206\066\216\067\204\070\223\101" +
    "\210\103\200\001\002\000\040\011\uff83\015\uff83\017\uff83" +
    "\020\uff83\021\uff83\027\uff83\037\uff83\062\uff83\063\uff83\064" +
    "\uff83\066\uff83\067\uff83\070\uff83\101\uff83\103\uff83\001\002" +
    "\000\046\003\uffa4\021\uffa4\026\uffa4\030\uffa4\031\uffa4\067" +
    "\uffa4\070\uffa4\071\uffa4\072\uffa4\073\uffa4\074\uffa4\075\uffa4" +
    "\076\uffa4\077\uffa4\100\uffa4\102\uffa4\104\uffa4\106\uffa4\001" +
    "\002\000\040\011\207\015\222\017\205\020\212\021\211" +
    "\027\220\037\214\062\202\063\215\064\206\066\216\067" +
    "\204\070\223\101\210\103\200\001\002\000\046\003\uffa2" +
    "\021\uffa2\026\uffa2\030\uffa2\031\uffa2\067\uffa2\070\uffa2\071" +
    "\uffa2\072\uffa2\073\uffa2\074\uffa2\075\uffa2\076\uffa2\077\uffa2" +
    "\100\uffa2\102\uffa2\104\uffa2\106\uffa2\001\002\000\040\011" +
    "\207\015\222\017\205\020\212\021\211\027\220\037\214" +
    "\062\202\063\215\064\206\066\216\067\204\070\223\101" +
    "\210\103\200\001\002\000\046\003\uffa5\021\uffa5\026\uffa5" +
    "\030\uffa5\031\uffa5\067\uffa5\070\uffa5\071\uffa5\072\uffa5\073" +
    "\uffa5\074\uffa5\075\uffa5\076\uffa5\077\uffa5\100\uffa5\102\uffa5" +
    "\104\uffa5\106\uffa5\001\002\000\046\003\uff9d\021\237\026" +
    "\uff9d\030\uff9d\031\uff9d\067\uff9d\070\uff9d\071\uff9d\072\235" +
    "\073\233\074\234\075\232\076\230\077\225\100\231\102" +
    "\uff9d\104\uff9d\106\uff9d\001\002\000\046\003\uffa0\021\237" +
    "\026\uffa0\030\uffa0\031\uffa0\067\uffa0\070\uffa0\071\227\072" +
    "\235\073\233\074\234\075\232\076\230\077\225\100\231" +
    "\102\uffa0\104\uffa0\106\uffa0\001\002\000\040\011\207\015" +
    "\222\017\205\020\212\021\211\027\220\037\214\062\202" +
    "\063\215\064\206\066\216\067\204\070\223\101\210\103" +
    "\200\001\002\000\040\011\uff74\015\uff74\017\uff74\020\uff74" +
    "\021\uff74\027\uff74\037\uff74\062\uff74\063\uff74\064\uff74\066" +
    "\uff74\067\uff74\070\uff74\101\uff74\103\uff74\001\002\000\046" +
    "\003\uffa3\021\237\026\uffa3\030\uffa3\031\uffa3\067\uffa3\070" +
    "\uffa3\071\uffa3\072\uffa3\073\233\074\uffa3\075\232\076\230" +
    "\077\uffa3\100\231\102\uffa3\104\uffa3\106\uffa3\001\002\000" +
    "\054\004\064\005\077\006\061\007\055\010\072\012\106" +
    "\013\063\016\067\033\147\036\162\043\163\044\140\045" +
    "\150\046\144\050\143\053\152\054\141\060\154\064\145" +
    "\065\070\104\uff4b\001\002\000\004\104\275\001\002\000" +
    "\054\004\uff16\005\uff16\006\uff16\007\uff16\010\uff16\012\uff16" +
    "\013\uff16\016\uff16\033\uff16\036\uff16\043\uff16\044\uff16\045" +
    "\uff16\046\uff16\050\uff16\053\uff16\054\uff16\060\uff16\064\uff16" +
    "\065\uff16\104\uff16\001\002\000\004\027\277\001\002\000" +
    "\046\003\uff81\021\uff81\026\uff81\030\uff81\031\uff81\067\uff81" +
    "\070\uff81\071\uff81\072\uff81\073\uff81\074\uff81\075\uff81\076" +
    "\uff81\077\uff81\100\uff81\102\uff81\104\uff81\106\uff81\001\002" +
    "\000\046\003\uff90\021\uff90\026\uff90\030\uff90\031\uff90\067" +
    "\uff90\070\uff90\071\uff90\072\uff90\073\uff90\074\uff90\075\uff90" +
    "\076\uff90\077\uff90\100\uff90\102\uff90\104\uff90\106\uff90\001" +
    "\002\000\040\011\207\015\222\017\205\020\212\021\211" +
    "\027\220\037\214\062\202\063\215\064\206\066\216\067" +
    "\204\070\223\101\210\103\200\001\002\000\046\003\uff76" +
    "\021\237\026\uff76\030\uff76\031\uff76\067\uff76\070\uff76\071" +
    "\227\072\235\073\233\074\234\075\232\076\230\077\225" +
    "\100\231\102\uff76\104\uff76\106\uff76\001\002\000\006\101" +
    "\uffc2\105\uffc2\001\002\000\006\101\317\105\316\001\002" +
    "\000\006\101\uffc1\105\uffc1\001\002\000\006\101\uffc6\105" +
    "\uffc6\001\002\000\006\101\uffc5\105\uffc5\001\002\000\006" +
    "\101\uffc8\105\uffc8\001\002\000\006\101\uffca\105\uffca\001" +
    "\002\000\006\101\uffc4\105\uffc4\001\002\000\006\101\uffc7" +
    "\105\uffc7\001\002\000\006\101\uffc9\105\uffc9\001\002\000" +
    "\006\101\uffc3\105\uffc3\001\002\000\040\011\207\015\222" +
    "\017\205\020\212\021\211\027\220\037\214\062\202\063" +
    "\215\064\206\066\216\067\204\070\223\101\210\103\200" +
    "\001\002\000\042\011\207\015\222\017\205\020\212\021" +
    "\211\027\220\037\214\062\202\063\215\064\206\066\216" +
    "\067\204\070\223\101\210\102\324\103\200\001\002\000" +
    "\046\003\uff98\021\uff98\026\uff98\030\uff98\031\uff98\067\uff98" +
    "\070\uff98\071\uff98\072\uff98\073\uff98\074\uff98\075\uff98\076" +
    "\uff98\077\uff98\100\uff98\102\uff98\104\uff98\106\uff98\001\002" +
    "\000\004\102\330\001\002\000\034\021\237\031\325\067" +
    "\226\070\236\071\227\072\235\073\233\074\234\075\232" +
    "\076\230\077\225\100\231\102\uff7b\001\002\000\046\003" +
    "\uff8e\021\uff8e\026\uff8e\030\uff8e\031\uff8e\067\uff8e\070\uff8e" +
    "\071\uff8e\072\uff8e\073\uff8e\074\uff8e\075\uff8e\076\uff8e\077" +
    "\uff8e\100\uff8e\102\uff8e\104\uff8e\106\uff8e\001\002\000\046" +
    "\003\uff7e\021\uff7e\026\uff7e\030\uff7e\031\uff7e\067\uff7e\070" +
    "\uff7e\071\uff7e\072\uff7e\073\uff7e\074\uff7e\075\uff7e\076\uff7e" +
    "\077\uff7e\100\uff7e\102\uff7e\104\uff7e\106\uff7e\001\002\000" +
    "\040\011\207\015\222\017\205\020\212\021\211\027\220" +
    "\037\214\062\202\063\215\064\206\066\216\067\204\070" +
    "\223\101\210\103\200\001\002\000\004\102\uff7d\001\002" +
    "\000\004\102\uff7c\001\002\000\046\003\uff7f\021\uff7f\026" +
    "\uff7f\030\uff7f\031\uff7f\067\uff7f\070\uff7f\071\uff7f\072\uff7f" +
    "\073\uff7f\074\uff7f\075\uff7f\076\uff7f\077\uff7f\100\uff7f\102" +
    "\uff7f\104\uff7f\106\uff7f\001\002\000\032\021\237\067\226" +
    "\070\236\071\227\072\235\073\233\074\234\075\232\076" +
    "\230\077\225\100\231\106\332\001\002\000\046\003\uff8d" +
    "\021\uff8d\026\uff8d\030\uff8d\031\uff8d\067\uff8d\070\uff8d\071" +
    "\uff8d\072\uff8d\073\uff8d\074\uff8d\075\uff8d\076\uff8d\077\uff8d" +
    "\100\uff8d\102\uff8d\104\uff8d\106\uff8d\001\002\000\046\003" +
    "\uff95\021\uff95\026\uff95\030\uff95\031\uff95\067\uff95\070\uff95" +
    "\071\uff95\072\uff95\073\uff95\074\uff95\075\uff95\076\uff95\077" +
    "\uff95\100\uff95\102\uff95\104\uff95\106\uff95\001\002\000\032" +
    "\021\237\067\226\070\236\071\227\072\235\073\233\074" +
    "\234\075\232\076\230\077\225\100\231\102\335\001\002" +
    "\000\050\003\uff85\021\uff85\022\337\026\uff85\030\uff85\031" +
    "\uff85\067\uff85\070\uff85\071\uff85\072\uff85\073\uff85\074\uff85" +
    "\075\uff85\076\uff85\077\uff85\100\uff85\102\uff85\104\uff85\106" +
    "\uff85\001\002\000\046\003\uffa7\021\uffa7\026\uffa7\030\uffa7" +
    "\031\uffa7\067\uffa7\070\uffa7\071\uffa7\072\uffa7\073\uffa7\074" +
    "\uffa7\075\uffa7\076\uffa7\077\uffa7\100\uffa7\102\uffa7\104\uffa7" +
    "\106\uffa7\001\002\000\040\011\207\015\222\017\205\020" +
    "\212\021\211\027\220\037\214\062\202\063\215\064\206" +
    "\066\216\067\204\070\223\101\210\103\200\001\002\000" +
    "\032\021\237\030\341\067\226\070\236\071\227\072\235" +
    "\073\233\074\234\075\232\076\230\077\225\100\231\001" +
    "\002\000\040\011\207\015\222\017\205\020\212\021\211" +
    "\027\220\037\214\062\202\063\215\064\206\066\216\067" +
    "\204\070\223\101\210\103\200\001\002\000\046\003\uff84" +
    "\021\237\026\uff84\030\uff84\031\uff84\067\226\070\236\071" +
    "\227\072\235\073\233\074\234\075\232\076\230\077\225" +
    "\100\231\102\uff84\104\uff84\106\uff84\001\002\000\022\062" +
    "\uff67\063\uff67\064\uff67\066\uff67\067\362\070\357\071\356" +
    "\072\363\001\002\000\042\011\207\015\222\017\205\020" +
    "\212\021\211\027\220\037\214\062\202\063\215\064\206" +
    "\066\216\067\204\070\223\101\210\102\354\103\200\001" +
    "\002\000\004\064\350\001\002\000\046\003\uff60\021\uff60" +
    "\026\uff60\030\uff60\031\uff60\067\uff60\070\uff60\071\uff60\072" +
    "\uff60\073\uff60\074\uff60\075\uff60\076\uff60\077\uff60\100\uff60" +
    "\102\uff60\104\uff60\106\uff60\001\002\000\046\003\uff5f\021" +
    "\uff5f\026\uff5f\030\uff5f\031\uff5f\067\uff5f\070\uff5f\071\uff5f" +
    "\072\uff5f\073\uff5f\074\uff5f\075\uff5f\076\uff5f\077\uff5f\100" +
    "\uff5f\102\uff5f\104\uff5f\106\uff5f\001\002\000\054\003\uff5b" +
    "\021\uff5b\025\345\026\uff5b\030\uff5b\031\uff5b\067\uff5b\070" +
    "\uff5b\071\uff5b\072\uff5b\073\uff5b\074\uff5b\075\uff5b\076\uff5b" +
    "\077\uff5b\100\uff5b\101\344\102\uff5b\104\uff5b\105\343\106" +
    "\uff5b\001\002\000\046\003\uff59\021\uff59\026\uff59\030\uff59" +
    "\031\uff59\067\uff59\070\uff59\071\uff59\072\uff59\073\uff59\074" +
    "\uff59\075\uff59\076\uff59\077\uff59\100\uff59\102\uff59\104\uff59" +
    "\106\uff59\001\002\000\046\003\uff5a\021\uff5a\026\uff5a\030" +
    "\uff5a\031\uff5a\067\uff5a\070\uff5a\071\uff5a\072\uff5a\073\uff5a" +
    "\074\uff5a\075\uff5a\076\uff5a\077\uff5a\100\uff5a\102\uff5a\104" +
    "\uff5a\106\uff5a\001\002\000\004\102\355\001\002\000\046" +
    "\003\uff5c\021\uff5c\026\uff5c\030\uff5c\031\uff5c\067\uff5c\070" +
    "\uff5c\071\uff5c\072\uff5c\073\uff5c\074\uff5c\075\uff5c\076\uff5c" +
    "\077\uff5c\100\uff5c\102\uff5c\104\uff5c\106\uff5c\001\002\000" +
    "\046\003\uff5d\021\uff5d\026\uff5d\030\uff5d\031\uff5d\067\uff5d" +
    "\070\uff5d\071\uff5d\072\uff5d\073\uff5d\074\uff5d\075\uff5d\076" +
    "\uff5d\077\uff5d\100\uff5d\102\uff5d\104\uff5d\106\uff5d\001\002" +
    "\000\020\062\uff68\063\uff68\064\uff68\066\uff68\067\uff68\070" +
    "\uff68\106\uff68\001\002\000\020\062\uff6a\063\uff6a\064\uff6a" +
    "\066\uff6a\067\uff6a\070\uff6a\106\uff6a\001\002\000\004\106" +
    "\uff6e\001\002\000\004\106\u0100\001\002\000\020\062\uff6b" +
    "\063\uff6b\064\uff6b\066\uff6b\067\uff6b\070\uff6b\106\uff6b\001" +
    "\002\000\020\062\uff69\063\uff69\064\uff69\066\uff69\067\uff69" +
    "\070\uff69\106\uff69\001\002\000\016\062\372\063\373\064" +
    "\206\066\366\067\370\070\365\001\002\000\014\067\uff6d" +
    "\070\uff6d\071\uff6d\072\uff6d\106\uff6d\001\002\000\014\067" +
    "\301\070\uff75\071\uff75\072\uff75\106\uff75\001\002\000\014" +
    "\067\362\070\357\071\356\072\363\106\uff67\001\002\000" +
    "\014\067\uff6d\070\uff6d\071\uff6d\072\uff6d\106\uff6d\001\002" +
    "\000\014\067\uff61\070\uff61\071\uff61\072\uff61\106\uff61\001" +
    "\002\000\014\067\uff63\070\uff63\071\uff63\072\uff63\106\uff63" +
    "\001\002\000\014\067\uff64\070\uff64\071\uff64\072\uff64\106" +
    "\uff64\001\002\000\014\067\uff65\070\uff65\071\uff65\072\uff65" +
    "\106\uff65\001\002\000\004\106\uff6c\001\002\000\014\067" +
    "\uff62\070\uff62\071\uff62\072\uff62\106\uff62\001\002\000\014" +
    "\067\uff66\070\uff66\071\uff66\072\uff66\106\uff66\001\002\000" +
    "\054\003\uff5b\021\uff5b\025\345\026\uff5b\030\uff5b\031\uff5b" +
    "\067\uff5b\070\uff5b\071\uff5b\072\uff5b\073\uff5b\074\uff5b\075" +
    "\uff5b\076\uff5b\077\uff5b\100\uff5b\101\344\102\uff5b\104\uff5b" +
    "\105\343\106\uff5b\001\002\000\046\003\uff5e\021\uff5e\026" +
    "\uff5e\030\uff5e\031\uff5e\067\uff5e\070\uff5e\071\uff5e\072\uff5e" +
    "\073\uff5e\074\uff5e\075\uff5e\076\uff5e\077\uff5e\100\uff5e\102" +
    "\uff5e\104\uff5e\106\uff5e\001\002\000\046\003\uff93\021\237" +
    "\026\uff93\030\uff93\031\uff93\067\uff93\070\uff93\071\227\072" +
    "\235\073\233\074\234\075\232\076\230\077\225\100\231" +
    "\102\uff93\104\uff93\106\uff93\001\002\000\010\033\147\036" +
    "\162\064\145\001\002\000\004\102\u0105\001\002\000\004" +
    "\103\u0106\001\002\000\054\004\064\005\077\006\061\007" +
    "\055\010\072\012\106\013\063\016\067\033\147\036\162" +
    "\043\163\044\140\045\150\046\144\050\143\053\152\054" +
    "\141\060\154\064\145\065\070\104\uff4b\001\002\000\004" +
    "\104\u0108\001\002\000\054\004\uff15\005\uff15\006\uff15\007" +
    "\uff15\010\uff15\012\uff15\013\uff15\016\uff15\033\uff15\036\uff15" +
    "\043\uff15\044\uff15\045\uff15\046\uff15\050\uff15\053\uff15\054" +
    "\uff15\060\uff15\064\uff15\065\uff15\104\uff15\001\002\000\034" +
    "\021\237\031\u010c\067\226\070\236\071\227\072\235\073" +
    "\233\074\234\075\232\076\230\077\225\100\231\104\uff77" +
    "\001\002\000\046\003\uff99\021\uff99\026\uff99\030\uff99\031" +
    "\uff99\067\uff99\070\uff99\071\uff99\072\uff99\073\uff99\074\uff99" +
    "\075\uff99\076\uff99\077\uff99\100\uff99\102\uff99\104\uff99\106" +
    "\uff99\001\002\000\046\003\uff79\021\uff79\026\uff79\030\uff79" +
    "\031\uff79\067\uff79\070\uff79\071\uff79\072\uff79\073\uff79\074" +
    "\uff79\075\uff79\076\uff79\077\uff79\100\uff79\102\uff79\104\uff79" +
    "\106\uff79\001\002\000\040\011\207\015\222\017\205\020" +
    "\212\021\211\027\220\037\214\062\202\063\215\064\206" +
    "\066\216\067\204\070\223\101\210\103\200\001\002\000" +
    "\004\104\u010e\001\002\000\046\003\uff7a\021\uff7a\026\uff7a" +
    "\030\uff7a\031\uff7a\067\uff7a\070\uff7a\071\uff7a\072\uff7a\073" +
    "\uff7a\074\uff7a\075\uff7a\076\uff7a\077\uff7a\100\uff7a\102\uff7a" +
    "\104\uff7a\106\uff7a\001\002\000\034\021\237\031\u010c\067" +
    "\226\070\236\071\227\072\235\073\233\074\234\075\232" +
    "\076\230\077\225\100\231\104\uff77\001\002\000\004\104" +
    "\uff78\001\002\000\012\003\075\026\100\030\u0116\073\060" +
    "\001\002\000\004\106\u0114\001\002\000\042\011\uff13\015" +
    "\uff13\017\uff13\020\uff13\021\uff13\027\uff13\037\uff13\062\uff13" +
    "\063\uff13\064\uff13\066\uff13\067\uff13\070\uff13\101\uff13\102" +
    "\uff13\103\uff13\001\002\000\006\064\u0111\105\u0112\001\002" +
    "\000\042\011\uff0b\015\uff0b\017\uff0b\020\uff0b\021\uff0b\027" +
    "\uff0b\037\uff0b\062\uff0b\063\uff0b\064\uff0b\066\uff0b\067\uff0b" +
    "\070\uff0b\101\uff0b\102\uff0b\103\uff0b\001\002\000\004\064" +
    "\u0119\001\002\000\042\011\uff0c\015\uff0c\017\uff0c\020\uff0c" +
    "\021\uff0c\027\uff0c\037\uff0c\062\uff0c\063\uff0c\064\uff0c\066" +
    "\uff0c\067\uff0c\070\uff0c\101\uff0c\102\uff0c\103\uff0c\001\002" +
    "\000\042\011\uff09\015\uff09\017\uff09\020\uff09\021\uff09\027" +
    "\uff09\037\uff09\062\uff09\063\uff09\064\uff09\066\uff09\067\uff09" +
    "\070\uff09\101\uff09\102\uff09\103\uff09\001\002\000\042\011" +
    "\uff0a\015\uff0a\017\uff0a\020\uff0a\021\uff0a\027\uff0a\037\uff0a" +
    "\062\uff0a\063\uff0a\064\uff0a\066\uff0a\067\uff0a\070\uff0a\101" +
    "\uff0a\102\uff0a\103\uff0a\001\002\000\042\011\uff14\015\uff14" +
    "\017\uff14\020\uff14\021\uff14\027\uff14\037\uff14\062\uff14\063" +
    "\uff14\064\uff14\066\uff14\067\uff14\070\uff14\101\uff14\102\uff14" +
    "\103\uff14\001\002\000\004\064\u0124\001\002\000\004\101" +
    "\u011d\001\002\000\040\011\207\015\222\017\205\020\212" +
    "\021\211\027\220\037\214\062\202\063\215\064\206\066" +
    "\216\067\204\070\223\101\210\103\200\001\002\000\034" +
    "\021\237\031\u011f\067\226\070\236\071\227\072\235\073" +
    "\233\074\234\075\232\076\230\077\225\100\231\102\uff2f" +
    "\001\002\000\040\011\207\015\222\017\205\020\212\021" +
    "\211\027\220\037\214\062\202\063\215\064\206\066\216" +
    "\067\204\070\223\101\210\103\200\001\002\000\004\102" +
    "\u0121\001\002\000\012\003\uff33\026\uff33\073\uff33\102\uff33" +
    "\001\002\000\034\021\237\031\u011f\067\226\070\236\071" +
    "\227\072\235\073\233\074\234\075\232\076\230\077\225" +
    "\100\231\102\uff2f\001\002\000\004\102\uff30\001\002\000" +
    "\006\025\u011b\101\uff31\001\002\000\004\101\uff32\001\002" +
    "\000\054\004\uff47\005\uff47\006\uff47\007\uff47\010\uff47\012" +
    "\uff47\013\uff47\016\uff47\033\uff47\036\uff47\043\uff47\044\uff47" +
    "\045\uff47\046\uff47\050\uff47\053\uff47\054\uff47\060\uff47\064" +
    "\uff47\065\uff47\104\uff47\001\002\000\054\003\uff54\004\uff54" +
    "\005\uff54\006\uff54\007\uff54\010\uff54\012\uff54\013\uff54\016" +
    "\uff54\026\uff54\040\uff54\055\uff54\056\uff54\057\uff54\060\uff54" +
    "\061\uff54\064\uff54\065\uff54\073\uff54\101\uff54\104\uff54\001" +
    "\002\000\010\003\uff46\026\uff46\073\uff46\001\002\000\004" +
    "\104\uff4c\001\002\000\066\003\uff23\004\uff23\005\uff23\006" +
    "\uff23\007\uff23\010\uff23\012\uff23\013\uff23\016\uff23\026\uff23" +
    "\033\uff23\036\uff23\043\uff23\044\uff23\045\uff23\046\uff23\050" +
    "\uff23\051\uff23\052\uff23\053\uff23\054\uff23\060\uff23\064\uff23" +
    "\065\uff23\073\uff23\104\uff23\001\002\000\054\004\064\005" +
    "\077\006\061\007\055\010\072\012\106\013\063\016\067" +
    "\033\147\036\162\043\163\044\140\045\150\046\144\050" +
    "\143\053\152\054\141\060\154\064\145\065\070\104\uff4b" +
    "\001\002\000\004\104\u012d\001\002\000\004\044\u012e\001" +
    "\002\000\004\101\u012f\001\002\000\040\011\207\015\222" +
    "\017\205\020\212\021\211\027\220\037\214\062\202\063" +
    "\215\064\206\066\216\067\204\070\223\101\210\103\200" +
    "\001\002\000\032\021\237\067\226\070\236\071\227\072" +
    "\235\073\233\074\234\075\232\076\230\077\225\100\231" +
    "\102\u0131\001\002\000\006\003\075\026\100\001\002\000" +
    "\054\004\uff21\005\uff21\006\uff21\007\uff21\010\uff21\012\uff21" +
    "\013\uff21\016\uff21\033\uff21\036\uff21\043\uff21\044\uff21\045" +
    "\uff21\046\uff21\050\uff21\053\uff21\054\uff21\060\uff21\064\uff21" +
    "\065\uff21\104\uff21\001\002\000\012\003\uff3b\026\uff3b\073" +
    "\uff3b\102\uff3b\001\002\000\004\064\u0136\001\002\000\012" +
    "\003\uff34\026\uff34\073\uff34\102\uff34\001\002\000\020\003" +
    "\uff3a\025\u0134\026\uff3a\064\u0133\073\uff3a\101\u0137\102\uff3a" +
    "\001\002\000\042\011\207\015\222\017\205\020\212\021" +
    "\211\027\220\037\214\062\202\063\215\064\206\066\216" +
    "\067\204\070\223\101\210\102\u013c\103\200\001\002\000" +
    "\012\003\uff3c\026\uff3c\073\uff3c\102\uff3c\001\002\000\012" +
    "\003\uff38\026\uff38\073\uff38\102\uff38\001\002\000\034\021" +
    "\237\031\u011f\067\226\070\236\071\227\072\235\073\233" +
    "\074\234\075\232\076\230\077\225\100\231\102\uff2f\001" +
    "\002\000\012\003\uff39\026\uff39\073\uff39\102\uff39\001\002" +
    "\000\012\003\uff36\026\uff36\073\uff36\102\uff36\001\002\000" +
    "\004\102\u013e\001\002\000\012\003\uff37\026\uff37\073\uff37" +
    "\102\uff37\001\002\000\006\067\u0152\073\u0151\001\002\000" +
    "\022\062\uff67\063\uff67\064\uff67\066\uff67\067\362\070\357" +
    "\071\356\072\363\001\002\000\040\011\207\015\222\017" +
    "\205\020\212\021\211\027\220\037\214\062\202\063\215" +
    "\064\206\066\216\067\204\070\223\101\210\103\200\001" +
    "\002\000\006\070\u0148\073\u0149\001\002\000\012\003\uff2c" +
    "\026\uff2c\073\uff2c\102\uff2c\001\002\000\040\011\207\015" +
    "\222\017\205\020\212\021\211\027\220\037\214\062\202" +
    "\063\215\064\206\066\216\067\204\070\223\101\210\103" +
    "\200\001\002\000\012\003\uff35\026\uff35\073\uff35\102\uff35" +
    "\001\002\000\032\021\237\067\226\070\236\071\227\072" +
    "\235\073\233\074\234\075\232\076\230\077\225\100\231" +
    "\102\u0147\001\002\000\012\003\uff29\026\uff29\073\uff29\102" +
    "\uff29\001\002\000\012\003\uff27\026\uff27\073\uff27\102\uff27" +
    "\001\002\000\040\011\207\015\222\017\205\020\212\021" +
    "\211\027\220\037\214\062\202\063\215\064\206\066\216" +
    "\067\204\070\223\101\210\103\200\001\002\000\012\003" +
    "\uff2d\026\uff2d\073\uff2d\102\uff2d\001\002\000\036\003\uff28" +
    "\021\237\026\uff28\067\226\070\236\071\227\072\235\073" +
    "\uff28\074\234\075\232\076\230\077\225\100\231\102\uff28" +
    "\001\002\000\036\003\uff2b\021\237\026\uff2b\067\226\070" +
    "\236\071\227\072\235\073\uff2b\074\234\075\232\076\230" +
    "\077\225\100\231\102\uff2b\001\002\000\004\106\u014e\001" +
    "\002\000\016\003\uff3a\025\u0134\026\uff3a\064\u0133\073\uff3a" +
    "\102\uff3a\001\002\000\012\003\uff2a\026\uff2a\073\uff2a\102" +
    "\uff2a\001\002\000\012\003\uff2e\026\uff2e\073\uff2e\102\uff2e" +
    "\001\002\000\040\011\207\015\222\017\205\020\212\021" +
    "\211\027\220\037\214\062\202\063\215\064\206\066\216" +
    "\067\204\070\223\101\210\103\200\001\002\000\012\003" +
    "\uff25\026\uff25\073\uff25\102\uff25\001\002\000\036\003\uff26" +
    "\021\237\026\uff26\067\226\070\236\071\227\072\235\073" +
    "\uff26\074\234\075\232\076\230\077\225\100\231\102\uff26" +
    "\001\002\000\040\011\207\015\222\017\205\020\212\021" +
    "\211\027\220\037\214\062\202\063\215\064\206\066\216" +
    "\067\204\070\223\101\210\103\200\001\002\000\032\021" +
    "\237\067\226\070\236\071\227\072\235\073\233\074\234" +
    "\075\232\076\230\077\225\100\231\102\u0156\001\002\000" +
    "\004\103\u0157\001\002\000\054\004\064\005\077\006\061" +
    "\007\055\010\072\012\106\013\063\016\067\033\147\036" +
    "\162\043\163\044\140\045\150\046\144\050\143\053\152" +
    "\054\141\060\154\064\145\065\070\104\uff4b\001\002\000" +
    "\004\104\u0159\001\002\000\056\004\uff07\005\uff07\006\uff07" +
    "\007\uff07\010\uff07\012\uff07\013\uff07\016\uff07\033\uff07\036" +
    "\uff07\043\uff07\044\uff07\045\uff07\046\uff07\047\u015a\050\uff07" +
    "\053\uff07\054\uff07\060\uff07\064\uff07\065\uff07\104\uff07\001" +
    "\002\000\006\046\u015e\103\u015c\001\002\000\054\004\uff20" +
    "\005\uff20\006\uff20\007\uff20\010\uff20\012\uff20\013\uff20\016" +
    "\uff20\033\uff20\036\uff20\043\uff20\044\uff20\045\uff20\046\uff20" +
    "\050\uff20\053\uff20\054\uff20\060\uff20\064\uff20\065\uff20\104" +
    "\uff20\001\002\000\054\004\064\005\077\006\061\007\055" +
    "\010\072\012\106\013\063\016\067\033\147\036\162\043" +
    "\163\044\140\045\150\046\144\050\143\053\152\054\141" +
    "\060\154\064\145\065\070\104\uff4b\001\002\000\054\004" +
    "\uff08\005\uff08\006\uff08\007\uff08\010\uff08\012\uff08\013\uff08" +
    "\016\uff08\033\uff08\036\uff08\043\uff08\044\uff08\045\uff08\046" +
    "\uff08\050\uff08\053\uff08\054\uff08\060\uff08\064\uff08\065\uff08" +
    "\104\uff08\001\002\000\004\101\u015f\001\002\000\040\011" +
    "\207\015\222\017\205\020\212\021\211\027\220\037\214" +
    "\062\202\063\215\064\206\066\216\067\204\070\223\101" +
    "\210\103\200\001\002\000\032\021\237\067\226\070\236" +
    "\071\227\072\235\073\233\074\234\075\232\076\230\077" +
    "\225\100\231\102\u0161\001\002\000\004\103\u0162\001\002" +
    "\000\054\004\064\005\077\006\061\007\055\010\072\012" +
    "\106\013\063\016\067\033\147\036\162\043\163\044\140" +
    "\045\150\046\144\050\143\053\152\054\141\060\154\064" +
    "\145\065\070\104\uff4b\001\002\000\004\104\u0164\001\002" +
    "\000\056\004\uff07\005\uff07\006\uff07\007\uff07\010\uff07\012" +
    "\uff07\013\uff07\016\uff07\033\uff07\036\uff07\043\uff07\044\uff07" +
    "\045\uff07\046\uff07\047\u015a\050\uff07\053\uff07\054\uff07\060" +
    "\uff07\064\uff07\065\uff07\104\uff07\001\002\000\054\004\uff05" +
    "\005\uff05\006\uff05\007\uff05\010\uff05\012\uff05\013\uff05\016" +
    "\uff05\033\uff05\036\uff05\043\uff05\044\uff05\045\uff05\046\uff05" +
    "\050\uff05\053\uff05\054\uff05\060\uff05\064\uff05\065\uff05\104" +
    "\uff05\001\002\000\004\104\u0167\001\002\000\054\004\uff06" +
    "\005\uff06\006\uff06\007\uff06\010\uff06\012\uff06\013\uff06\016" +
    "\uff06\033\uff06\036\uff06\043\uff06\044\uff06\045\uff06\046\uff06" +
    "\050\uff06\053\uff06\054\uff06\060\uff06\064\uff06\065\uff06\104" +
    "\uff06\001\002\000\040\011\207\015\222\017\205\020\212" +
    "\021\211\027\220\037\214\062\202\063\215\064\206\066" +
    "\216\067\204\070\223\101\210\103\200\001\002\000\032" +
    "\021\237\067\226\070\236\071\227\072\235\073\233\074" +
    "\234\075\232\076\230\077\225\100\231\102\u016a\001\002" +
    "\000\004\103\u016b\001\002\000\010\051\u016e\052\u016c\104" +
    "\uff1b\001\002\000\004\030\u0179\001\002\000\004\104\u0178" +
    "\001\002\000\040\011\207\015\222\017\205\020\212\021" +
    "\211\027\220\037\214\062\202\063\215\064\206\066\216" +
    "\067\204\070\223\101\210\103\200\001\002\000\032\021" +
    "\237\030\u0170\067\226\070\236\071\227\072\235\073\233" +
    "\074\234\075\232\076\230\077\225\100\231\001\002\000" +
    "\052\004\064\005\077\006\061\007\055\010\072\012\106" +
    "\013\063\016\067\033\147\036\162\043\163\044\140\045" +
    "\150\046\144\050\143\053\152\054\141\060\154\064\145" +
    "\065\070\001\002\000\016\003\uff43\026\uff43\051\uff19\052" +
    "\uff19\073\uff43\104\uff19\001\002\000\052\004\064\005\077" +
    "\006\061\007\055\010\072\012\106\013\063\016\067\033" +
    "\147\036\162\043\163\044\140\045\150\046\144\050\143" +
    "\053\152\054\141\060\154\064\145\065\070\001\002\000" +
    "\010\051\u016e\052\u016c\104\uff1b\001\002\000\052\004\uff17" +
    "\005\uff17\006\uff17\007\uff17\010\uff17\012\uff17\013\uff17\016" +
    "\uff17\033\uff17\036\uff17\043\uff17\044\uff17\045\uff17\046\uff17" +
    "\050\uff17\053\uff17\054\uff17\060\uff17\064\uff17\065\uff17\001" +
    "\002\000\052\004\uff18\005\uff18\006\uff18\007\uff18\010\uff18" +
    "\012\uff18\013\uff18\016\uff18\033\uff18\036\uff18\043\uff18\044" +
    "\uff18\045\uff18\046\uff18\050\uff18\053\uff18\054\uff18\060\uff18" +
    "\064\uff18\065\uff18\001\002\000\004\104\uff1d\001\002\000" +
    "\010\051\uff1a\052\uff1a\104\uff1a\001\002\000\054\004\uff1f" +
    "\005\uff1f\006\uff1f\007\uff1f\010\uff1f\012\uff1f\013\uff1f\016" +
    "\uff1f\033\uff1f\036\uff1f\043\uff1f\044\uff1f\045\uff1f\046\uff1f" +
    "\050\uff1f\053\uff1f\054\uff1f\060\uff1f\064\uff1f\065\uff1f\104" +
    "\uff1f\001\002\000\052\004\064\005\077\006\061\007\055" +
    "\010\072\012\106\013\063\016\067\033\147\036\162\043" +
    "\163\044\140\045\150\046\144\050\143\053\152\054\141" +
    "\060\154\064\145\065\070\001\002\000\004\104\uff1c\001" +
    "\002\000\034\003\075\021\237\026\100\067\226\070\236" +
    "\071\227\072\235\073\233\074\234\075\232\076\230\077" +
    "\225\100\231\001\002\000\066\003\uff24\004\uff24\005\uff24" +
    "\006\uff24\007\uff24\010\uff24\012\uff24\013\uff24\016\uff24\026" +
    "\uff24\033\uff24\036\uff24\043\uff24\044\uff24\045\uff24\046\uff24" +
    "\050\uff24\051\uff24\052\uff24\053\uff24\054\uff24\060\uff24\064" +
    "\uff24\065\uff24\073\uff24\104\uff24\001\002\000\040\011\207" +
    "\015\222\017\205\020\212\021\211\027\220\037\214\062" +
    "\202\063\215\064\206\066\216\067\204\070\223\101\210" +
    "\103\200\001\002\000\032\021\237\067\226\070\236\071" +
    "\227\072\235\073\233\074\234\075\232\076\230\077\225" +
    "\100\231\102\u017f\001\002\000\004\103\u0180\001\002\000" +
    "\054\004\064\005\077\006\061\007\055\010\072\012\106" +
    "\013\063\016\067\033\147\036\162\043\163\044\140\045" +
    "\150\046\144\050\143\053\152\054\141\060\154\064\145" +
    "\065\070\104\uff4b\001\002\000\004\104\u0182\001\002\000" +
    "\054\004\uff22\005\uff22\006\uff22\007\uff22\010\uff22\012\uff22" +
    "\013\uff22\016\uff22\033\uff22\036\uff22\043\uff22\044\uff22\045" +
    "\uff22\046\uff22\050\uff22\053\uff22\054\uff22\060\uff22\064\uff22" +
    "\065\uff22\104\uff22\001\002\000\054\003\uffd8\004\uffd8\005" +
    "\uffd8\006\uffd8\007\uffd8\010\uffd8\012\uffd8\013\uffd8\016\uffd8" +
    "\026\uffd8\040\uffd8\055\015\056\011\057\013\060\021\061" +
    "\012\064\uffd8\065\uffd8\073\uffd8\101\uffd8\104\uffdc\001\002" +
    "\000\004\104\uffd4\001\002\000\006\064\112\105\110\001" +
    "\002\000\022\003\uffb1\026\uffb1\031\uffb1\040\uffb1\064\uffb1" +
    "\073\uffb1\101\uffb1\102\uffb1\001\002\000\004\104\uffd7\001" +
    "\002\000\004\101\uff53\001\002\000\004\101\u018a\001\002" +
    "\000\030\004\064\005\077\006\061\007\055\010\072\012" +
    "\106\013\063\016\067\064\123\065\070\102\uff4f\001\002" +
    "\000\004\102\u018c\001\002\000\004\103\u018d\001\002\000" +
    "\054\004\064\005\077\006\061\007\055\010\072\012\106" +
    "\013\063\016\067\033\147\036\162\043\163\044\140\045" +
    "\150\046\144\050\143\053\152\054\141\060\154\064\145" +
    "\065\070\104\uff4b\001\002\000\004\104\u018f\001\002\000" +
    "\054\003\uff52\004\uff52\005\uff52\006\uff52\007\uff52\010\uff52" +
    "\012\uff52\013\uff52\016\uff52\026\uff52\040\uff52\055\uff52\056" +
    "\uff52\057\uff52\060\uff52\061\uff52\064\uff52\065\uff52\073\uff52" +
    "\101\uff52\104\uff52\001\002\000\006\064\112\105\110\001" +
    "\002\000\022\003\uffbf\026\uffbf\031\uffbf\040\uffbf\064\uffbf" +
    "\073\uffbf\101\uffbf\102\uffbf\001\002\000\006\064\112\105" +
    "\110\001\002\000\022\003\uffb7\026\uffb7\031\uffb7\040\uffb7" +
    "\064\uffb7\073\uffb7\101\uffb7\102\uffb7\001\002\000\006\064" +
    "\112\105\110\001\002\000\022\003\uffb9\026\uffb9\031\uffb9" +
    "\040\uffb9\064\uffb9\073\uffb9\101\uffb9\102\uffb9\001\002\000" +
    "\006\064\112\105\110\001\002\000\022\003\uffb3\026\uffb3" +
    "\031\uffb3\040\uffb3\064\uffb3\073\uffb3\101\uffb3\102\uffb3\001" +
    "\002\000\006\064\112\105\110\001\002\000\022\003\uffbb" +
    "\026\uffbb\031\uffbb\040\uffbb\064\uffbb\073\uffbb\101\uffbb\102" +
    "\uffbb\001\002\000\006\064\112\105\110\001\002\000\022" +
    "\003\uffaf\026\uffaf\031\uffaf\040\uffaf\064\uffaf\073\uffaf\101" +
    "\uffaf\102\uffaf\001\002\000\034\003\075\021\237\026\100" +
    "\067\226\070\236\071\227\072\235\073\233\074\234\075" +
    "\232\076\230\077\225\100\231\001\002\000\132\003\uffa9" +
    "\004\uffa9\005\uffa9\006\uffa9\007\uffa9\010\uffa9\011\uffa9\012" +
    "\uffa9\013\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9" +
    "\026\uffa9\027\uffa9\033\uffa9\036\uffa9\037\uffa9\040\uffa9\043" +
    "\uffa9\044\uffa9\045\uffa9\046\uffa9\050\uffa9\053\uffa9\054\uffa9" +
    "\055\uffa9\056\uffa9\057\uffa9\060\uffa9\061\uffa9\062\uffa9\063" +
    "\uffa9\064\uffa9\065\uffa9\066\uffa9\067\uffa9\070\uffa9\073\uffa9" +
    "\101\uffa9\102\uffa9\103\uffa9\104\uffa9\001\002\000\030\004" +
    "\064\005\077\006\061\007\055\010\072\012\106\013\063" +
    "\016\067\064\123\065\070\102\uff4f\001\002\000\004\102" +
    "\u01a0\001\002\000\004\103\u01a1\001\002\000\054\004\064" +
    "\005\077\006\061\007\055\010\072\012\106\013\063\016" +
    "\067\033\147\036\162\043\163\044\140\045\150\046\144" +
    "\050\143\053\152\054\141\060\154\064\145\065\070\104" +
    "\uff4b\001\002\000\004\104\u01a3\001\002\000\054\003\uff57" +
    "\004\uff57\005\uff57\006\uff57\007\uff57\010\uff57\012\uff57\013" +
    "\uff57\016\uff57\026\uff57\040\uff57\055\uff57\056\uff57\057\uff57" +
    "\060\uff57\061\uff57\064\uff57\065\uff57\073\uff57\101\uff57\104" +
    "\uff57\001\002\000\006\064\112\105\110\001\002\000\022" +
    "\003\uffad\026\uffad\031\uffad\040\uffad\064\uffad\073\uffad\101" +
    "\uffad\102\uffad\001\002\000\054\003\uffd8\004\uffd8\005\uffd8" +
    "\006\uffd8\007\uffd8\010\uffd8\012\uffd8\013\uffd8\016\uffd8\026" +
    "\uffd8\040\uffd8\055\015\056\011\057\013\060\021\061\012" +
    "\064\uffd8\065\uffd8\073\uffd8\101\uffd8\104\uffdc\001\002\000" +
    "\004\104\uffd2\001\002\000\004\032\uffea\001\002\000\004" +
    "\032\uffec\001\002\000\004\032\uffeb\001\002\000\004\032" +
    "\uffe8\001\002\000\050\003\uffe6\004\uffe6\005\uffe6\006\uffe6" +
    "\007\uffe6\010\uffe6\012\uffe6\013\uffe6\016\uffe6\026\uffe6\032" +
    "\uffe6\040\uffe6\055\uffe6\056\uffe6\057\uffe6\064\uffe6\065\uffe6" +
    "\073\uffe6\101\uffe6\001\002\000\050\003\uffe4\004\uffe4\005" +
    "\uffe4\006\uffe4\007\uffe4\010\uffe4\012\uffe4\013\uffe4\016\uffe4" +
    "\026\uffe4\032\uffe4\040\uffe4\055\uffe4\056\uffe4\057\uffe4\064" +
    "\uffe4\065\uffe4\073\uffe4\101\uffe4\001\002\000\004\002\001" +
    "\001\002\000\010\003\075\025\u01b0\026\100\001\002\000" +
    "\004\064\u01b4\001\002\000\016\024\004\055\ufffa\056\ufffa" +
    "\057\ufffa\060\ufffa\061\ufffa\001\002\000\016\024\ufffc\055" +
    "\ufffc\056\ufffc\057\ufffc\060\ufffc\061\ufffc\001\002\000\014" +
    "\055\uffff\056\uffff\057\uffff\060\uffff\061\uffff\001\002\000" +
    "\010\003\075\025\u01b0\026\100\001\002\000\016\024\ufffd" +
    "\055\ufffd\056\ufffd\057\ufffd\060\ufffd\061\ufffd\001\002\000" +
    "\010\003\075\025\u01b7\026\100\001\002\000\006\064\u01bb" +
    "\071\u01bc\001\002\000\016\024\004\055\ufffa\056\ufffa\057" +
    "\ufffa\060\ufffa\061\ufffa\001\002\000\016\024\ufff8\055\ufff8" +
    "\056\ufff8\057\ufff8\060\ufff8\061\ufff8\001\002\000\014\055" +
    "\ufffb\056\ufffb\057\ufffb\060\ufffb\061\ufffb\001\002\000\010" +
    "\003\075\025\u01b7\026\100\001\002\000\006\003\075\026" +
    "\100\001\002\000\016\024\ufff9\055\ufff9\056\ufff9\057\ufff9" +
    "\060\ufff9\061\ufff9\001\002\000\016\024\ufff7\055\ufff7\056" +
    "\ufff7\057\ufff7\060\ufff7\061\ufff7\001\002\000\016\024\ufff6" +
    "\055\ufff6\056\ufff6\057\ufff6\060\ufff6\061\ufff6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01bd\000\010\002\006\005\007\006\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\015\017\017\013\020\015\021\016\001" +
    "\001\000\002\001\001\000\004\054\u01ab\001\001\000\002" +
    "\001\001\000\006\014\u01a9\020\u01aa\001\001\000\002\001" +
    "\001\000\006\013\u01a8\017\u01a7\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\055\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\130\025" +
    "\001\001\000\004\024\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\033\001\001" +
    "\000\002\001\001\000\004\024\034\001\001\000\002\001" +
    "\001\000\004\025\036\001\001\000\002\001\001\000\004" +
    "\025\040\001\001\000\004\024\041\001\001\000\002\001" +
    "\001\000\014\016\044\017\045\020\047\027\043\046\046" +
    "\001\001\000\036\007\073\022\055\023\072\026\101\031" +
    "\103\032\053\033\061\034\100\035\070\040\104\041\064" +
    "\044\075\047\052\146\056\001\001\000\002\001\001\000" +
    "\006\020\047\046\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\132" +
    "\u01a5\001\001\000\002\001\001\000\004\144\u01a3\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\030\216\043" +
    "\u019b\073\212\001\001\000\004\143\u0199\001\001\000\002" +
    "\001\001\000\004\135\u0197\001\001\000\004\141\u0195\001" +
    "\001\000\002\001\001\000\006\140\130\151\u0188\001\001" +
    "\000\004\136\u0193\001\001\000\004\137\u0191\001\001\000" +
    "\002\001\001\000\004\133\u018f\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\007\073\023" +
    "\u0186\026\101\047\052\146\056\001\001\000\004\142\u0184" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\131" +
    "\u0182\001\001\000\004\147\115\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\134\106\001\001\000\004\053" +
    "\110\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\145\113\001\001\000\004\053\114\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\150\117" +
    "\001\001\000\002\001\001\000\024\031\103\032\053\033" +
    "\061\034\100\035\070\040\104\041\064\044\123\050\121" +
    "\001\001\000\002\001\001\000\004\140\130\001\001\000" +
    "\004\152\124\001\001\000\004\051\126\001\001\000\024" +
    "\031\103\032\053\033\061\034\100\035\070\040\104\041" +
    "\064\044\123\050\127\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\053\131\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\031\163\032\134\033\136\034\160" +
    "\035\150\040\164\062\157\063\152\064\154\067\135\071" +
    "\145\075\155\076\156\077\141\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\030\216\043\u017a\073\212\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\066\u0142\102" +
    "\u0144\001\001\000\002\001\001\000\004\066\u0134\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\u0129\001" +
    "\001\000\036\031\163\032\134\033\136\034\160\035\150" +
    "\040\164\062\157\063\152\064\u0128\067\135\071\145\075" +
    "\155\076\156\077\141\001\001\000\020\031\163\032\134" +
    "\033\136\034\160\035\150\040\164\071\u0127\001\001\000" +
    "\002\001\001\000\006\007\073\026\u0125\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\052" +
    "\u011b\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\031\174\032\166\033\170\034\173\035" +
    "\172\040\175\103\167\105\176\001\001\000\002\001\001" +
    "\000\006\007\073\026\u0119\001\001\000\002\001\001\000" +
    "\004\106\u0112\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\030\216\043" +
    "\200\073\212\104\202\001\001\000\012\030\216\043\u0108" +
    "\060\u0109\073\212\001\001\000\004\007\u0102\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\030\216\043\u0101" +
    "\073\212\001\001\000\002\001\001\000\004\061\345\001" +
    "\001\000\002\001\001\000\010\030\216\043\333\073\212" +
    "\001\001\000\010\030\216\043\332\073\212\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\126\303\001\001" +
    "\000\002\001\001\000\004\113\277\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\030\216\043\223\073\212\001\001\000\002\001" +
    "\001\000\004\036\267\001\001\000\010\030\216\043\266" +
    "\073\212\001\001\000\010\030\216\043\265\073\212\001" +
    "\001\000\004\120\263\001\001\000\004\037\261\001\001" +
    "\000\004\120\256\001\001\000\004\124\250\001\001\000" +
    "\010\030\216\043\245\073\212\001\001\000\010\030\216" +
    "\043\244\073\212\001\001\000\010\030\216\043\243\073" +
    "\212\001\001\000\002\001\001\000\004\037\240\001\001" +
    "\000\010\030\216\043\242\073\212\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\030\216\043\255\073\212\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\030\216\043\260\073\212\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\030\216\043" +
    "\262\073\212\001\001\000\002\001\001\000\010\030\216" +
    "\043\264\073\212\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\030\216\043\271\073\212" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\031" +
    "\163\032\134\033\136\034\160\035\150\040\164\062\157" +
    "\063\152\064\273\067\135\071\145\075\155\076\156\077" +
    "\141\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\030" +
    "\216\043\301\073\212\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\127\317\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\030\216\043\330\073\212" +
    "\001\001\000\014\030\216\042\320\043\321\057\322\073" +
    "\212\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\045\325\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\030\216\042\326\043\321\073\212\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\114\335\001\001\000\002\001\001\000\010\030" +
    "\216\043\337\073\212\001\001\000\002\001\001\000\010" +
    "\030\216\043\341\073\212\001\001\000\002\001\001\000" +
    "\010\004\360\121\357\122\363\001\001\000\012\030\216" +
    "\042\352\043\321\073\212\001\001\000\004\056\346\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\061\350" +
    "\074\351\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\073\370" +
    "\123\366\001\001\000\004\003\376\001\001\000\004\113" +
    "\375\001\001\000\004\122\374\001\001\000\004\003\373" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\061\u0100\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\077\u0103\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\031\163\032\134\033" +
    "\136\034\160\035\150\040\164\062\157\063\152\064\u0106" +
    "\067\135\071\145\075\155\076\156\077\141\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\065\u010c\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\030\216\043" +
    "\u010e\073\212\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\065\u010f\001\001\000\002\001\001\000\010\007" +
    "\073\026\u0117\107\u0116\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\106\u0114\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\030\216\043\u011d\073\212\001\001\000\004" +
    "\125\u011f\001\001\000\010\030\216\043\u0121\073\212\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\125\u0122" +
    "\001\001\000\002\001\001\000\004\052\u0124\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\031" +
    "\163\032\134\033\136\034\160\035\150\040\164\062\157" +
    "\063\152\064\u012b\067\135\071\145\075\155\076\156\077" +
    "\141\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\030\216\043\u012f\073\212\001\001\000" +
    "\002\001\001\000\004\007\u0131\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\066\u0138\070\u0137\001\001\000\012\030\216\043\u0139" +
    "\072\u013a\073\212\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\125\u013c\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\101" +
    "\u014f\001\001\000\010\004\u014c\121\357\122\363\001\001" +
    "\000\010\030\216\043\u014b\073\212\001\001\000\004\100" +
    "\u0149\001\001\000\002\001\001\000\010\030\216\043\u0145" +
    "\073\212\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\030\216\043\u014a" +
    "\073\212\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\066\u014e\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\030\216\043" +
    "\u0152\073\212\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\030\216\043\u0154\073\212\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\031\163\032\134\033\136" +
    "\034\160\035\150\040\164\062\157\063\152\064\u0157\067" +
    "\135\071\145\075\155\076\156\077\141\001\001\000\002" +
    "\001\001\000\004\110\u015a\001\001\000\004\111\u015c\001" +
    "\001\000\002\001\001\000\036\031\163\032\134\033\136" +
    "\034\160\035\150\040\164\062\157\063\152\064\u0165\067" +
    "\135\071\145\075\155\076\156\077\141\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\030\216\043\u015f\073" +
    "\212\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\031\163\032\134\033\136\034\160\035\150\040\164\062" +
    "\157\063\152\064\u0162\067\135\071\145\075\155\076\156" +
    "\077\141\001\001\000\002\001\001\000\004\110\u0164\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\030\216\043\u0168\073\212\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\115\u016c\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\030\216\043\u016e\073" +
    "\212\001\001\000\002\001\001\000\036\031\163\032\134" +
    "\033\136\034\160\035\150\040\164\062\u0174\067\u0170\071" +
    "\145\075\155\076\u0173\077\141\116\u0172\117\u0171\001\001" +
    "\000\002\001\001\000\036\031\163\032\134\033\136\034" +
    "\160\035\150\040\164\062\u0174\067\u0170\071\145\075\155" +
    "\076\u0173\077\141\116\u0176\117\u0171\001\001\000\004\115" +
    "\u0175\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\031" +
    "\163\032\134\033\136\034\160\035\150\040\164\062\u0174" +
    "\067\u0170\071\145\075\155\076\u0173\077\141\116\u0179\117" +
    "\u0171\001\001\000\002\001\001\000\004\007\u017b\001\001" +
    "\000\002\001\001\000\010\030\216\043\u017d\073\212\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\031\163" +
    "\032\134\033\136\034\160\035\150\040\164\062\157\063" +
    "\152\064\u0180\067\135\071\145\075\155\076\156\077\141" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\016" +
    "\u0183\017\045\020\047\027\043\046\046\001\001\000\002" +
    "\001\001\000\004\053\u0185\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\151\u0188\001\001\000\002\001\001" +
    "\000\024\031\103\032\053\033\061\034\100\035\070\040" +
    "\104\041\064\044\123\050\u018a\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\031\163\032\134\033\136\034" +
    "\160\035\150\040\164\062\157\063\152\064\u018d\067\135" +
    "\071\145\075\155\076\156\077\141\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\053\u0190\001\001\000\002" +
    "\001\001\000\004\053\u0192\001\001\000\002\001\001\000" +
    "\004\053\u0194\001\001\000\002\001\001\000\004\053\u0196" +
    "\001\001\000\002\001\001\000\004\053\u0198\001\001\000" +
    "\002\001\001\000\004\053\u019a\001\001\000\002\001\001" +
    "\000\004\007\u019c\001\001\000\002\001\001\000\024\031" +
    "\103\032\053\033\061\034\100\035\070\040\104\041\064" +
    "\044\123\050\u019e\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\031\163\032\134\033\136\034\160\035\150" +
    "\040\164\062\157\063\152\064\u01a1\067\135\071\145\075" +
    "\155\076\156\077\141\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\053\u01a4\001\001\000\002\001\001\000" +
    "\014\016\u01a6\017\045\020\047\027\043\046\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\u01b1\012\u01b0\001" +
    "\001\000\002\001\001\000\004\006\u01b2\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\u01b1\012\u01b4\001" +
    "\001\000\002\001\001\000\006\007\u01b8\010\u01b7\001\001" +
    "\000\004\011\u01bc\001\001\000\004\006\u01b9\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\u01b8\010\u01be" +
    "\001\001\000\004\007\u01bd\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        private ClassSyntax classFinalSystax ;
        private ListType typeDate = null;
        private ListType typeMethods = null;
        private Symbol s;
        private String nameClass;
        private String nameVariable;
        private String nameMethods;
        private List<Method> ListMethods =new ArrayList<>();
        private List<Variable> ListVariable= new ArrayList<>();
        private List<Variable> listParameters= new ArrayList<>();
        private int errorCounter= 0;

        Sintactico(Lexico lexico){
            super(lexico);
        }
        public void syntax_error(Symbol cur_token) {
            errorCounter++;
            System.out.print("\n"+errorCounter+" - Clase<"+nameClass+"> en simbolo<" + sym.terminalNames[cur_token.sym]+String.format(">posicion: <%d>, <%d>", (cur_token.left+1), (cur_token.right+1)));
        }
        /*public void unrecovered_syntax_error(Symbol cur_token) {
            if (cur_token.sym == sym.EOF) {
             System.out.println("public void unrecoveredsyntax_error!!!!!!!!!!!!!!");
            }
        }*/
        public Symbol getSymbol(){
            return this.s;
        }

       private void addVariable (int aleft,int aright){
          /*  System.out.println("***************VARIABLE******************");
            System.out.println("tipo:"+typeDate+"x:"+(aright+1)+"y:"+(aleft+1)+"name:"+nameVariable);
            System.out.println("****************************************");*/
            ListVariable.add(new Variable(typeDate,aright+1,aleft+1,nameVariable));
            typeDate=null;
            nameVariable = "";
        }
        private void addMethods (int aleft,int aright){
            /*
            System.out.println("***************METODOS******************");
            System.out.println("tipo:"+typeDate+"x:"+(aright+1)+"y:"+(aleft+1)+"name:"+nameMethods);
            System.out.println("****************************************");*/
            if(typeMethods ==null){
                typeMethods = ListType.CONSTRUCTOR;
            }
            ListMethods.add(new Method(typeMethods, listParameters, (aright+1), (aleft+1), nameMethods));
            listParameters =  new ArrayList<>();
            typeMethods=null;
            nameVariable = "";
        }
        private void addMethodsParameters (int aleft,int aright){
            /*System.out.println("*Methods Parameters");
            System.out.println("tipo:"+typeDate+"x:"+(aright+1)+"y:"+(aleft+1)+"name:"+nameVariable);
            System.out.println("****************************************");*/
            listParameters.add(new Variable(typeDate,aright+1,aleft+1,nameVariable));
            typeDate=null;
            nameVariable = "";
        }
        public void arrayType() {
        switch (typeDate) {
            case BYTE:
                typeDate = ListType.ARRAYBYTE;
                break;
            case SHORT:
                typeDate = ListType.ARRAYSHORT;
                break;
            case INT:
                typeDate = ListType.ARRAYINT;
                break;
            case LONG:
                typeDate = ListType.ARRAYLONG;
                break;
            case FLOAT:
                typeDate = ListType.ARRAYFLOAT;
                break;
            case DOUBLE:
                typeDate = ListType.ARRAYDOUBLE;
                break;
            case CHAR:
                typeDate = ListType.ARRAYCHAR;
                break;
            case BOOLEAN:
                typeDate = ListType.ARRAYBOOLEAN;
                break;
            case STRING:
                typeDate = ListType.ARRAYSTRING;
                break;
            case OBJECT:
                typeDate = ListType.ARRAYOBJECT;
                break;
            default:
                break;
        }
    }
    public String getNameClass(){
        return this.nameClass;
    }
        public int getErrorCounter(){
            return this.errorCounter;
        }
        public List<Variable> getListVariable() {
        return ListVariable;
        }
        public List<Method> getListMethods() {
        return ListMethods;
        }
        public ClassSyntax getClassSyntax(){
            return this.classFinalSystax;
        }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= encabezado clase 
            {
              Object RESULT =null;
		classFinalSystax = new ClassSyntax(nameClass, ListMethods, ListVariable, null);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // encabezado ::= PACKAGE ID pc importacion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("encabezado",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // encabezado ::= importacion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("encabezado",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // pc ::= PUNTO ID pc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("pc",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // pc ::= p 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("pc",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // importacion ::= IMPORT ID sp importacion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("importacion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // importacion ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("importacion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sp ::= PUNTO spp 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sp",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sp ::= p 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sp",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // spp ::= MULTIPLICACION p 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("spp",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // spp ::= ID sp 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("spp",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // p ::= PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("p",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // p ::= error 
            {
              Object RESULT =null;
		System.out.println("te falto colocar ;");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("p",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$0 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
nameClass = a.toString();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",86, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // clase ::= v CLASS ID NT$0 herencia L_APERTURA internoClase L_CIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("clase",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // herencia ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("herencia",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // herencia ::= EXNTENDS ID secuenciIDHRE herencia 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("herencia",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // herencia ::= IMPLEMENTS ID secuenciIDHRE herencia 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("herencia",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // secuenciIDHRE ::= PUNTO ID secuenciIDHRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("secuenciIDHRE",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // secuenciIDHRE ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("secuenciIDHRE",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // v ::= staticCfianl vfactorizadoStatic 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("v",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // v ::= vc vfactorizadoVC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("v",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // vfactorizadoStatic ::= vc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vfactorizadoStatic",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // vfactorizadoStatic ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vfactorizadoStatic",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // vfactorizadoVC ::= staticCfianl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vfactorizadoVC",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // vfactorizadoVC ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vfactorizadoVC",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // staticCfianl ::= STATIC staticFactori 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("staticCfianl",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // staticCfianl ::= FINAL finalFactori 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("staticCfianl",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // staticFactori ::= FINAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("staticFactori",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // staticFactori ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("staticFactori",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // finalFactori ::= STATIC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("finalFactori",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // finalFactori ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("finalFactori",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // vc ::= PUBLIC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vc",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // vc ::= PRIVATE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vc",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // vc ::= PROTECTED 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vc",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // internoClase ::= vGlobal internoClaseFa 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("internoClase",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // internoClase ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("internoClase",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // vGlobal ::= vc vGlobalFac 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vGlobal",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // vGlobal ::= vGlobalFac 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vGlobal",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // vGlobalFac ::= staticCfianl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vGlobalFac",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // vGlobalFac ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vGlobalFac",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // internoClaseFa ::= variableID ayuda 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("internoClaseFa",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // internoClaseFa ::= ayuda 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("internoClaseFa",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$1 ::= 
            {
              Object RESULT =null;

            int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		    int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
            addVariable(aleft,aright);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$1",87, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ayuda ::= asignacionVariable NT$1 internoClase 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ayuda",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$2 ::= 
            {
              Object RESULT =null;

            int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		    int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
            addMethods(aleft,aright);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$2",88, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ayuda ::= metodo NT$2 internoClase 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ayuda",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // variableID ::= numFloat 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableID",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // variableID ::= numDouble 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableID",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // variableID ::= variableChar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableID",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // variableID ::= variableBoolean 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableID",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // variableID ::= variableStirng 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableID",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // variableID ::= variableObject 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableID",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // variableID ::= numEntero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableID",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // typeVarible ::= ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("typeVarible",84, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // typeVarible ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("typeVarible",84, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // typeVarible ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("typeVarible",84, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // typeVarible ::= CHAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("typeVarible",84, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // typeVarible ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("typeVarible",84, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // typeVarible ::= STRING 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("typeVarible",84, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // typeVarible ::= BYTE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("typeVarible",84, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // typeVarible ::= SHORT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("typeVarible",84, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // typeVarible ::= INT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("typeVarible",84, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // typeVarible ::= LONG 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("typeVarible",84, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$3 ::= 
            {
              Object RESULT =null;
typeDate = ListType.FLOAT;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$3",89, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // numFloat ::= FLOAT NT$3 onlyIDArray 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("numFloat",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$4 ::= 
            {
              Object RESULT =null;
typeDate = ListType.DOUBLE;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$4",90, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // numDouble ::= DOUBLE NT$4 onlyIDArray 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("numDouble",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$5 ::= 
            {
              Object RESULT =null;
typeDate = ListType.CHAR;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$5",91, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // variableChar ::= CHAR NT$5 onlyIDArray 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableChar",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$6 ::= 
            {
              Object RESULT =null;
typeDate = ListType.BOOLEAN;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$6",92, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // variableBoolean ::= BOOLEAN NT$6 onlyIDArray 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableBoolean",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$7 ::= 
            {
              Object RESULT =null;
typeDate = ListType.STRING;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$7",93, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // variableStirng ::= STRING NT$7 onlyIDArray 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableStirng",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$8 ::= 
            {
              Object RESULT =null;
typeDate = ListType.OBJECT;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$8",94, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // variableObject ::= ID NT$8 onlyIDArray 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableObject",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$9 ::= 
            {
              Object RESULT =null;
typeDate = ListType.BYTE;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$9",95, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // numEntero ::= BYTE NT$9 onlyIDArray 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("numEntero",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$10 ::= 
            {
              Object RESULT =null;
typeDate = ListType.SHORT;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$10",96, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // numEntero ::= SHORT NT$10 onlyIDArray 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("numEntero",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$11 ::= 
            {
              Object RESULT =null;
typeDate = ListType.INT;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$11",97, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // numEntero ::= INT NT$11 onlyIDArray 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("numEntero",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$12 ::= 
            {
              Object RESULT =null;
typeDate = ListType.LONG;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$12",98, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // numEntero ::= LONG NT$12 onlyIDArray 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("numEntero",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // onlyIDArray ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		nameVariable = a.toString();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("onlyIDArray",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NT$13 ::= 
            {
              Object RESULT =null;
arrayType();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$13",99, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // onlyIDArray ::= C_APERTURA C_CIERRE NT$13 onlyIDArray 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("onlyIDArray",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // asignacionVariable ::= IGUAL tDatos p 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacionVariable",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // asignacionVariable ::= p 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacionVariable",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // tDatos ::= P_APERTURA tDatos P_CIERRE tDatosFac 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatos",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // tDatos ::= tDatos IGUAL igualSimple tDatos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatos",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // tDatos ::= tDatos MAYOR_Q menorYmayorIgual tDatos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatos",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // tDatos ::= tDatos MENOR_Q menorYmayorIgual tDatos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatos",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // tDatos ::= tDatos Y dosY tDatos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatos",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // tDatos ::= tDatos O dosO tDatos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatos",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // tDatos ::= tDatos ADMIRACION IGUAL dosO tDatos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatos",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // tDatos ::= tDatos SUMA tDatos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatos",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // tDatos ::= tDatos RESTA tDatos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatos",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // tDatos ::= tDatos DIVISION tDatos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatos",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // tDatos ::= tDatos MULTIPLICACION tDatos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatos",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // tDatos ::= tDatos MODULO tDatos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatos",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // tDatos ::= vChar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatos",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // tDatos ::= F 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatos",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // tDatos ::= L_APERTURA lCon 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatos",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // tDatos ::= NEW typeVarible newParentesisOCochtes 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatos",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // tDatos ::= FALSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatos",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // tDatos ::= TRUE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatos",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // tDatos ::= ADMIRACION tDatos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatos",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // tDatos ::= RESTA tDatos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatos",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // tDatos ::= SUMA tDatos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatos",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // tDatos ::= ENTERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatos",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // tDatos ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatos",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // tDatos ::= TEXT textOperar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatos",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // tDatos ::= usarOBJECT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatos",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // newParentesisOCochtes ::= P_APERTURA tFact 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("newParentesisOCochtes",85, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // newParentesisOCochtes ::= C_APERTURA tDatos C_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("newParentesisOCochtes",85, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // igualSimple ::= IGUAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("igualSimple",82, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // igualSimple ::= SUMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("igualSimple",82, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // igualSimple ::= RESTA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("igualSimple",82, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // igualSimple ::= DIVISION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("igualSimple",82, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // igualSimple ::= MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("igualSimple",82, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // igualSimple ::= MODULO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("igualSimple",82, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // igualSimple ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("igualSimple",82, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // tDatosFac ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatosFac",74, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // tDatosFac ::= INTERO tDatos DOBLE_PUNTO tDatos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatosFac",74, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // menorYmayorIgual ::= IGUAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("menorYmayorIgual",78, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // menorYmayorIgual ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("menorYmayorIgual",78, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // vChar ::= SIMPLE_COMILLA CARACTER SIMPLE_COMILLA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vChar",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // vChar ::= CHARTN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vChar",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // tFact ::= dSeguidoF P_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tFact",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // tFact ::= P_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tFact",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // dSeguidoF ::= tDatos objectInst 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dSeguidoF",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // objectInst ::= COMA dSeguidoF 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("objectInst",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // objectInst ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("objectInst",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // lCon ::= tDatos lConFact L_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lCon",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // lCon ::= L_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lCon",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // lConFact ::= COMA tDatos lConFact 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lConFact",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // lConFact ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lConFact",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // textOperar ::= SUMA tDatos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("textOperar",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // textOperar ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("textOperar",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // dosY ::= Y 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dosY",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // dosY ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dosY",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // dosO ::= O 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dosO",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // dosO ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dosO",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // opBooleanIGUALFac ::= tDatos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("opBooleanIGUALFac",72, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // opBooleanIGUALFac ::= IGUAL tDatos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("opBooleanIGUALFac",72, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // j ::= operacionNumericaRecusividad 
            {
              String RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("j",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // operaionNumerica ::= 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operaionNumerica",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // operacionNumericaRecusividad ::= operacionNumericaPrima operacionNumericaTerminales operacionNumericaPrima 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionNumericaRecusividad",79, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // operacionNumericaPrima ::= SUMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionNumericaPrima",80, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // operacionNumericaPrima ::= RESTA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionNumericaPrima",80, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // operacionNumericaPrima ::= DIVISION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionNumericaPrima",80, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // operacionNumericaPrima ::= MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionNumericaPrima",80, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // operacionNumericaPrima ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionNumericaPrima",80, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // operacionNumericaTerminales ::= RESTA operaionNumerica 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionNumericaTerminales",81, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // operacionNumericaTerminales ::= SUMA operaionNumerica 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionNumericaTerminales",81, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // operacionNumericaTerminales ::= ENTERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionNumericaTerminales",81, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // operacionNumericaTerminales ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionNumericaTerminales",81, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // operacionNumericaTerminales ::= TEXT textOperar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionNumericaTerminales",81, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // operacionNumericaTerminales ::= usarOBJECT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionNumericaTerminales",81, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // usarOBJECT ::= ID idDato 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("usarOBJECT",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // idDato ::= PUNTO idDatoFac 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("idDato",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // idDato ::= C_APERTURA j C_CIERRE idDato 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("idDato",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // idDato ::= P_APERTURA dSeguidoF P_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("idDato",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // idDato ::= P_APERTURA P_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("idDato",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // idDato ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("idDato",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // idDatoFac ::= ID idGet 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("idDatoFac",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // idGet ::= idDato 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("idGet",58, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // NT$14 ::= 
            {
              Object RESULT =null;
nameMethods=nameVariable;typeMethods = typeDate;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$14",100, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // metodo ::= NT$14 P_APERTURA pMetodoS P_CIERRE L_APERTURA localMetodo L_CIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("metodo",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // NT$15 ::= 
            {
              Object RESULT =null;
typeMethods = ListType.VOID;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$15",101, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // NT$16 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
nameMethods = a.toString();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$16",102, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // metodo ::= VOID NT$15 ID NT$16 P_APERTURA pMetodoS P_CIERRE L_APERTURA localMetodo L_CIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("metodo",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // NT$17 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
nameMethods = a.toString();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$17",103, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // metodo ::= ID NT$17 P_APERTURA pMetodoS P_CIERRE L_APERTURA localMetodo L_CIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("metodo",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // NT$18 ::= 
            {
              Object RESULT =null;

            int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		    int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
            addMethodsParameters(aleft,aright);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$18",104, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // pMetodoS ::= variableID NT$18 pMetodoSP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("pMetodoS",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // pMetodoS ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("pMetodoS",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // pMetodoSP ::= COMA pMetodoS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("pMetodoSP",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // pMetodoSP ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("pMetodoSP",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // localMetodo ::= local localMetodo 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("localMetodo",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // localMetodo ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("localMetodo",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // local ::= variableLocal 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("local",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // local ::= sentenciaControl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("local",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // local ::= terminalAccion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("local",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // variableLocal ::= variableLocalFinal asignacionVariable 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableLocal",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // variableLocalFinal ::= FINAL variableIDLocal 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableLocalFinal",59, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // variableLocalFinal ::= variableIDLocal 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableLocalFinal",59, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // variableLocalFinal ::= usarVariable 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableLocalFinal",59, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // variableLocalFinal ::= terminalAccion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableLocalFinal",59, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // variableIDLocal ::= numFloat 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableIDLocal",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // variableIDLocal ::= numDouble 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableIDLocal",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // variableIDLocal ::= variableChar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableIDLocal",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // variableIDLocal ::= variableBoolean 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableIDLocal",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // variableIDLocal ::= variableStirng 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableIDLocal",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // variableIDLocal ::= numEntero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableIDLocal",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // loclaMetodFacto ::= PUNTO ID variableObjectUsarCrear 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("loclaMetodFacto",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // loclaMetodFacto ::= ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("loclaMetodFacto",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // loclaMetodFacto ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("loclaMetodFacto",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // variableObjectUsarCrear ::= P_APERTURA variableSet 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableObjectUsarCrear",54, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // variableObjectUsarCrear ::= loclaMetodFacto 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableObjectUsarCrear",54, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // variableSet ::= tDatos secuenciDatos P_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableSet",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // variableSet ::= P_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableSet",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // usarVariable ::= ID usarVariableFacto 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("usarVariable",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // usarVariable ::= THIS loclaMetodFacto 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("usarVariable",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // usarVariable ::= SUPER soloId P_APERTURA tDatos secuenciDatos P_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("usarVariable",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // soloId ::= PUNTO ID soloId 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("soloId",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // soloId ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("soloId",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // secuenciDatos ::= COMA tDatos secuenciDatos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("secuenciDatos",83, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // secuenciDatos ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("secuenciDatos",83, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // usarVariableFacto ::= SUMA sumarIgual 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("usarVariableFacto",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // usarVariableFacto ::= RESTA restarIgual 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("usarVariableFacto",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // usarVariableFacto ::= loclaMetodFacto 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("usarVariableFacto",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // usarVariableFacto ::= IGUAL tDatos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("usarVariableFacto",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // usarVariableFacto ::= C_APERTURA j C_CIERRE loclaMetodFacto 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("usarVariableFacto",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // usarVariableFacto ::= P_APERTURA tDatos P_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("usarVariableFacto",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // restarIgual ::= IGUAL tDatos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("restarIgual",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // restarIgual ::= RESTA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("restarIgual",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // sumarIgual ::= IGUAL tDatos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sumarIgual",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // sumarIgual ::= SUMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sumarIgual",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // terminalAccion ::= RETURN tDatos p 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("terminalAccion",53, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // terminalAccion ::= BREAK p 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("terminalAccion",53, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // sentenciaControl ::= WHILE P_APERTURA tDatos P_CIERRE L_APERTURA localMetodo L_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciaControl",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // sentenciaControl ::= DO L_APERTURA localMetodo L_CIERRE WHILE P_APERTURA tDatos P_CIERRE p 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciaControl",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // sentenciaControl ::= IF P_APERTURA tDatos P_CIERRE L_APERTURA localMetodo L_CIERRE sentenciaElse 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciaControl",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // sentenciaControl ::= SWITCH P_APERTURA tDatos P_CIERRE L_APERTURA internoSwitch L_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciaControl",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // sentenciaControl ::= FOR P_APERTURA inializarVariable sentenciaFor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciaControl",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // internoSwitch ::= CASE tDatos DOBLE_PUNTO localSwitch internoSwitch 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("internoSwitch",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // internoSwitch ::= DEFAULT DOBLE_PUNTO localSwitch 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("internoSwitch",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // internoSwitch ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("internoSwitch",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // localSwitch ::= localSwitchDeclaracion localSwitch 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("localSwitch",76, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // localSwitch ::= terminalAccion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("localSwitch",76, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // localSwitchDeclaracion ::= variableLocal 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("localSwitchDeclaracion",77, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // localSwitchDeclaracion ::= sentenciaControl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("localSwitchDeclaracion",77, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // sentenciaFor ::= P_CIERRE L_APERTURA localMetodo L_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciaFor",66, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // sentenciaFor ::= tDatos p usarVariable P_CIERRE L_APERTURA localMetodo L_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciaFor",66, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // inializarVariable ::= variableIDFor asignacionVariable 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("inializarVariable",67, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // inializarVariable ::= ID forVariableId 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("inializarVariable",67, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // variableIDFor ::= numFloat 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableIDFor",65, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // variableIDFor ::= numDouble 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableIDFor",65, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // variableIDFor ::= variableChar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableIDFor",65, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // variableIDFor ::= variableBoolean 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableIDFor",65, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // variableIDFor ::= variableStirng 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableIDFor",65, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // variableIDFor ::= numEntero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableIDFor",65, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // forVariableId ::= ID forVariableIdFac 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("forVariableId",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // forVariableId ::= C_APERTURA C_CIERRE forVariableId 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("forVariableId",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // forVariableIdFac ::= DOBLE_PUNTO ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("forVariableIdFac",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // forVariableIdFac ::= asignacionVariable 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("forVariableIdFac",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // sentenciaElse ::= ELSE sentenciaElseFac 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciaElse",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // sentenciaElse ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciaElse",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // sentenciaElseFac ::= L_APERTURA localMetodo L_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciaElseFac",71, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // sentenciaElseFac ::= IF P_APERTURA tDatos P_CIERRE L_APERTURA localMetodo L_CIERRE sentenciaElse 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciaElseFac",71, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
