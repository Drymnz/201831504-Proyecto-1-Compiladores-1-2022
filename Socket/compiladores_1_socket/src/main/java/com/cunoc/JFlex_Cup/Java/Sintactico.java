
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.cunoc.JFlex_Cup.Java;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\206\000\002\002\004\000\002\002\004\000\002\062" +
    "\004\000\002\062\002\000\002\061\003\000\002\061\003" +
    "\000\002\073\003\000\002\005\003\000\002\052\005\000" +
    "\002\052\005\000\002\056\004\000\002\056\002\000\002" +
    "\053\004\000\002\004\003\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\004\000\002\006\006\000\002\006\002\000\002" +
    "\007\006\000\002\007\002\000\002\011\004\000\002\011" +
    "\003\000\002\012\004\000\002\012\004\000\002\013\005" +
    "\000\002\013\003\000\002\010\003\000\002\010\003\000" +
    "\002\020\002\000\002\020\004\000\002\020\003\000\002" +
    "\020\003\000\002\020\004\000\002\017\004\000\002\017" +
    "\004\000\002\050\003\000\002\050\002\000\002\051\003" +
    "\000\002\051\002\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\074\002\000\002\075\002\000\002" +
    "\014\012\000\002\015\004\000\002\015\002\000\002\021" +
    "\004\000\002\021\003\000\002\022\004\000\002\022\004" +
    "\000\002\024\004\000\002\024\003\000\002\043\003\000" +
    "\002\043\002\000\002\023\005\000\002\023\003\000\002" +
    "\040\003\000\002\040\003\000\002\040\003\000\002\040" +
    "\003\000\002\040\003\000\002\040\004\000\002\040\006" +
    "\000\002\054\004\000\002\054\003\000\002\037\004\000" +
    "\002\042\004\000\002\042\002\000\002\055\005\000\002" +
    "\055\003\000\002\063\005\000\002\063\002\000\002\057" +
    "\003\000\002\025\003\000\002\026\005\000\002\026\003" +
    "\000\002\027\003\000\002\027\003\000\002\041\003\000" +
    "\002\041\003\000\002\041\003\000\002\041\003\000\002" +
    "\041\003\000\002\041\003\000\002\041\003\000\002\030" +
    "\004\000\002\032\004\000\002\033\004\000\002\034\004" +
    "\000\002\035\004\000\002\036\004\000\002\031\004\000" +
    "\002\031\004\000\002\031\004\000\002\031\004\000\002" +
    "\047\003\000\002\047\005\000\002\076\002\000\002\077" +
    "\002\000\002\044\012\000\002\100\002\000\002\101\002" +
    "\000\002\044\014\000\002\102\002\000\002\103\002\000" +
    "\002\044\013\000\002\045\004\000\002\045\002\000\002" +
    "\046\004\000\002\046\002\000\002\060\004\000\002\060" +
    "\004\000\002\060\004\000\002\067\003\000\002\067\003" +
    "\000\002\067\003\000\002\067\003\000\002\067\003\000" +
    "\002\067\003\000\002\067\004\000\002\064\005\000\002" +
    "\064\002\000\002\066\004\000\002\066\003\000\002\070" +
    "\004\000\002\070\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\330\000\020\021\004\030\uffe9\052\uffe9\053\uffe9\054" +
    "\uffe9\055\uffe9\056\uffe9\001\002\000\004\061\311\001\002" +
    "\000\004\002\310\001\002\000\016\030\uffde\052\013\053" +
    "\007\054\011\055\017\056\010\001\002\000\046\003\uffd3" +
    "\004\uffd3\005\uffd3\006\uffd3\007\uffd3\010\uffd3\012\uffd3\013" +
    "\uffd3\016\uffd3\024\uffd3\030\uffd3\036\uffd3\055\uffd3\056\uffd3" +
    "\061\uffd3\062\uffd3\070\uffd3\076\uffd3\001\002\000\052\003" +
    "\uffd6\004\uffd6\005\uffd6\006\uffd6\007\uffd6\010\uffd6\012\uffd6" +
    "\013\uffd6\016\uffd6\024\uffd6\030\uffd6\036\uffd6\052\uffd6\053" +
    "\uffd6\054\uffd6\055\307\061\uffd6\062\uffd6\070\uffd6\076\uffd6" +
    "\001\002\000\046\003\uffd1\004\uffd1\005\uffd1\006\uffd1\007" +
    "\uffd1\010\uffd1\012\uffd1\013\uffd1\016\uffd1\024\uffd1\030\uffd1" +
    "\036\uffd1\055\uffd1\056\uffd1\061\uffd1\062\uffd1\070\uffd1\076" +
    "\uffd1\001\002\000\010\030\uffdb\055\017\056\010\001\002" +
    "\000\046\003\uffd2\004\uffd2\005\uffd2\006\uffd2\007\uffd2\010" +
    "\uffd2\012\uffd2\013\uffd2\016\uffd2\024\uffd2\030\uffd2\036\uffd2" +
    "\055\uffd2\056\uffd2\061\uffd2\062\uffd2\070\uffd2\076\uffd2\001" +
    "\002\000\012\030\uffdc\052\013\053\007\054\011\001\002" +
    "\000\004\030\022\001\002\000\004\002\000\001\002\000" +
    "\052\003\uffd4\004\uffd4\005\uffd4\006\uffd4\007\uffd4\010\uffd4" +
    "\012\uffd4\013\uffd4\016\uffd4\024\uffd4\030\uffd4\036\uffd4\052" +
    "\uffd4\053\uffd4\054\uffd4\056\020\061\uffd4\062\uffd4\070\uffd4" +
    "\076\uffd4\001\002\000\050\003\uffd5\004\uffd5\005\uffd5\006" +
    "\uffd5\007\uffd5\010\uffd5\012\uffd5\013\uffd5\016\uffd5\024\uffd5" +
    "\030\uffd5\036\uffd5\052\uffd5\053\uffd5\054\uffd5\061\uffd5\062" +
    "\uffd5\070\uffd5\076\uffd5\001\002\000\050\003\uffd8\004\uffd8" +
    "\005\uffd8\006\uffd8\007\uffd8\010\uffd8\012\uffd8\013\uffd8\016" +
    "\uffd8\024\uffd8\030\uffd8\036\uffd8\052\uffd8\053\uffd8\054\uffd8" +
    "\061\uffd8\062\uffd8\070\uffd8\076\uffd8\001\002\000\004\061" +
    "\023\001\002\000\004\100\024\001\002\000\054\003\uffd0" +
    "\004\uffd0\005\uffd0\006\uffd0\007\uffd0\010\uffd0\012\uffd0\013" +
    "\uffd0\016\uffd0\024\uffd0\036\uffd0\052\uffd0\053\uffd0\054\uffd0" +
    "\055\uffd0\056\uffd0\061\uffd0\062\uffd0\070\uffd0\076\uffd0\101" +
    "\uffd0\001\002\000\054\003\uffc4\004\uffc4\005\uffc4\006\uffc4" +
    "\007\uffc4\010\uffc4\012\uffc4\013\uffc4\016\uffc4\024\uffc4\036" +
    "\uffc4\052\013\053\007\054\011\055\017\056\010\061\uffc4" +
    "\062\uffc4\070\uffc4\076\uffc4\101\uffcc\001\002\000\040\003" +
    "\060\004\045\005\062\006\042\007\040\010\054\012\071" +
    "\013\044\016\051\024\063\036\066\061\050\062\052\070" +
    "\043\076\057\001\002\000\004\101\uffcf\001\002\000\044" +
    "\003\uffc4\004\uffc4\005\uffc4\006\uffc4\007\uffc4\010\uffc4\012" +
    "\uffc4\013\uffc4\016\uffc4\024\uffc4\036\uffc4\055\017\056\010" +
    "\061\uffc4\062\uffc4\070\uffc4\076\uffc4\001\002\000\040\003" +
    "\uffc6\004\uffc6\005\uffc6\006\uffc6\007\uffc6\010\uffc6\012\uffc6" +
    "\013\uffc6\016\uffc6\024\uffc6\036\uffc6\061\uffc6\062\uffc6\070" +
    "\uffc6\076\uffc6\001\002\000\040\003\uffc5\004\uffc5\005\uffc5" +
    "\006\uffc5\007\uffc5\010\uffc5\012\uffc5\013\uffc5\016\uffc5\024" +
    "\uffc5\036\uffc5\061\uffc5\062\uffc5\070\uffc5\076\uffc5\001\002" +
    "\000\040\003\uffc7\004\uffc7\005\uffc7\006\uffc7\007\uffc7\010" +
    "\uffc7\012\uffc7\013\uffc7\016\uffc7\024\uffc7\036\uffc7\061\uffc7" +
    "\062\uffc7\070\uffc7\076\uffc7\001\002\000\004\101\035\001" +
    "\002\000\004\002\uffce\001\002\000\054\003\uffc4\004\uffc4" +
    "\005\uffc4\006\uffc4\007\uffc4\010\uffc4\012\uffc4\013\uffc4\016" +
    "\uffc4\024\uffc4\036\uffc4\052\013\053\007\054\011\055\017" +
    "\056\010\061\uffc4\062\uffc4\070\uffc4\076\uffc4\101\uffcc\001" +
    "\002\000\022\003\uffa5\024\uffa5\027\uffa5\036\uffa5\061\uffa5" +
    "\070\uffa5\076\uffa5\077\uffa5\001\002\000\006\061\073\102" +
    "\074\001\002\000\004\101\uffcd\001\002\000\006\061\073" +
    "\102\074\001\002\000\032\011\156\015\173\017\152\020" +
    "\161\025\170\035\163\057\147\060\165\061\155\063\164" +
    "\076\160\100\145\001\002\000\006\061\073\102\074\001" +
    "\002\000\006\061\073\102\074\001\002\000\022\003\uffaa" +
    "\024\uffaa\027\uffaa\036\uffaa\061\uffaa\070\uffaa\076\uffaa\077" +
    "\uffaa\001\002\000\022\003\uffa6\024\uffa6\027\uffa6\036\uffa6" +
    "\061\uffa6\070\uffa6\076\uffa6\077\uffa6\001\002\000\010\061" +
    "\073\076\253\102\074\001\002\000\006\061\073\102\074" +
    "\001\002\000\006\061\073\102\074\001\002\000\022\003" +
    "\uffa8\024\uffa8\027\uffa8\036\uffa8\061\uffa8\070\uffa8\076\uffa8" +
    "\077\uffa8\001\002\000\006\061\073\102\074\001\002\000" +
    "\004\101\uffca\001\002\000\062\003\uffc2\004\uffc2\005\uffc2" +
    "\006\uffc2\007\uffc2\010\uffc2\012\uffc2\013\uffc2\016\uffc2\024" +
    "\uffc2\036\uffc2\042\uffc2\050\uffc2\051\uffc2\052\uffc2\053\uffc2" +
    "\054\uffc2\055\uffc2\056\uffc2\061\uffc2\062\uffc2\070\uffc2\076" +
    "\uffc2\101\uffc2\001\002\000\030\004\045\005\062\006\042" +
    "\007\040\010\054\012\071\013\044\016\051\061\102\062" +
    "\052\077\uff8e\001\002\000\066\003\uffdf\004\uffdf\005\uffdf" +
    "\006\uffdf\007\uffdf\010\uffdf\012\uffdf\013\uffdf\016\uffdf\022" +
    "\uffdf\024\uffdf\030\uffdf\036\uffdf\042\uffdf\050\uffdf\051\uffdf" +
    "\052\uffdf\053\uffdf\054\uffdf\055\uffdf\056\uffdf\061\uffdf\062" +
    "\uffdf\070\uffdf\076\uffdf\101\uffdf\001\002\000\016\003\060" +
    "\024\063\036\066\061\252\070\043\076\057\001\002\000" +
    "\006\061\073\102\074\001\002\000\066\003\uffe0\004\uffe0" +
    "\005\uffe0\006\uffe0\007\uffe0\010\uffe0\012\uffe0\013\uffe0\016" +
    "\uffe0\022\uffe0\024\uffe0\030\uffe0\036\uffe0\042\uffe0\050\uffe0" +
    "\051\uffe0\052\uffe0\053\uffe0\054\uffe0\055\uffe0\056\uffe0\061" +
    "\uffe0\062\uffe0\070\uffe0\076\uffe0\101\uffe0\001\002\000\054" +
    "\003\uffc4\004\uffc4\005\uffc4\006\uffc4\007\uffc4\010\uffc4\012" +
    "\uffc4\013\uffc4\016\uffc4\024\uffc4\036\uffc4\052\013\053\007" +
    "\054\011\055\017\056\010\061\uffc4\062\uffc4\070\uffc4\076" +
    "\uffc4\101\uffcc\001\002\000\022\003\uffa9\024\uffa9\027\uffa9" +
    "\036\uffa9\061\uffa9\070\uffa9\076\uffa9\077\uffa9\001\002\000" +
    "\004\061\077\001\002\000\022\003\uffab\024\uffab\027\uffab" +
    "\036\uffab\061\uffab\070\uffab\076\uffab\077\uffab\001\002\000" +
    "\022\003\uffa7\024\uffa7\027\uffa7\036\uffa7\061\uffa7\070\uffa7" +
    "\076\uffa7\077\uffa7\001\002\000\006\061\073\102\074\001" +
    "\002\000\022\003\uffa3\024\uffa3\027\uffa3\036\uffa3\061\uffa3" +
    "\070\uffa3\076\uffa3\077\uffa3\001\002\000\022\003\uff9a\024" +
    "\uff9a\027\uff9a\036\uff9a\061\uff9a\070\uff9a\076\uff9a\077\uff9a" +
    "\001\002\000\004\103\075\001\002\000\006\061\073\102" +
    "\074\001\002\000\022\003\uff99\024\uff99\027\uff99\036\uff99" +
    "\061\uff99\070\uff99\076\uff99\077\uff99\001\002\000\004\076" +
    "\100\001\002\000\030\004\045\005\062\006\042\007\040" +
    "\010\054\012\071\013\044\016\051\061\102\062\052\077" +
    "\uff8e\001\002\000\004\077\110\001\002\000\006\061\073" +
    "\102\074\001\002\000\006\027\104\077\uff8c\001\002\000" +
    "\030\004\045\005\062\006\042\007\040\010\054\012\071" +
    "\013\044\016\051\061\102\062\052\077\uff8e\001\002\000" +
    "\004\077\uff8f\001\002\000\004\077\uff8d\001\002\000\022" +
    "\003\uff9f\024\uff9f\027\uff9f\036\uff9f\061\uff9f\070\uff9f\076" +
    "\uff9f\077\uff9f\001\002\000\004\100\111\001\002\000\036" +
    "\004\uff95\005\uff95\006\uff95\007\uff95\010\uff95\012\uff95\013" +
    "\uff95\016\uff95\042\uff95\050\uff95\051\uff95\061\uff95\062\uff95" +
    "\101\uff95\001\002\000\036\004\045\005\062\006\042\007" +
    "\040\010\054\012\071\013\044\016\051\042\115\050\122" +
    "\051\116\061\117\062\052\101\ufffe\001\002\000\010\003" +
    "\uff83\024\uff83\070\uff83\001\002\000\010\003\uff87\024\uff87" +
    "\070\uff87\001\002\000\036\004\ufffb\005\ufffb\006\ufffb\007" +
    "\ufffb\010\ufffb\012\ufffb\013\ufffb\016\ufffb\042\ufffb\050\ufffb" +
    "\051\ufffb\061\ufffb\062\ufffb\101\ufffb\001\002\000\032\004" +
    "\045\005\062\006\042\007\040\010\054\012\071\013\044" +
    "\016\051\050\122\051\116\061\117\062\052\001\002\000" +
    "\012\003\uff80\023\137\024\uff80\070\uff80\001\002\000\010" +
    "\003\060\024\063\070\043\001\002\000\010\003\uff85\024" +
    "\uff85\070\uff85\001\002\000\006\003\060\024\063\001\002" +
    "\000\036\004\045\005\062\006\042\007\040\010\054\012" +
    "\071\013\044\016\051\042\115\050\122\051\116\061\117" +
    "\062\052\101\ufffe\001\002\000\004\101\uff94\001\002\000" +
    "\036\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\012\ufffc" +
    "\013\ufffc\016\ufffc\042\ufffc\050\ufffc\051\ufffc\061\ufffc\062" +
    "\ufffc\101\ufffc\001\002\000\036\004\ufffd\005\ufffd\006\ufffd" +
    "\007\ufffd\010\ufffd\012\ufffd\013\ufffd\016\ufffd\042\ufffd\050" +
    "\ufffd\051\ufffd\061\ufffd\062\ufffd\101\ufffd\001\002\000\010" +
    "\003\uff86\024\uff86\070\uff86\001\002\000\010\003\uff88\024" +
    "\uff88\070\uff88\001\002\000\010\003\uff84\024\uff84\070\uff84" +
    "\001\002\000\004\101\133\001\002\000\054\003\uff93\004" +
    "\uff93\005\uff93\006\uff93\007\uff93\010\uff93\012\uff93\013\uff93" +
    "\016\uff93\024\uff93\036\uff93\052\uff93\053\uff93\054\uff93\055" +
    "\uff93\056\uff93\061\uff93\062\uff93\070\uff93\076\uff93\101\uff93" +
    "\001\002\000\004\101\uffff\001\002\000\036\004\uff89\005" +
    "\uff89\006\uff89\007\uff89\010\uff89\012\uff89\013\uff89\016\uff89" +
    "\042\uff89\050\uff89\051\uff89\061\uff89\062\uff89\101\uff89\001" +
    "\002\000\036\004\uff8b\005\uff8b\006\uff8b\007\uff8b\010\uff8b" +
    "\012\uff8b\013\uff8b\016\uff8b\042\uff8b\050\uff8b\051\uff8b\061" +
    "\uff8b\062\uff8b\101\uff8b\001\002\000\004\061\141\001\002" +
    "\000\010\003\uff82\024\uff82\070\uff82\001\002\000\014\003" +
    "\uff80\023\137\024\uff80\070\uff80\076\142\001\002\000\034" +
    "\011\156\015\173\017\152\020\161\025\170\035\163\057" +
    "\147\060\165\061\155\063\164\076\160\077\172\100\145" +
    "\001\002\000\010\003\uff81\024\uff81\070\uff81\001\002\000" +
    "\010\003\uff7e\024\uff7e\070\uff7e\001\002\000\034\011\156" +
    "\015\173\017\152\020\161\025\170\035\163\057\147\060" +
    "\165\061\155\063\164\076\160\100\145\101\240\001\002" +
    "\000\004\077\235\001\002\000\024\003\uffed\024\uffed\027" +
    "\uffed\064\uffed\065\uffed\066\uffed\067\uffed\077\uffed\101\uffed" +
    "\001\002\000\010\003\uff7f\024\uff7f\070\uff7f\001\002\000" +
    "\014\003\uffc1\024\uffc1\027\uffc1\077\uffc1\101\uffc1\001\002" +
    "\000\014\003\uffad\024\uffad\027\uffad\077\uffad\101\uffad\001" +
    "\002\000\016\003\ufffa\024\ufffa\027\ufffa\064\224\077\ufffa" +
    "\101\ufffa\001\002\000\014\003\uffbf\024\uffbf\027\uffbf\077" +
    "\uffbf\101\uffbf\001\002\000\026\003\ufff6\023\230\024\ufff6" +
    "\027\ufff6\064\ufff6\065\ufff6\066\ufff6\067\ufff6\077\ufff6\101" +
    "\ufff6\001\002\000\014\003\uffbd\024\uffbd\027\uffbd\077\uffbd" +
    "\101\uffbd\001\002\000\014\003\uffb1\024\uffb1\027\uffb1\077" +
    "\uffb1\101\uffb1\001\002\000\014\057\147\060\165\061\155" +
    "\063\164\076\160\001\002\000\014\003\uffac\024\uffac\027" +
    "\uffac\077\uffac\101\uffac\001\002\000\014\003\uffb0\024\uffb0" +
    "\027\uffb0\077\uffb0\101\uffb0\001\002\000\004\061\211\001" +
    "\002\000\024\003\uffec\024\uffec\027\uffec\064\uffec\065\uffec" +
    "\066\uffec\067\uffec\077\uffec\101\uffec\001\002\000\024\003" +
    "\uffee\024\uffee\027\uffee\064\uffee\065\uffee\066\uffee\067\uffee" +
    "\077\uffee\101\uffee\001\002\000\014\003\uffc0\024\uffc0\027" +
    "\uffc0\077\uffc0\101\uffc0\001\002\000\024\003\ufff4\024\ufff4" +
    "\027\ufff4\064\200\065\177\066\176\067\201\077\ufff4\101" +
    "\ufff4\001\002\000\004\014\174\001\002\000\014\003\uffbe" +
    "\024\uffbe\027\uffbe\077\uffbe\101\uffbe\001\002\000\010\003" +
    "\uff7c\024\uff7c\070\uff7c\001\002\000\014\003\uffae\024\uffae" +
    "\027\uffae\077\uffae\101\uffae\001\002\000\004\025\175\001" +
    "\002\000\014\003\uffaf\024\uffaf\027\uffaf\077\uffaf\101\uffaf" +
    "\001\002\000\014\057\147\060\165\061\155\063\164\076" +
    "\202\001\002\000\014\057\147\060\165\061\155\063\164" +
    "\076\202\001\002\000\014\057\147\060\165\061\155\063" +
    "\164\076\202\001\002\000\014\057\147\060\165\061\155" +
    "\063\164\076\202\001\002\000\014\057\147\060\165\061" +
    "\155\063\164\076\202\001\002\000\024\003\ufff1\024\ufff1" +
    "\027\ufff1\064\ufff1\065\ufff1\066\ufff1\067\ufff1\077\ufff1\101" +
    "\ufff1\001\002\000\014\064\200\065\177\066\176\067\201" +
    "\077\205\001\002\000\024\003\uffef\024\uffef\027\uffef\064" +
    "\uffef\065\uffef\066\uffef\067\uffef\077\uffef\101\uffef\001\002" +
    "\000\024\003\ufff3\024\ufff3\027\ufff3\064\ufff3\065\ufff3\066" +
    "\176\067\201\077\ufff3\101\ufff3\001\002\000\024\003\ufff2" +
    "\024\ufff2\027\ufff2\064\ufff2\065\ufff2\066\176\067\201\077" +
    "\ufff2\101\ufff2\001\002\000\024\003\ufff0\024\ufff0\027\ufff0" +
    "\064\ufff0\065\ufff0\066\ufff0\067\ufff0\077\ufff0\101\ufff0\001" +
    "\002\000\004\076\212\001\002\000\034\011\156\015\173" +
    "\017\152\020\161\025\170\035\163\057\147\060\165\061" +
    "\155\063\164\076\160\077\216\100\145\001\002\000\004" +
    "\077\222\001\002\000\006\027\217\077\uffb6\001\002\000" +
    "\014\003\uffbb\024\uffbb\027\uffbb\077\uffbb\101\uffbb\001\002" +
    "\000\014\003\uffb9\024\uffb9\027\uffb9\077\uffb9\101\uffb9\001" +
    "\002\000\032\011\156\015\173\017\152\020\161\025\170" +
    "\035\163\057\147\060\165\061\155\063\164\076\160\100" +
    "\145\001\002\000\004\077\uffb8\001\002\000\004\077\uffb7" +
    "\001\002\000\014\003\uffba\024\uffba\027\uffba\077\uffba\101" +
    "\uffba\001\002\000\006\064\224\077\225\001\002\000\004" +
    "\076\226\001\002\000\016\003\ufff8\024\ufff8\027\ufff8\064" +
    "\ufff8\077\ufff8\101\ufff8\001\002\000\004\076\226\001\002" +
    "\000\016\003\ufff9\024\ufff9\027\ufff9\064\ufff9\077\ufff9\101" +
    "\ufff9\001\002\000\004\061\232\001\002\000\024\003\uffeb" +
    "\024\uffeb\027\uffeb\064\uffeb\065\uffeb\066\uffeb\067\uffeb\077" +
    "\uffeb\101\uffeb\001\002\000\026\003\ufff6\023\230\024\ufff6" +
    "\027\ufff6\064\ufff6\065\ufff6\066\ufff6\067\ufff6\077\ufff6\101" +
    "\ufff6\001\002\000\024\003\ufff7\024\ufff7\027\ufff7\064\ufff7" +
    "\065\ufff7\066\ufff7\067\ufff7\077\ufff7\101\ufff7\001\002\000" +
    "\024\003\ufff5\024\ufff5\027\ufff5\064\ufff5\065\ufff5\066\ufff5" +
    "\067\ufff5\077\ufff5\101\ufff5\001\002\000\010\003\uff7d\024" +
    "\uff7d\070\uff7d\001\002\000\006\027\241\101\uffb2\001\002" +
    "\000\014\003\uffbc\024\uffbc\027\uffbc\077\uffbc\101\uffbc\001" +
    "\002\000\014\003\uffb4\024\uffb4\027\uffb4\077\uffb4\101\uffb4" +
    "\001\002\000\032\011\156\015\173\017\152\020\161\025" +
    "\170\035\163\057\147\060\165\061\155\063\164\076\160" +
    "\100\145\001\002\000\004\101\243\001\002\000\014\003" +
    "\uffb5\024\uffb5\027\uffb5\077\uffb5\101\uffb5\001\002\000\006" +
    "\027\241\101\uffb2\001\002\000\004\101\uffb3\001\002\000" +
    "\036\004\uff8a\005\uff8a\006\uff8a\007\uff8a\010\uff8a\012\uff8a" +
    "\013\uff8a\016\uff8a\042\uff8a\050\uff8a\051\uff8a\061\uff8a\062" +
    "\uff8a\101\uff8a\001\002\000\004\101\uffc9\001\002\000\022" +
    "\003\uff9d\024\uff9d\027\uff9d\036\uff9d\061\uff9d\070\uff9d\076" +
    "\uff9d\077\uff9d\001\002\000\004\101\uffcb\001\002\000\004" +
    "\076\253\001\002\000\030\004\045\005\062\006\042\007" +
    "\040\010\054\012\071\013\044\016\051\061\102\062\052" +
    "\077\uff8e\001\002\000\004\077\255\001\002\000\004\100" +
    "\256\001\002\000\036\004\uff92\005\uff92\006\uff92\007\uff92" +
    "\010\uff92\012\uff92\013\uff92\016\uff92\042\uff92\050\uff92\051" +
    "\uff92\061\uff92\062\uff92\101\uff92\001\002\000\036\004\045" +
    "\005\062\006\042\007\040\010\054\012\071\013\044\016" +
    "\051\042\115\050\122\051\116\061\117\062\052\101\ufffe" +
    "\001\002\000\004\101\uff91\001\002\000\004\101\262\001" +
    "\002\000\054\003\uff90\004\uff90\005\uff90\006\uff90\007\uff90" +
    "\010\uff90\012\uff90\013\uff90\016\uff90\024\uff90\036\uff90\052" +
    "\uff90\053\uff90\054\uff90\055\uff90\056\uff90\061\uff90\062\uff90" +
    "\070\uff90\076\uff90\101\uff90\001\002\000\004\077\264\001" +
    "\002\000\004\100\265\001\002\000\036\004\uff98\005\uff98" +
    "\006\uff98\007\uff98\010\uff98\012\uff98\013\uff98\016\uff98\042" +
    "\uff98\050\uff98\051\uff98\061\uff98\062\uff98\101\uff98\001\002" +
    "\000\036\004\045\005\062\006\042\007\040\010\054\012" +
    "\071\013\044\016\051\042\115\050\122\051\116\061\117" +
    "\062\052\101\ufffe\001\002\000\004\101\uff97\001\002\000" +
    "\004\101\271\001\002\000\054\003\uff96\004\uff96\005\uff96" +
    "\006\uff96\007\uff96\010\uff96\012\uff96\013\uff96\016\uff96\024" +
    "\uff96\036\uff96\052\uff96\053\uff96\054\uff96\055\uff96\056\uff96" +
    "\061\uff96\062\uff96\070\uff96\076\uff96\101\uff96\001\002\000" +
    "\022\003\uffa4\024\uffa4\027\uffa4\036\uffa4\061\uffa4\070\uffa4" +
    "\076\uffa4\077\uffa4\001\002\000\022\003\uffa0\024\uffa0\027" +
    "\uffa0\036\uffa0\061\uffa0\070\uffa0\076\uffa0\077\uffa0\001\002" +
    "\000\022\003\uffa1\024\uffa1\027\uffa1\036\uffa1\061\uffa1\070" +
    "\uffa1\076\uffa1\077\uffa1\001\002\000\022\003\uff9e\024\uff9e" +
    "\027\uff9e\036\uff9e\061\uff9e\070\uff9e\076\uff9e\077\uff9e\001" +
    "\002\000\022\003\uffa2\024\uffa2\027\uffa2\036\uffa2\061\uffa2" +
    "\070\uffa2\076\uffa2\077\uffa2\001\002\000\006\003\060\024" +
    "\063\001\002\000\062\003\uffc3\004\uffc3\005\uffc3\006\uffc3" +
    "\007\uffc3\010\uffc3\012\uffc3\013\uffc3\016\uffc3\024\uffc3\036" +
    "\uffc3\042\uffc3\050\uffc3\051\uffc3\052\uffc3\053\uffc3\054\uffc3" +
    "\055\uffc3\056\uffc3\061\uffc3\062\uffc3\070\uffc3\076\uffc3\101" +
    "\uffc3\001\002\000\022\003\uff9c\024\uff9c\027\uff9c\036\uff9c" +
    "\061\uff9c\070\uff9c\076\uff9c\077\uff9c\001\002\000\022\003" +
    "\uff9b\024\uff9b\027\uff9b\036\uff9b\061\uff9b\070\uff9b\076\uff9b" +
    "\077\uff9b\001\002\000\004\101\uffc8\001\002\000\004\030" +
    "\uffdd\001\002\000\004\030\uffda\001\002\000\050\003\uffd9" +
    "\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9\012\uffd9\013" +
    "\uffd9\016\uffd9\024\uffd9\030\uffd9\036\uffd9\052\uffd9\053\uffd9" +
    "\054\uffd9\061\uffd9\062\uffd9\070\uffd9\076\uffd9\001\002\000" +
    "\050\003\uffd7\004\uffd7\005\uffd7\006\uffd7\007\uffd7\010\uffd7" +
    "\012\uffd7\013\uffd7\016\uffd7\024\uffd7\030\uffd7\036\uffd7\052" +
    "\uffd7\053\uffd7\054\uffd7\061\uffd7\062\uffd7\070\uffd7\076\uffd7" +
    "\001\002\000\004\002\001\001\002\000\010\003\060\023" +
    "\312\024\063\001\002\000\004\061\331\001\002\000\020" +
    "\022\315\030\uffe7\052\uffe7\053\uffe7\054\uffe7\055\uffe7\056" +
    "\uffe7\001\002\000\020\022\uffe1\030\uffe1\052\uffe1\053\uffe1" +
    "\054\uffe1\055\uffe1\056\uffe1\001\002\000\004\061\317\001" +
    "\002\000\016\030\uffea\052\uffea\053\uffea\054\uffea\055\uffea" +
    "\056\uffea\001\002\000\010\003\060\023\320\024\063\001" +
    "\002\000\006\061\325\066\324\001\002\000\020\022\315" +
    "\030\uffe7\052\uffe7\053\uffe7\054\uffe7\055\uffe7\056\uffe7\001" +
    "\002\000\020\022\uffe5\030\uffe5\052\uffe5\053\uffe5\054\uffe5" +
    "\055\uffe5\056\uffe5\001\002\000\016\030\uffe8\052\uffe8\053" +
    "\uffe8\054\uffe8\055\uffe8\056\uffe8\001\002\000\006\003\060" +
    "\024\063\001\002\000\010\003\060\023\320\024\063\001" +
    "\002\000\020\022\uffe6\030\uffe6\052\uffe6\053\uffe6\054\uffe6" +
    "\055\uffe6\056\uffe6\001\002\000\020\022\uffe3\030\uffe3\052" +
    "\uffe3\053\uffe3\054\uffe3\055\uffe3\056\uffe3\001\002\000\020" +
    "\022\uffe4\030\uffe4\052\uffe4\053\uffe4\054\uffe4\055\uffe4\056" +
    "\uffe4\001\002\000\010\003\060\023\312\024\063\001\002" +
    "\000\020\022\uffe2\030\uffe2\052\uffe2\053\uffe2\054\uffe2\055" +
    "\uffe2\056\uffe2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\330\000\006\002\004\006\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\014\015\016\011\017\013" +
    "\020\014\001\001\000\002\001\001\000\004\050\305\001" +
    "\001\000\002\001\001\000\004\017\304\001\001\000\002" +
    "\001\001\000\004\016\303\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\051\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\074\024\001\001\000\014\015\026\016\027\017\031" +
    "\024\025\043\030\001\001\000\034\010\055\021\040\022" +
    "\054\023\063\030\066\031\036\032\045\033\064\034\052" +
    "\035\067\036\046\041\060\044\035\001\001\000\004\075" +
    "\033\001\001\000\006\017\031\043\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\015\302\016\027\017\031" +
    "\024\025\043\030\001\001\000\002\001\001\000\004\047" +
    "\301\001\001\000\002\001\001\000\004\047\300\001\001" +
    "\000\024\003\166\004\161\005\156\025\150\026\165\027" +
    "\153\040\276\052\152\057\170\001\001\000\004\047\275" +
    "\001\001\000\004\047\274\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\047\106\001\001\000\004\047\273" +
    "\001\001\000\004\047\272\001\001\000\002\001\001\000" +
    "\004\047\271\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\030\066\031\036\032\045\033\064\034\052\035" +
    "\067\036\046\041\102\045\262\001\001\000\002\001\001" +
    "\000\012\010\055\022\250\023\063\044\035\001\001\000" +
    "\004\047\247\001\001\000\002\001\001\000\014\015\246" +
    "\016\027\017\031\024\025\043\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\047\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\047\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\030\066\031\036\032" +
    "\045\033\064\034\052\035\067\036\046\041\102\045\100" +
    "\001\001\000\002\001\001\000\004\047\106\001\001\000" +
    "\004\046\104\001\001\000\024\030\066\031\036\032\045" +
    "\033\064\034\052\035\067\036\046\041\102\045\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\100\111\001\001\000\030\030" +
    "\127\031\112\032\113\033\126\034\120\035\130\060\125" +
    "\061\122\062\123\067\117\073\124\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\030\127" +
    "\031\112\032\113\033\126\034\120\035\130\060\245\067" +
    "\117\001\001\000\004\064\137\001\001\000\006\010\055" +
    "\023\135\001\001\000\002\001\001\000\004\010\134\001" +
    "\001\000\030\030\127\031\112\032\113\033\126\034\120" +
    "\035\130\060\125\061\122\062\133\067\117\073\124\001" +
    "\001\000\004\101\131\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\064\143\066\142\001\001\000\026" +
    "\003\166\004\161\005\156\025\150\026\165\027\153\040" +
    "\145\052\152\057\170\070\147\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\003\166\004\161\005\156\025" +
    "\150\026\165\027\153\040\235\052\152\055\236\057\170" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\056\230\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\203\052\222\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\207\001\001\000\004\003\206\001\001\000" +
    "\004\003\205\001\001\000\004\003\202\001\001\000\004" +
    "\003\203\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\003\166\004\161\005" +
    "\156\025\150\026\165\027\153\037\212\040\213\052\152" +
    "\054\214\057\170\001\001\000\002\001\001\000\004\042" +
    "\217\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\003\166\004\161\005\156\025\150\026\165\027\153\037" +
    "\220\040\213\052\152\057\170\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\052\226\001\001\000\002\001\001\000\004\052\222" +
    "\001\001\000\002\001\001\000\004\053\232\001\001\000" +
    "\002\001\001\000\004\056\233\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\063\241\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\003\166" +
    "\004\161\005\156\025\150\026\165\027\153\040\243\052" +
    "\152\057\170\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\063\244\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\030\066\031\036\032\045\033" +
    "\064\034\052\035\067\036\046\041\102\045\253\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\102\256\001" +
    "\001\000\030\030\127\031\112\032\113\033\126\034\120" +
    "\035\130\060\125\061\122\062\257\067\117\073\124\001" +
    "\001\000\004\103\260\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\076" +
    "\265\001\001\000\030\030\127\031\112\032\113\033\126" +
    "\034\120\035\130\060\125\061\122\062\266\067\117\073" +
    "\124\001\001\000\004\077\267\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\277\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\313\013\312\001\001\000\002\001\001" +
    "\000\004\007\315\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\321\011\320\001\001" +
    "\000\004\012\325\001\001\000\004\007\322\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\327\001\001" +
    "\000\006\010\321\011\326\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\313\013\331" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        
        Sintactico(Lexico lexico){
            super(lexico);
        }

        public void syntax_error(Symbol cur_token) {
        System.out.println("El error es el simbolo: " + sym.terminalNames[cur_token.sym]);
        System.out.println(String.format("En la posicion: %d, %d", cur_token.left, cur_token.right));
        }
        /*public void unrecovered_syntax_error(Symbol cur_token) {
            if (cur_token.sym == sym.EOF) {
             System.out.println("public void unrecoveredsyntax_error!!!!!!!!!!!!!!");
            }
        }*/


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= encabezado clase 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // localMetodo ::= local localMetodo 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("localMetodo",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // localMetodo ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("localMetodo",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // local ::= variableLocal 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("local",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // local ::= sentenciaControl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("local",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sentenciaControl ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciaControl",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // s ::= os 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("s",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // os ::= os SUMA os 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("os",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // os ::= P_APERTURA os P_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("os",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // idDato ::= PUNTO idDatoFac 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("idDato",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // idDato ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("idDato",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // idDatoFac ::= ID idDato 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("idDatoFac",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // j ::= operaionNumerica 
            {
              String RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("j",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // operaionNumerica ::= operaionNumerica SUMA operaionNumerica 
            {
              String RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operaionNumerica",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // operaionNumerica ::= operaionNumerica RESTA operaionNumerica 
            {
              String RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operaionNumerica",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // operaionNumerica ::= operaionNumerica DIVISION operaionNumerica 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operaionNumerica",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // operaionNumerica ::= operaionNumerica MULTIPLICACION operaionNumerica 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operaionNumerica",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // operaionNumerica ::= P_APERTURA operaionNumerica P_CIERRE 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operaionNumerica",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // operaionNumerica ::= ENTERO 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operaionNumerica",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // operaionNumerica ::= DECIMAL 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operaionNumerica",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // operaionNumerica ::= TEXT 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operaionNumerica",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // operaionNumerica ::= ID idDato 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operaionNumerica",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // encabezado ::= PACKAGE ID pc importacion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("encabezado",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // encabezado ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("encabezado",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // importacion ::= IMPORT ID sp importacion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("importacion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // importacion ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("importacion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sp ::= PUNTO spp 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sp",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sp ::= p 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sp",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // spp ::= MULTIPLICACION p 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("spp",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // spp ::= ID sp 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("spp",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // pc ::= PUNTO ID pc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("pc",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // pc ::= p 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("pc",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // p ::= PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("p",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // p ::= error 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("p",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // v ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("v",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // v ::= staticCfianl vc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("v",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // v ::= staticCfianl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("v",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // v ::= vc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("v",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // v ::= vc staticCfianl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("v",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // staticCfianl ::= STATIC staticFactori 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("staticCfianl",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // staticCfianl ::= FINAL finalFactori 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("staticCfianl",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // staticFactori ::= FINAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("staticFactori",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // staticFactori ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("staticFactori",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // finalFactori ::= STATIC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("finalFactori",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // finalFactori ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("finalFactori",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // vc ::= PUBLIC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vc",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // vc ::= PRIVATE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vc",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // vc ::= PROTECTED 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vc",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$0 ::= 
            {
              Object RESULT =null;
System.out.println("****INICIO CLASES");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",58, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
System.out.println("****FINAL CLASES");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$1",59, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // clase ::= v CLASS ID L_APERTURA NT$0 internoClase NT$1 L_CIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("clase",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // internoClase ::= vGlobal internoClaseFa 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("internoClase",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // internoClase ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("internoClase",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // internoClaseFa ::= variableID ayuda 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("internoClaseFa",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // internoClaseFa ::= ayuda 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("internoClaseFa",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ayuda ::= asignacionVariable internoClase 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ayuda",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ayuda ::= metodo internoClase 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ayuda",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // vGlobal ::= vc vGlobalFac 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vGlobal",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // vGlobal ::= vGlobalFac 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vGlobal",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // vGlobalFac ::= staticCfianl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vGlobalFac",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // vGlobalFac ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vGlobalFac",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // asignacionVariable ::= IGUAL tDatos p 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacionVariable",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // asignacionVariable ::= p 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacionVariable",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // tDatos ::= numEnteroDecimal 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatos",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // tDatos ::= vChar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatos",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // tDatos ::= trueOfalse 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatos",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // tDatos ::= textoIngresoado 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatos",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // tDatos ::= F 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatos",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // tDatos ::= L_APERTURA lCon 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatos",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // tDatos ::= NEW ID P_APERTURA tFact 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatos",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // tFact ::= dSeguidoF P_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tFact",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // tFact ::= P_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tFact",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // dSeguidoF ::= tDatos objectInst 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dSeguidoF",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // objectInst ::= COMA dSeguidoF 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("objectInst",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // objectInst ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("objectInst",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // lCon ::= tDatos lConFact L_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lCon",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // lCon ::= L_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lCon",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // lConFact ::= COMA tDatos lConFact 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lConFact",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // lConFact ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lConFact",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // textoIngresoado ::= s 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("textoIngresoado",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // numEnteroDecimal ::= j 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("numEnteroDecimal",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // vChar ::= SIMPLE_COMILLA CARACTER SIMPLE_COMILLA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vChar",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // vChar ::= CHARTN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vChar",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // trueOfalse ::= TRUE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("trueOfalse",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // trueOfalse ::= FALSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("trueOfalse",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // variableID ::= numFloat 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableID",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // variableID ::= numDouble 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableID",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // variableID ::= variableChar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableID",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // variableID ::= variableBoolean 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableID",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // variableID ::= variableStirng 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableID",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // variableID ::= variableObject 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableID",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // variableID ::= numEntero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableID",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // numFloat ::= FLOAT onlyIDArray 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("numFloat",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // numDouble ::= DOUBLE onlyIDArray 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("numDouble",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // variableChar ::= CHAR onlyIDArray 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableChar",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // variableBoolean ::= BOOLEAN onlyIDArray 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableBoolean",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // variableStirng ::= STRING onlyIDArray 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableStirng",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // variableObject ::= ID onlyIDArray 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableObject",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // numEntero ::= BYTE onlyIDArray 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("numEntero",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // numEntero ::= SHORT onlyIDArray 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("numEntero",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // numEntero ::= INT onlyIDArray 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("numEntero",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // numEntero ::= LONG onlyIDArray 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("numEntero",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // onlyIDArray ::= ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("onlyIDArray",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // onlyIDArray ::= C_APERTURA C_CIERRE onlyIDArray 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("onlyIDArray",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // NT$2 ::= 
            {
              Object RESULT =null;
System.out.println("**********************************************************INICIO METODO*************************");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$2",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
System.out.println("****FINAL METODO");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$3",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // metodo ::= P_APERTURA pMetodoS P_CIERRE L_APERTURA NT$2 localMetodo NT$3 L_CIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("metodo",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // NT$4 ::= 
            {
              Object RESULT =null;
System.out.println("**********************************************************INICIO METODO*************************");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$4",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
System.out.println("****FINAL METODO");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$5",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // metodo ::= VOID ID P_APERTURA pMetodoS P_CIERRE L_APERTURA NT$4 localMetodo NT$5 L_CIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("metodo",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // NT$6 ::= 
            {
              Object RESULT =null;
System.out.println("**********************************************************INICIO METODO*************************");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$6",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
System.out.println("****FINAL METODO");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$7",65, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // metodo ::= ID P_APERTURA pMetodoS P_CIERRE L_APERTURA NT$6 localMetodo NT$7 L_CIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("metodo",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // pMetodoS ::= variableID pMetodoSP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("pMetodoS",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // pMetodoS ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("pMetodoS",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // pMetodoSP ::= COMA pMetodoS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("pMetodoSP",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // pMetodoSP ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("pMetodoSP",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // variableLocal ::= variableIDLocal asignacionVariable 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableLocal",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // variableLocal ::= RETURN variableLocal 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableLocal",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // variableLocal ::= BREAK p 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableLocal",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // variableIDLocal ::= numFloat 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableIDLocal",53, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // variableIDLocal ::= numDouble 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableIDLocal",53, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // variableIDLocal ::= variableChar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableIDLocal",53, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // variableIDLocal ::= variableBoolean 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableIDLocal",53, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // variableIDLocal ::= variableStirng 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableIDLocal",53, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // variableIDLocal ::= numEntero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableIDLocal",53, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // variableIDLocal ::= ID loclaMetodFacto 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableIDLocal",53, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // loclaMetodFacto ::= PUNTO ID variableObjectUsarCrear 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("loclaMetodFacto",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // loclaMetodFacto ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("loclaMetodFacto",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // variableObjectUsarCrear ::= P_APERTURA variableSet 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableObjectUsarCrear",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // variableObjectUsarCrear ::= loclaMetodFacto 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableObjectUsarCrear",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // variableSet ::= tDatos P_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableSet",54, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // variableSet ::= P_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableSet",54, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
