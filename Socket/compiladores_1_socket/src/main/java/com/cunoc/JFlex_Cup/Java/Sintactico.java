
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.cunoc.JFlex_Cup.Java;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import com.cunoc.Server.Console;
import com.cunoc.JFlex_Cup.Java.repetition.ListType;
import com.cunoc.JFlex_Cup.Java.repetition.Method;
import com.cunoc.JFlex_Cup.Java.repetition.Variable;
import com.cunoc.JFlex_Cup.Java.repetition.ClassSyntax;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0101\000\002\002\004\000\002\002\004\000\002\005" +
    "\006\000\002\005\003\000\002\012\005\000\002\012\003" +
    "\000\002\006\006\000\002\006\002\000\002\010\004\000" +
    "\002\010\003\000\002\011\004\000\002\011\004\000\002" +
    "\007\003\000\002\007\003\000\002\132\002\000\002\015" +
    "\012\000\002\024\002\000\002\024\006\000\002\024\006" +
    "\000\002\025\005\000\002\025\002\000\002\021\004\000" +
    "\002\021\004\000\002\013\003\000\002\013\002\000\002" +
    "\014\003\000\002\014\002\000\002\020\004\000\002\020" +
    "\004\000\002\054\003\000\002\054\002\000\002\055\003" +
    "\000\002\055\002\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\016\004\000\002\016\002\000\002" +
    "\027\004\000\002\027\003\000\002\046\003\000\002\046" +
    "\002\000\002\022\004\000\002\022\003\000\002\133\002" +
    "\000\002\023\005\000\002\134\002\000\002\023\005\000" +
    "\002\044\003\000\002\044\003\000\002\044\003\000\002" +
    "\044\003\000\002\044\003\000\002\044\003\000\002\044" +
    "\003\000\002\126\003\000\002\126\003\000\002\126\003" +
    "\000\002\126\003\000\002\126\003\000\002\126\003\000" +
    "\002\126\003\000\002\126\003\000\002\126\003\000\002" +
    "\126\003\000\002\135\002\000\002\031\005\000\002\136" +
    "\002\000\002\033\005\000\002\137\002\000\002\034\005" +
    "\000\002\140\002\000\002\035\005\000\002\141\002\000" +
    "\002\040\005\000\002\142\002\000\002\041\005\000\002" +
    "\143\002\000\002\032\005\000\002\144\002\000\002\032" +
    "\005\000\002\145\002\000\002\032\005\000\002\146\002" +
    "\000\002\032\005\000\002\053\003\000\002\147\002\000" +
    "\002\053\006\000\002\026\005\000\002\026\003\000\002" +
    "\043\006\000\002\043\006\000\002\043\006\000\002\043" +
    "\006\000\002\043\006\000\002\043\006\000\002\043\007" +
    "\000\002\043\005\000\002\043\005\000\002\043\005\000" +
    "\002\043\005\000\002\043\005\000\002\043\003\000\002" +
    "\043\003\000\002\043\004\000\002\043\005\000\002\043" +
    "\003\000\002\043\003\000\002\043\004\000\002\043\004" +
    "\000\002\043\004\000\002\043\003\000\002\043\003\000" +
    "\002\043\004\000\002\043\003\000\002\127\004\000\002" +
    "\127\006\000\002\130\004\000\002\130\002\000\002\131" +
    "\003\000\002\131\002\000\002\124\003\000\002\124\003" +
    "\000\002\124\003\000\002\124\003\000\002\124\003\000" +
    "\002\124\003\000\002\124\002\000\002\114\002\000\002" +
    "\114\006\000\002\120\003\000\002\120\002\000\002\030" +
    "\005\000\002\030\003\000\002\057\004\000\002\057\003" +
    "\000\002\042\004\000\002\045\004\000\002\045\002\000" +
    "\002\060\005\000\002\060\003\000\002\065\005\000\002" +
    "\065\002\000\002\113\004\000\002\113\002\000\002\036" +
    "\003\000\002\036\002\000\002\037\003\000\002\037\002" +
    "\000\002\112\003\000\002\112\004\000\002\004\003\000" +
    "\002\003\002\000\002\121\005\000\002\122\003\000\002" +
    "\122\003\000\002\122\003\000\002\122\003\000\002\122" +
    "\002\000\002\123\004\000\002\123\004\000\002\123\003" +
    "\000\002\123\003\000\002\123\004\000\002\123\003\000" +
    "\002\073\004\000\002\061\004\000\002\061\006\000\002" +
    "\061\005\000\002\061\004\000\002\061\002\000\002\056" +
    "\004\000\002\074\003\000\002\150\002\000\002\047\011" +
    "\000\002\151\002\000\002\152\002\000\002\047\014\000" +
    "\002\153\002\000\002\047\012\000\002\154\002\000\002" +
    "\050\005\000\002\050\002\000\002\051\004\000\002\051" +
    "\002\000\002\064\004\000\002\064\002\000\002\063\003" +
    "\000\002\063\003\000\002\063\003\000\002\062\004\000" +
    "\002\075\004\000\002\075\003\000\002\075\003\000\002" +
    "\075\003\000\002\071\003\000\002\071\003\000\002\071" +
    "\003\000\002\071\003\000\002\071\003\000\002\071\003" +
    "\000\002\066\005\000\002\066\003\000\002\066\002\000" +
    "\002\070\004\000\002\070\003\000\002\072\005\000\002" +
    "\072\003\000\002\077\004\000\002\077\004\000\002\077" +
    "\010\000\002\052\005\000\002\052\002\000\002\125\005" +
    "\000\002\125\002\000\002\102\004\000\002\102\004\000" +
    "\002\102\003\000\002\102\004\000\002\102\006\000\002" +
    "\102\004\000\002\100\004\000\002\100\003\000\002\101" +
    "\004\000\002\101\003\000\002\067\005\000\002\067\004" +
    "\000\002\076\011\000\002\076\013\000\002\076\012\000" +
    "\002\076\011\000\002\076\006\000\002\115\007\000\002" +
    "\115\005\000\002\115\002\000\002\116\004\000\002\116" +
    "\003\000\002\117\003\000\002\117\003\000\002\104\006" +
    "\000\002\104\011\000\002\105\004\000\002\105\004\000" +
    "\002\103\003\000\002\103\003\000\002\103\003\000\002" +
    "\103\003\000\002\103\003\000\002\103\003\000\002\106" +
    "\004\000\002\106\005\000\002\107\004\000\002\107\003" +
    "\000\002\110\004\000\002\110\002\000\002\111\005\000" +
    "\002\111\012" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01c0\000\020\023\005\024\004\055\ufffa\056\ufffa\057" +
    "\ufffa\060\ufffa\061\ufffa\001\002\000\004\064\u01b9\001\002" +
    "\000\004\064\u01b2\001\002\000\014\055\ufffe\056\ufffe\057" +
    "\ufffe\060\ufffe\061\ufffe\001\002\000\004\002\u01b1\001\002" +
    "\000\014\055\015\056\011\057\013\060\021\061\012\001" +
    "\002\000\046\003\uffe0\004\uffe0\005\uffe0\006\uffe0\007\uffe0" +
    "\010\uffe0\012\uffe0\013\uffe0\016\uffe0\026\uffe0\032\uffe0\040" +
    "\uffe0\060\uffe0\061\uffe0\064\uffe0\065\uffe0\073\uffe0\101\uffe0" +
    "\001\002\000\052\003\uffe3\004\uffe3\005\uffe3\006\uffe3\007" +
    "\uffe3\010\uffe3\012\uffe3\013\uffe3\016\uffe3\026\uffe3\032\uffe3" +
    "\040\uffe3\055\uffe3\056\uffe3\057\uffe3\060\u01b0\064\uffe3\065" +
    "\uffe3\073\uffe3\101\uffe3\001\002\000\046\003\uffde\004\uffde" +
    "\005\uffde\006\uffde\007\uffde\010\uffde\012\uffde\013\uffde\016" +
    "\uffde\026\uffde\032\uffde\040\uffde\060\uffde\061\uffde\064\uffde" +
    "\065\uffde\073\uffde\101\uffde\001\002\000\010\032\uffe7\060" +
    "\021\061\012\001\002\000\046\003\uffdf\004\uffdf\005\uffdf" +
    "\006\uffdf\007\uffdf\010\uffdf\012\uffdf\013\uffdf\016\uffdf\026" +
    "\uffdf\032\uffdf\040\uffdf\060\uffdf\061\uffdf\064\uffdf\065\uffdf" +
    "\073\uffdf\101\uffdf\001\002\000\012\032\uffe9\055\015\056" +
    "\011\057\013\001\002\000\004\032\024\001\002\000\004" +
    "\002\000\001\002\000\052\003\uffe1\004\uffe1\005\uffe1\006" +
    "\uffe1\007\uffe1\010\uffe1\012\uffe1\013\uffe1\016\uffe1\026\uffe1" +
    "\032\uffe1\040\uffe1\055\uffe1\056\uffe1\057\uffe1\061\022\064" +
    "\uffe1\065\uffe1\073\uffe1\101\uffe1\001\002\000\050\003\uffe2" +
    "\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\012\uffe2\013" +
    "\uffe2\016\uffe2\026\uffe2\032\uffe2\040\uffe2\055\uffe2\056\uffe2" +
    "\057\uffe2\064\uffe2\065\uffe2\073\uffe2\101\uffe2\001\002\000" +
    "\050\003\uffe5\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5" +
    "\012\uffe5\013\uffe5\016\uffe5\026\uffe5\032\uffe5\040\uffe5\055" +
    "\uffe5\056\uffe5\057\uffe5\064\uffe5\065\uffe5\073\uffe5\101\uffe5" +
    "\001\002\000\004\064\025\001\002\000\010\034\ufff3\035" +
    "\ufff3\103\ufff3\001\002\000\010\034\030\035\031\103\ufff1" +
    "\001\002\000\004\103\043\001\002\000\004\064\040\001" +
    "\002\000\004\064\032\001\002\000\012\025\033\034\uffed" +
    "\035\uffed\103\uffed\001\002\000\004\064\036\001\002\000" +
    "\010\034\030\035\031\103\ufff1\001\002\000\004\103\uffef" +
    "\001\002\000\012\025\033\034\uffed\035\uffed\103\uffed\001" +
    "\002\000\010\034\uffee\035\uffee\103\uffee\001\002\000\012" +
    "\025\033\034\uffed\035\uffed\103\uffed\001\002\000\010\034" +
    "\030\035\031\103\ufff1\001\002\000\004\103\ufff0\001\002" +
    "\000\054\003\uffd8\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010" +
    "\uffd8\012\uffd8\013\uffd8\016\uffd8\026\uffd8\040\uffd8\055\015" +
    "\056\011\057\013\060\021\061\012\064\uffd8\065\uffd8\073" +
    "\uffd8\101\uffd8\104\uffdc\001\002\000\040\003\075\004\064" +
    "\005\077\006\061\007\055\010\072\012\106\013\063\016" +
    "\067\026\100\040\103\064\066\065\070\073\060\101\uff54" +
    "\001\002\000\004\104\052\001\002\000\044\003\uffd8\004" +
    "\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8\012\uffd8\013\uffd8" +
    "\016\uffd8\026\uffd8\040\uffd8\060\021\061\012\064\uffd8\065" +
    "\uffd8\073\uffd8\101\uffd8\001\002\000\040\003\uffda\004\uffda" +
    "\005\uffda\006\uffda\007\uffda\010\uffda\012\uffda\013\uffda\016" +
    "\uffda\026\uffda\040\uffda\064\uffda\065\uffda\073\uffda\101\uffda" +
    "\001\002\000\040\003\uffd9\004\uffd9\005\uffd9\006\uffd9\007" +
    "\uffd9\010\uffd9\012\uffd9\013\uffd9\016\uffd9\026\uffd9\040\uffd9" +
    "\064\uffd9\065\uffd9\073\uffd9\101\uffd9\001\002\000\040\003" +
    "\uffdb\004\uffdb\005\uffdb\006\uffdb\007\uffdb\010\uffdb\012\uffdb" +
    "\013\uffdb\016\uffdb\026\uffdb\040\uffdb\064\uffdb\065\uffdb\073" +
    "\uffdb\101\uffdb\001\002\000\004\002\ufff2\001\002\000\054" +
    "\003\uffd3\004\uffd3\005\uffd3\006\uffd3\007\uffd3\010\uffd3\012" +
    "\uffd3\013\uffd3\016\uffd3\026\uffd3\040\uffd3\055\uffd3\056\uffd3" +
    "\057\uffd3\060\uffd3\061\uffd3\064\uffd3\065\uffd3\073\uffd3\101" +
    "\uffd3\104\uffd3\001\002\000\022\003\uffcb\026\uffcb\031\uffcb" +
    "\040\uffcb\064\uffcb\073\uffcb\101\uffcb\102\uffcb\001\002\000" +
    "\006\064\uffae\105\uffae\001\002\000\004\104\uffdd\001\002" +
    "\000\004\101\u01a1\001\002\000\040\011\207\015\221\017" +
    "\205\020\212\021\211\027\220\037\214\062\202\063\215" +
    "\064\206\066\216\067\204\070\223\101\210\103\200\001" +
    "\002\000\006\064\uffb0\105\uffb0\001\002\000\022\003\uffd0" +
    "\026\uffd0\031\uffd0\040\uffd0\064\uffd0\073\uffd0\101\uffd0\102" +
    "\uffd0\001\002\000\006\064\uffbc\105\uffbc\001\002\000\006" +
    "\064\uffb4\105\uffb4\001\002\000\022\003\uffcc\026\uffcc\031" +
    "\uffcc\040\uffcc\064\uffcc\073\uffcc\101\uffcc\102\uffcc\001\002" +
    "\000\010\064\uffb6\101\uff4f\105\uffb6\001\002\000\006\064" +
    "\uffba\105\uffba\001\002\000\006\064\uffb8\105\uffb8\001\002" +
    "\000\022\003\uffce\026\uffce\031\uffce\040\uffce\064\uffce\073" +
    "\uffce\101\uffce\102\uffce\001\002\000\006\064\uffc0\105\uffc0" +
    "\001\002\000\004\104\uffd6\001\002\000\132\003\uffa8\004" +
    "\uffa8\005\uffa8\006\uffa8\007\uffa8\010\uffa8\011\uffa8\012\uffa8" +
    "\013\uffa8\015\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\026" +
    "\uffa8\027\uffa8\033\uffa8\036\uffa8\037\uffa8\040\uffa8\043\uffa8" +
    "\044\uffa8\045\uffa8\046\uffa8\050\uffa8\053\uffa8\054\uffa8\055" +
    "\uffa8\056\uffa8\057\uffa8\060\uffa8\061\uffa8\062\uffa8\063\uffa8" +
    "\064\uffa8\065\uffa8\066\uffa8\067\uffa8\070\uffa8\073\uffa8\101" +
    "\uffa8\102\uffa8\103\uffa8\104\uffa8\001\002\000\140\003\ufff4" +
    "\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012" +
    "\ufff4\013\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4" +
    "\024\ufff4\026\ufff4\027\ufff4\033\ufff4\036\ufff4\037\ufff4\040" +
    "\ufff4\043\ufff4\044\ufff4\045\ufff4\046\ufff4\050\ufff4\051\ufff4" +
    "\052\ufff4\053\ufff4\054\ufff4\055\ufff4\056\ufff4\057\ufff4\060" +
    "\ufff4\061\ufff4\062\ufff4\063\ufff4\064\ufff4\065\ufff4\066\ufff4" +
    "\067\ufff4\070\ufff4\073\ufff4\101\ufff4\102\ufff4\103\ufff4\104" +
    "\ufff4\001\002\000\016\003\075\026\100\040\103\064\u018b" +
    "\073\060\101\uff54\001\002\000\006\064\uffb2\105\uffb2\001" +
    "\002\000\140\003\ufff5\004\ufff5\005\ufff5\006\ufff5\007\ufff5" +
    "\010\ufff5\011\ufff5\012\ufff5\013\ufff5\015\ufff5\016\ufff5\017" +
    "\ufff5\020\ufff5\021\ufff5\024\ufff5\026\ufff5\027\ufff5\033\ufff5" +
    "\036\ufff5\037\ufff5\040\ufff5\043\ufff5\044\ufff5\045\ufff5\046" +
    "\ufff5\050\ufff5\051\ufff5\052\ufff5\053\ufff5\054\ufff5\055\ufff5" +
    "\056\ufff5\057\ufff5\060\ufff5\061\ufff5\062\ufff5\063\ufff5\064" +
    "\ufff5\065\ufff5\066\ufff5\067\ufff5\070\ufff5\073\ufff5\101\ufff5" +
    "\102\ufff5\103\ufff5\104\ufff5\001\002\000\022\003\uffcf\026" +
    "\uffcf\031\uffcf\040\uffcf\064\uffcf\073\uffcf\101\uffcf\102\uffcf" +
    "\001\002\000\054\003\uffd5\004\uffd5\005\uffd5\006\uffd5\007" +
    "\uffd5\010\uffd5\012\uffd5\013\uffd5\016\uffd5\026\uffd5\040\uffd5" +
    "\055\uffd5\056\uffd5\057\uffd5\060\uffd5\061\uffd5\064\uffd5\065" +
    "\uffd5\073\uffd5\101\uffd5\104\uffd5\001\002\000\004\064\uff52" +
    "\001\002\000\022\003\uffd1\026\uffd1\031\uffd1\040\uffd1\064" +
    "\uffd1\073\uffd1\101\uffd1\102\uffd1\001\002\000\022\003\uffcd" +
    "\026\uffcd\031\uffcd\040\uffcd\064\uffcd\073\uffcd\101\uffcd\102" +
    "\uffcd\001\002\000\006\064\uffbe\105\uffbe\001\002\000\006" +
    "\064\112\105\110\001\002\000\004\106\113\001\002\000" +
    "\022\003\uffbd\026\uffbd\031\uffbd\040\uffbd\064\uffbd\073\uffbd" +
    "\101\uffbd\102\uffbd\001\002\000\022\003\uffac\026\uffac\031" +
    "\uffac\040\uffac\064\uffac\073\uffac\101\uffac\102\uffac\001\002" +
    "\000\006\064\uffab\105\uffab\001\002\000\006\064\112\105" +
    "\110\001\002\000\022\003\uffaa\026\uffaa\031\uffaa\040\uffaa" +
    "\064\uffaa\073\uffaa\101\uffaa\102\uffaa\001\002\000\004\064" +
    "\117\001\002\000\004\101\uff51\001\002\000\004\101\121" +
    "\001\002\000\030\004\064\005\077\006\061\007\055\010" +
    "\072\012\106\013\063\016\067\064\123\065\070\102\uff4b" +
    "\001\002\000\004\102\133\001\002\000\006\064\uffb6\105" +
    "\uffb6\001\002\000\006\031\uff4d\102\uff4d\001\002\000\006" +
    "\031\126\102\uff49\001\002\000\030\004\064\005\077\006" +
    "\061\007\055\010\072\012\106\013\063\016\067\064\123" +
    "\065\070\102\uff4b\001\002\000\004\102\uff4c\001\002\000" +
    "\004\102\uff4a\001\002\000\006\064\112\105\110\001\002" +
    "\000\022\003\uffb5\026\uffb5\031\uffb5\040\uffb5\064\uffb5\073" +
    "\uffb5\101\uffb5\102\uffb5\001\002\000\004\103\134\001\002" +
    "\000\054\004\064\005\077\006\061\007\055\010\072\012" +
    "\106\013\063\016\067\033\147\036\162\043\163\044\140" +
    "\045\150\046\144\050\143\053\152\054\141\060\155\064" +
    "\145\065\070\104\uff47\001\002\000\010\003\uff39\026\uff39" +
    "\073\uff39\001\002\000\062\003\uff3f\004\uff44\005\uff44\006" +
    "\uff44\007\uff44\010\uff44\012\uff44\013\uff44\016\uff44\026\uff3f" +
    "\033\uff44\036\uff44\043\uff44\044\uff44\045\uff44\046\uff44\050" +
    "\uff44\053\uff44\054\uff44\060\uff44\064\uff44\065\uff44\073\uff3f" +
    "\104\uff44\001\002\000\010\003\uff3d\026\uff3d\073\uff3d\001" +
    "\002\000\004\101\u0180\001\002\000\040\011\207\015\221" +
    "\017\205\020\212\021\211\027\220\037\214\062\202\063" +
    "\215\064\206\066\216\067\204\070\223\101\210\103\200" +
    "\001\002\000\010\003\uff40\026\uff40\073\uff40\001\002\000" +
    "\004\101\u016b\001\002\000\004\101\u0157\001\002\000\026" +
    "\003\uff36\025\u0138\026\uff36\064\u0137\067\u0143\070\u0146\073" +
    "\u0145\101\u0148\102\uff36\105\u0144\001\002\000\010\003\uff41" +
    "\026\uff41\073\uff41\001\002\000\016\003\uff36\025\u0138\026" +
    "\uff36\064\u0137\073\uff36\102\uff36\001\002\000\004\103\u012f" +
    "\001\002\000\010\003\uff3b\026\uff3b\073\uff3b\001\002\000" +
    "\006\003\075\026\100\001\002\000\054\004\064\005\077" +
    "\006\061\007\055\010\072\012\106\013\063\016\067\033" +
    "\147\036\162\043\163\044\140\045\150\046\144\050\143" +
    "\053\152\054\141\060\155\064\145\065\070\104\uff47\001" +
    "\002\000\010\003\075\026\100\073\060\001\002\000\024" +
    "\004\064\005\077\006\061\007\055\010\072\012\106\013" +
    "\063\016\067\065\070\001\002\000\004\104\u012a\001\002" +
    "\000\054\004\uff45\005\uff45\006\uff45\007\uff45\010\uff45\012" +
    "\uff45\013\uff45\016\uff45\033\uff45\036\uff45\043\uff45\044\uff45" +
    "\045\uff45\046\uff45\050\uff45\053\uff45\054\uff45\060\uff45\064" +
    "\uff45\065\uff45\104\uff45\001\002\000\054\004\uff46\005\uff46" +
    "\006\uff46\007\uff46\010\uff46\012\uff46\013\uff46\016\uff46\033" +
    "\uff46\036\uff46\043\uff46\044\uff46\045\uff46\046\uff46\050\uff46" +
    "\053\uff46\054\uff46\060\uff46\064\uff46\065\uff46\104\uff46\001" +
    "\002\000\010\003\uff3c\026\uff3c\073\uff3c\001\002\000\006" +
    "\025\u011f\101\uff2d\001\002\000\004\101\166\001\002\000" +
    "\010\003\uff3e\026\uff3e\073\uff3e\001\002\000\010\003\uff3a" +
    "\026\uff3a\073\uff3a\001\002\000\026\004\064\005\077\006" +
    "\061\007\055\010\072\012\106\013\063\016\067\064\172" +
    "\065\070\001\002\000\010\003\uff09\026\uff09\073\uff09\001" +
    "\002\000\010\003\075\026\100\073\060\001\002\000\010" +
    "\003\uff0d\026\uff0d\073\uff0d\001\002\000\006\064\u0115\105" +
    "\u0116\001\002\000\010\003\uff0b\026\uff0b\073\uff0b\001\002" +
    "\000\010\003\uff0c\026\uff0c\073\uff0c\001\002\000\010\003" +
    "\uff0e\026\uff0e\073\uff0e\001\002\000\010\003\uff0a\026\uff0a" +
    "\073\uff0a\001\002\000\042\011\207\015\221\017\205\020" +
    "\212\021\211\027\220\037\214\062\202\063\215\064\206" +
    "\066\216\067\204\070\223\101\210\102\222\103\200\001" +
    "\002\000\042\011\207\015\221\017\205\020\212\021\211" +
    "\027\220\037\214\062\202\063\215\064\206\066\216\067" +
    "\204\070\223\101\210\103\200\104\340\001\002\000\034" +
    "\003\075\021\237\026\100\067\226\070\236\071\227\072" +
    "\235\073\233\074\234\075\232\076\230\077\225\100\231" +
    "\001\002\000\046\003\uff91\021\uff91\026\uff91\030\uff91\031" +
    "\uff91\067\uff91\070\uff91\071\uff91\072\uff91\073\uff91\074\uff91" +
    "\075\uff91\076\uff91\077\uff91\100\uff91\102\uff91\104\uff91\106" +
    "\uff91\001\002\000\054\004\uff1a\005\uff1a\006\uff1a\007\uff1a" +
    "\010\uff1a\012\uff1a\013\uff1a\016\uff1a\033\uff1a\036\uff1a\043" +
    "\uff1a\044\uff1a\045\uff1a\046\uff1a\050\uff1a\053\uff1a\054\uff1a" +
    "\060\uff1a\064\uff1a\065\uff1a\104\uff1a\001\002\000\040\011" +
    "\207\015\221\017\205\020\212\021\211\027\220\037\214" +
    "\062\202\063\215\064\206\066\216\067\204\070\223\101" +
    "\210\103\200\001\002\000\046\003\uff96\021\uff96\026\uff96" +
    "\030\uff96\031\uff96\067\uff96\070\uff96\071\uff96\072\uff96\073" +
    "\uff96\074\uff96\075\uff96\076\uff96\077\uff96\100\uff96\102\uff96" +
    "\104\uff96\106\uff96\001\002\000\054\003\uff57\021\uff57\025" +
    "\360\026\uff57\030\uff57\031\uff57\067\uff57\070\uff57\071\uff57" +
    "\072\uff57\073\uff57\074\uff57\075\uff57\076\uff57\077\uff57\100" +
    "\uff57\101\356\102\uff57\104\uff57\105\357\106\uff57\001\002" +
    "\000\046\003\uff9a\021\uff9a\026\uff9a\030\uff9a\031\uff9a\067" +
    "\uff9a\070\uff9a\071\uff9a\072\uff9a\073\uff9a\074\uff9a\075\uff9a" +
    "\076\uff9a\077\uff9a\100\uff9a\102\uff9a\104\uff9a\106\uff9a\001" +
    "\002\000\040\011\207\015\221\017\205\020\212\021\211" +
    "\027\220\037\214\062\202\063\215\064\206\066\216\067" +
    "\204\070\223\101\210\103\200\001\002\000\040\011\207" +
    "\015\221\017\205\020\212\021\211\027\220\037\214\062" +
    "\202\063\215\064\206\066\216\067\204\070\223\101\210" +
    "\103\200\001\002\000\046\003\uff97\021\uff97\026\uff97\030" +
    "\uff97\031\uff97\067\uff97\070\uff97\071\uff97\072\uff97\073\uff97" +
    "\074\uff97\075\uff97\076\uff97\077\uff97\100\uff97\102\uff97\104" +
    "\uff97\106\uff97\001\002\000\046\003\uff8f\021\uff8f\026\uff8f" +
    "\030\uff8f\031\uff8f\067\uff8f\070\uff8f\071\uff8f\072\uff8f\073" +
    "\uff8f\074\uff8f\075\uff8f\076\uff8f\077\uff8f\100\uff8f\102\uff8f" +
    "\104\uff8f\106\uff8f\001\002\000\026\004\312\005\315\006" +
    "\303\007\305\010\314\012\310\013\313\016\306\064\311" +
    "\065\307\001\002\000\046\003\uff92\021\uff92\026\uff92\030" +
    "\uff92\031\uff92\067\uff92\070\uff92\071\uff92\072\uff92\073\uff92" +
    "\074\uff92\075\uff92\076\uff92\077\uff92\100\uff92\102\uff92\104" +
    "\uff92\106\uff92\001\002\000\046\003\uff71\021\uff71\026\uff71" +
    "\030\uff71\031\uff71\067\301\070\uff71\071\uff71\072\uff71\073" +
    "\uff71\074\uff71\075\uff71\076\uff71\077\uff71\100\uff71\102\uff71" +
    "\104\uff71\106\uff71\001\002\000\046\003\uff9b\021\uff9b\026" +
    "\uff9b\030\uff9b\031\uff9b\067\uff9b\070\uff9b\071\uff9b\072\uff9b" +
    "\073\uff9b\074\uff9b\075\uff9b\076\uff9b\077\uff9b\100\uff9b\102" +
    "\uff9b\104\uff9b\106\uff9b\001\002\000\004\014\276\001\002" +
    "\000\046\003\uff7c\021\uff7c\026\uff7c\030\uff7c\031\uff7c\067" +
    "\uff7c\070\uff7c\071\uff7c\072\uff7c\073\uff7c\074\uff7c\075\uff7c" +
    "\076\uff7c\077\uff7c\100\uff7c\102\uff7c\104\uff7c\106\uff7c\001" +
    "\002\000\004\103\273\001\002\000\040\011\207\015\221" +
    "\017\205\020\212\021\211\027\220\037\214\062\202\063" +
    "\215\064\206\066\216\067\204\070\223\101\210\103\200" +
    "\001\002\000\046\003\uff94\021\237\026\uff94\030\uff94\031" +
    "\uff94\067\uff94\070\uff94\071\227\072\235\073\233\074\234" +
    "\075\232\076\230\077\225\100\231\102\uff94\104\uff94\106" +
    "\uff94\001\002\000\042\011\uff6f\015\uff6f\017\uff6f\020\uff6f" +
    "\021\uff6f\027\uff6f\037\uff6f\062\uff6f\063\uff6f\064\uff6f\066" +
    "\uff6f\067\uff6f\070\uff6f\077\271\101\uff6f\103\uff6f\001\002" +
    "\000\040\011\207\015\221\017\205\020\212\021\211\027" +
    "\220\037\214\062\202\063\215\064\206\066\216\067\204" +
    "\070\223\101\210\103\200\001\002\000\040\011\207\015" +
    "\221\017\205\020\212\021\211\027\220\037\214\062\202" +
    "\063\215\064\206\066\216\067\204\070\223\101\210\103" +
    "\200\001\002\000\042\011\uff7e\015\uff7e\017\uff7e\020\uff7e" +
    "\021\uff7e\027\uff7e\037\uff7e\062\uff7e\063\uff7e\064\uff7e\066" +
    "\uff7e\067\uff7e\070\uff7e\073\260\101\uff7e\103\uff7e\001\002" +
    "\000\042\011\uff6d\015\uff6d\017\uff6d\020\uff6d\021\uff6d\027" +
    "\uff6d\037\uff6d\062\uff6d\063\uff6d\064\uff6d\066\uff6d\067\uff6d" +
    "\070\uff6d\100\242\101\uff6d\103\uff6d\001\002\000\042\011" +
    "\uff7e\015\uff7e\017\uff7e\020\uff7e\021\uff7e\027\uff7e\037\uff7e" +
    "\062\uff7e\063\uff7e\064\uff7e\066\uff7e\067\uff7e\070\uff7e\073" +
    "\260\101\uff7e\103\uff7e\001\002\000\050\011\uff82\015\uff82" +
    "\017\uff82\020\uff82\021\uff82\027\uff82\037\uff82\062\uff82\063" +
    "\uff82\064\uff82\066\uff82\067\254\070\250\071\247\072\255" +
    "\073\252\074\253\101\uff82\103\uff82\001\002\000\040\011" +
    "\207\015\221\017\205\020\212\021\211\027\220\037\214" +
    "\062\202\063\215\064\206\066\216\067\204\070\223\101" +
    "\210\103\200\001\002\000\040\011\207\015\221\017\205" +
    "\020\212\021\211\027\220\037\214\062\202\063\215\064" +
    "\206\066\216\067\204\070\223\101\210\103\200\001\002" +
    "\000\040\011\207\015\221\017\205\020\212\021\211\027" +
    "\220\037\214\062\202\063\215\064\206\066\216\067\204" +
    "\070\223\101\210\103\200\001\002\000\004\073\240\001" +
    "\002\000\042\011\uff6d\015\uff6d\017\uff6d\020\uff6d\021\uff6d" +
    "\027\uff6d\037\uff6d\062\uff6d\063\uff6d\064\uff6d\066\uff6d\067" +
    "\uff6d\070\uff6d\100\242\101\uff6d\103\uff6d\001\002\000\040" +
    "\011\207\015\221\017\205\020\212\021\211\027\220\037" +
    "\214\062\202\063\215\064\206\066\216\067\204\070\223" +
    "\101\210\103\200\001\002\000\040\011\uff6e\015\uff6e\017" +
    "\uff6e\020\uff6e\021\uff6e\027\uff6e\037\uff6e\062\uff6e\063\uff6e" +
    "\064\uff6e\066\uff6e\067\uff6e\070\uff6e\101\uff6e\103\uff6e\001" +
    "\002\000\046\003\uffa1\021\uffa1\026\uffa1\030\uffa1\031\uffa1" +
    "\067\uffa1\070\uffa1\071\uffa1\072\uffa1\073\uffa1\074\uffa1\075" +
    "\uffa1\076\uffa1\077\uffa1\100\uffa1\102\uffa1\104\uffa1\106\uffa1" +
    "\001\002\000\046\003\uff9f\021\237\026\uff9f\030\uff9f\031" +
    "\uff9f\067\uff9f\070\uff9f\071\227\072\235\073\233\074\234" +
    "\075\232\076\230\077\225\100\231\102\uff9f\104\uff9f\106" +
    "\uff9f\001\002\000\046\003\uff9e\021\237\026\uff9e\030\uff9e" +
    "\031\uff9e\067\uff9e\070\uff9e\071\uff9e\072\uff9e\073\233\074" +
    "\uff9e\075\232\076\230\077\225\100\231\102\uff9e\104\uff9e" +
    "\106\uff9e\001\002\000\046\003\uff9c\021\237\026\uff9c\030" +
    "\uff9c\031\uff9c\067\uff9c\070\uff9c\071\uff9c\072\uff9c\073\233" +
    "\074\uff9c\075\232\076\230\077\225\100\231\102\uff9c\104" +
    "\uff9c\106\uff9c\001\002\000\040\011\uff84\015\uff84\017\uff84" +
    "\020\uff84\021\uff84\027\uff84\037\uff84\062\uff84\063\uff84\064" +
    "\uff84\066\uff84\067\uff84\070\uff84\101\uff84\103\uff84\001\002" +
    "\000\040\011\uff86\015\uff86\017\uff86\020\uff86\021\uff86\027" +
    "\uff86\037\uff86\062\uff86\063\uff86\064\uff86\066\uff86\067\uff86" +
    "\070\uff86\101\uff86\103\uff86\001\002\000\040\011\207\015" +
    "\221\017\205\020\212\021\211\027\220\037\214\062\202" +
    "\063\215\064\206\066\216\067\204\070\223\101\210\103" +
    "\200\001\002\000\040\011\uff88\015\uff88\017\uff88\020\uff88" +
    "\021\uff88\027\uff88\037\uff88\062\uff88\063\uff88\064\uff88\066" +
    "\uff88\067\uff88\070\uff88\101\uff88\103\uff88\001\002\000\040" +
    "\011\uff83\015\uff83\017\uff83\020\uff83\021\uff83\027\uff83\037" +
    "\uff83\062\uff83\063\uff83\064\uff83\066\uff83\067\uff83\070\uff83" +
    "\101\uff83\103\uff83\001\002\000\040\011\uff87\015\uff87\017" +
    "\uff87\020\uff87\021\uff87\027\uff87\037\uff87\062\uff87\063\uff87" +
    "\064\uff87\066\uff87\067\uff87\070\uff87\101\uff87\103\uff87\001" +
    "\002\000\040\011\uff85\015\uff85\017\uff85\020\uff85\021\uff85" +
    "\027\uff85\037\uff85\062\uff85\063\uff85\064\uff85\066\uff85\067" +
    "\uff85\070\uff85\101\uff85\103\uff85\001\002\000\046\003\uffa6" +
    "\021\uffa6\026\uffa6\030\uffa6\031\uffa6\067\uffa6\070\uffa6\071" +
    "\uffa6\072\uffa6\073\uffa6\074\uffa6\075\uffa6\076\uffa6\077\uffa6" +
    "\100\uffa6\102\uffa6\104\uffa6\106\uffa6\001\002\000\040\011" +
    "\207\015\221\017\205\020\212\021\211\027\220\037\214" +
    "\062\202\063\215\064\206\066\216\067\204\070\223\101" +
    "\210\103\200\001\002\000\040\011\uff7f\015\uff7f\017\uff7f" +
    "\020\uff7f\021\uff7f\027\uff7f\037\uff7f\062\uff7f\063\uff7f\064" +
    "\uff7f\066\uff7f\067\uff7f\070\uff7f\101\uff7f\103\uff7f\001\002" +
    "\000\046\003\uffa4\021\uffa4\026\uffa4\030\uffa4\031\uffa4\067" +
    "\uffa4\070\uffa4\071\uffa4\072\uffa4\073\uffa4\074\uffa4\075\uffa4" +
    "\076\uffa4\077\uffa4\100\uffa4\102\uffa4\104\uffa4\106\uffa4\001" +
    "\002\000\040\011\207\015\221\017\205\020\212\021\211" +
    "\027\220\037\214\062\202\063\215\064\206\066\216\067" +
    "\204\070\223\101\210\103\200\001\002\000\046\003\uffa2" +
    "\021\uffa2\026\uffa2\030\uffa2\031\uffa2\067\uffa2\070\uffa2\071" +
    "\uffa2\072\uffa2\073\uffa2\074\uffa2\075\uffa2\076\uffa2\077\uffa2" +
    "\100\uffa2\102\uffa2\104\uffa2\106\uffa2\001\002\000\040\011" +
    "\207\015\221\017\205\020\212\021\211\027\220\037\214" +
    "\062\202\063\215\064\206\066\216\067\204\070\223\101" +
    "\210\103\200\001\002\000\046\003\uffa5\021\uffa5\026\uffa5" +
    "\030\uffa5\031\uffa5\067\uffa5\070\uffa5\071\uffa5\072\uffa5\073" +
    "\uffa5\074\uffa5\075\uffa5\076\uffa5\077\uffa5\100\uffa5\102\uffa5" +
    "\104\uffa5\106\uffa5\001\002\000\046\003\uff9d\021\237\026" +
    "\uff9d\030\uff9d\031\uff9d\067\uff9d\070\uff9d\071\uff9d\072\235" +
    "\073\233\074\234\075\232\076\230\077\225\100\231\102" +
    "\uff9d\104\uff9d\106\uff9d\001\002\000\046\003\uffa0\021\237" +
    "\026\uffa0\030\uffa0\031\uffa0\067\uffa0\070\uffa0\071\227\072" +
    "\235\073\233\074\234\075\232\076\230\077\225\100\231" +
    "\102\uffa0\104\uffa0\106\uffa0\001\002\000\040\011\207\015" +
    "\221\017\205\020\212\021\211\027\220\037\214\062\202" +
    "\063\215\064\206\066\216\067\204\070\223\101\210\103" +
    "\200\001\002\000\040\011\uff70\015\uff70\017\uff70\020\uff70" +
    "\021\uff70\027\uff70\037\uff70\062\uff70\063\uff70\064\uff70\066" +
    "\uff70\067\uff70\070\uff70\101\uff70\103\uff70\001\002\000\046" +
    "\003\uffa3\021\237\026\uffa3\030\uffa3\031\uffa3\067\uffa3\070" +
    "\uffa3\071\uffa3\072\uffa3\073\233\074\uffa3\075\232\076\230" +
    "\077\uffa3\100\231\102\uffa3\104\uffa3\106\uffa3\001\002\000" +
    "\054\004\064\005\077\006\061\007\055\010\072\012\106" +
    "\013\063\016\067\033\147\036\162\043\163\044\140\045" +
    "\150\046\144\050\143\053\152\054\141\060\155\064\145" +
    "\065\070\104\uff47\001\002\000\004\104\275\001\002\000" +
    "\054\004\uff12\005\uff12\006\uff12\007\uff12\010\uff12\012\uff12" +
    "\013\uff12\016\uff12\033\uff12\036\uff12\043\uff12\044\uff12\045" +
    "\uff12\046\uff12\050\uff12\053\uff12\054\uff12\060\uff12\064\uff12" +
    "\065\uff12\104\uff12\001\002\000\004\027\277\001\002\000" +
    "\046\003\uff7d\021\uff7d\026\uff7d\030\uff7d\031\uff7d\067\uff7d" +
    "\070\uff7d\071\uff7d\072\uff7d\073\uff7d\074\uff7d\075\uff7d\076" +
    "\uff7d\077\uff7d\100\uff7d\102\uff7d\104\uff7d\106\uff7d\001\002" +
    "\000\046\003\uff90\021\uff90\026\uff90\030\uff90\031\uff90\067" +
    "\uff90\070\uff90\071\uff90\072\uff90\073\uff90\074\uff90\075\uff90" +
    "\076\uff90\077\uff90\100\uff90\102\uff90\104\uff90\106\uff90\001" +
    "\002\000\040\011\207\015\221\017\205\020\212\021\211" +
    "\027\220\037\214\062\202\063\215\064\206\066\216\067" +
    "\204\070\223\101\210\103\200\001\002\000\046\003\uff72" +
    "\021\237\026\uff72\030\uff72\031\uff72\067\uff72\070\uff72\071" +
    "\227\072\235\073\233\074\234\075\232\076\230\077\225" +
    "\100\231\102\uff72\104\uff72\106\uff72\001\002\000\006\101" +
    "\uffc2\105\uffc2\001\002\000\006\101\317\105\316\001\002" +
    "\000\006\101\uffc1\105\uffc1\001\002\000\006\101\uffc6\105" +
    "\uffc6\001\002\000\006\101\uffc5\105\uffc5\001\002\000\006" +
    "\101\uffc8\105\uffc8\001\002\000\006\101\uffca\105\uffca\001" +
    "\002\000\006\101\uffc4\105\uffc4\001\002\000\006\101\uffc7" +
    "\105\uffc7\001\002\000\006\101\uffc9\105\uffc9\001\002\000" +
    "\006\101\uffc3\105\uffc3\001\002\000\042\011\207\015\221" +
    "\017\205\020\212\021\211\027\220\037\214\062\202\063" +
    "\215\064\206\066\216\067\204\070\223\101\210\103\200" +
    "\106\uff89\001\002\000\042\011\207\015\221\017\205\020" +
    "\212\021\211\027\220\037\214\062\202\063\215\064\206" +
    "\066\216\067\204\070\223\101\210\102\324\103\200\001" +
    "\002\000\046\003\uff98\021\uff98\026\uff98\030\uff98\031\uff98" +
    "\067\uff98\070\uff98\071\uff98\072\uff98\073\uff98\074\uff98\075" +
    "\uff98\076\uff98\077\uff98\100\uff98\102\uff98\104\uff98\106\uff98" +
    "\001\002\000\004\102\330\001\002\000\036\021\237\030" +
    "\uff77\031\325\067\226\070\236\071\227\072\235\073\233" +
    "\074\234\075\232\076\230\077\225\100\231\102\uff77\001" +
    "\002\000\046\003\uff8e\021\uff8e\026\uff8e\030\uff8e\031\uff8e" +
    "\067\uff8e\070\uff8e\071\uff8e\072\uff8e\073\uff8e\074\uff8e\075" +
    "\uff8e\076\uff8e\077\uff8e\100\uff8e\102\uff8e\104\uff8e\106\uff8e" +
    "\001\002\000\046\003\uff7a\021\uff7a\026\uff7a\030\uff7a\031" +
    "\uff7a\067\uff7a\070\uff7a\071\uff7a\072\uff7a\073\uff7a\074\uff7a" +
    "\075\uff7a\076\uff7a\077\uff7a\100\uff7a\102\uff7a\104\uff7a\106" +
    "\uff7a\001\002\000\040\011\207\015\221\017\205\020\212" +
    "\021\211\027\220\037\214\062\202\063\215\064\206\066" +
    "\216\067\204\070\223\101\210\103\200\001\002\000\006" +
    "\030\uff79\102\uff79\001\002\000\006\030\uff78\102\uff78\001" +
    "\002\000\046\003\uff7b\021\uff7b\026\uff7b\030\uff7b\031\uff7b" +
    "\067\uff7b\070\uff7b\071\uff7b\072\uff7b\073\uff7b\074\uff7b\075" +
    "\uff7b\076\uff7b\077\uff7b\100\uff7b\102\uff7b\104\uff7b\106\uff7b" +
    "\001\002\000\032\021\237\067\226\070\236\071\227\072" +
    "\235\073\233\074\234\075\232\076\230\077\225\100\231" +
    "\106\uff8a\001\002\000\004\106\333\001\002\000\050\003" +
    "\uff8b\021\uff8b\026\uff8b\030\uff8b\031\uff8b\067\uff8b\070\uff8b" +
    "\071\uff8b\072\uff8b\073\uff8b\074\uff8b\075\uff8b\076\uff8b\077" +
    "\uff8b\100\uff8b\102\uff8b\103\335\104\uff8b\106\uff8b\001\002" +
    "\000\046\003\uff8d\021\uff8d\026\uff8d\030\uff8d\031\uff8d\067" +
    "\uff8d\070\uff8d\071\uff8d\072\uff8d\073\uff8d\074\uff8d\075\uff8d" +
    "\076\uff8d\077\uff8d\100\uff8d\102\uff8d\104\uff8d\106\uff8d\001" +
    "\002\000\042\011\207\015\221\017\205\020\212\021\211" +
    "\027\220\037\214\062\202\063\215\064\206\066\216\067" +
    "\204\070\223\101\210\103\200\104\340\001\002\000\034" +
    "\021\237\031\341\067\226\070\236\071\227\072\235\073" +
    "\233\074\234\075\232\076\230\077\225\100\231\104\uff73" +
    "\001\002\000\046\003\uff8c\021\uff8c\026\uff8c\030\uff8c\031" +
    "\uff8c\067\uff8c\070\uff8c\071\uff8c\072\uff8c\073\uff8c\074\uff8c" +
    "\075\uff8c\076\uff8c\077\uff8c\100\uff8c\102\uff8c\104\uff8c\106" +
    "\uff8c\001\002\000\046\003\uff75\021\uff75\026\uff75\030\uff75" +
    "\031\uff75\067\uff75\070\uff75\071\uff75\072\uff75\073\uff75\074" +
    "\uff75\075\uff75\076\uff75\077\uff75\100\uff75\102\uff75\104\uff75" +
    "\106\uff75\001\002\000\040\011\207\015\221\017\205\020" +
    "\212\021\211\027\220\037\214\062\202\063\215\064\206" +
    "\066\216\067\204\070\223\101\210\103\200\001\002\000" +
    "\004\104\343\001\002\000\046\003\uff76\021\uff76\026\uff76" +
    "\030\uff76\031\uff76\067\uff76\070\uff76\071\uff76\072\uff76\073" +
    "\uff76\074\uff76\075\uff76\076\uff76\077\uff76\100\uff76\102\uff76" +
    "\104\uff76\106\uff76\001\002\000\034\021\237\031\341\067" +
    "\226\070\236\071\227\072\235\073\233\074\234\075\232" +
    "\076\230\077\225\100\231\104\uff73\001\002\000\004\104" +
    "\uff74\001\002\000\046\003\uff95\021\uff95\026\uff95\030\uff95" +
    "\031\uff95\067\uff95\070\uff95\071\uff95\072\uff95\073\uff95\074" +
    "\uff95\075\uff95\076\uff95\077\uff95\100\uff95\102\uff95\104\uff95" +
    "\106\uff95\001\002\000\032\021\237\067\226\070\236\071" +
    "\227\072\235\073\233\074\234\075\232\076\230\077\225" +
    "\100\231\102\350\001\002\000\050\003\uff81\021\uff81\022" +
    "\352\026\uff81\030\uff81\031\uff81\067\uff81\070\uff81\071\uff81" +
    "\072\uff81\073\uff81\074\uff81\075\uff81\076\uff81\077\uff81\100" +
    "\uff81\102\uff81\104\uff81\106\uff81\001\002\000\046\003\uffa7" +
    "\021\uffa7\026\uffa7\030\uffa7\031\uffa7\067\uffa7\070\uffa7\071" +
    "\uffa7\072\uffa7\073\uffa7\074\uffa7\075\uffa7\076\uffa7\077\uffa7" +
    "\100\uffa7\102\uffa7\104\uffa7\106\uffa7\001\002\000\040\011" +
    "\207\015\221\017\205\020\212\021\211\027\220\037\214" +
    "\062\202\063\215\064\206\066\216\067\204\070\223\101" +
    "\210\103\200\001\002\000\032\021\237\030\354\067\226" +
    "\070\236\071\227\072\235\073\233\074\234\075\232\076" +
    "\230\077\225\100\231\001\002\000\040\011\207\015\221" +
    "\017\205\020\212\021\211\027\220\037\214\062\202\063" +
    "\215\064\206\066\216\067\204\070\223\101\210\103\200" +
    "\001\002\000\046\003\uff80\021\237\026\uff80\030\uff80\031" +
    "\uff80\067\226\070\236\071\227\072\235\073\233\074\234" +
    "\075\232\076\230\077\225\100\231\102\uff80\104\uff80\106" +
    "\uff80\001\002\000\042\011\207\015\221\017\205\020\212" +
    "\021\211\027\220\037\214\062\202\063\215\064\206\066" +
    "\216\067\204\070\223\101\210\102\u010b\103\200\001\002" +
    "\000\022\062\uff63\063\uff63\064\uff63\066\uff63\067\372\070" +
    "\367\071\366\072\373\001\002\000\004\064\362\001\002" +
    "\000\046\003\uff5c\021\uff5c\026\uff5c\030\uff5c\031\uff5c\067" +
    "\uff5c\070\uff5c\071\uff5c\072\uff5c\073\uff5c\074\uff5c\075\uff5c" +
    "\076\uff5c\077\uff5c\100\uff5c\102\uff5c\104\uff5c\106\uff5c\001" +
    "\002\000\054\003\uff57\021\uff57\025\360\026\uff57\030\uff57" +
    "\031\uff57\067\uff57\070\uff57\071\uff57\072\uff57\073\uff57\074" +
    "\uff57\075\uff57\076\uff57\077\uff57\100\uff57\101\356\102\uff57" +
    "\104\uff57\105\357\106\uff57\001\002\000\046\003\uff5b\021" +
    "\uff5b\026\uff5b\030\uff5b\031\uff5b\067\uff5b\070\uff5b\071\uff5b" +
    "\072\uff5b\073\uff5b\074\uff5b\075\uff5b\076\uff5b\077\uff5b\100" +
    "\uff5b\102\uff5b\104\uff5b\106\uff5b\001\002\000\046\003\uff55" +
    "\021\uff55\026\uff55\030\uff55\031\uff55\067\uff55\070\uff55\071" +
    "\uff55\072\uff55\073\uff55\074\uff55\075\uff55\076\uff55\077\uff55" +
    "\100\uff55\102\uff55\104\uff55\106\uff55\001\002\000\046\003" +
    "\uff56\021\uff56\026\uff56\030\uff56\031\uff56\067\uff56\070\uff56" +
    "\071\uff56\072\uff56\073\uff56\074\uff56\075\uff56\076\uff56\077" +
    "\uff56\100\uff56\102\uff56\104\uff56\106\uff56\001\002\000\020" +
    "\062\uff64\063\uff64\064\uff64\066\uff64\067\uff64\070\uff64\106" +
    "\uff64\001\002\000\020\062\uff66\063\uff66\064\uff66\066\uff66" +
    "\067\uff66\070\uff66\106\uff66\001\002\000\004\106\uff6a\001" +
    "\002\000\004\106\u0108\001\002\000\020\062\uff67\063\uff67" +
    "\064\uff67\066\uff67\067\uff67\070\uff67\106\uff67\001\002\000" +
    "\020\062\uff65\063\uff65\064\uff65\066\uff65\067\uff65\070\uff65" +
    "\106\uff65\001\002\000\016\062\u0102\063\u0103\064\206\066" +
    "\376\067\u0100\070\375\001\002\000\014\067\uff69\070\uff69" +
    "\071\uff69\072\uff69\106\uff69\001\002\000\014\067\301\070" +
    "\uff71\071\uff71\072\uff71\106\uff71\001\002\000\014\067\372" +
    "\070\367\071\366\072\373\106\uff63\001\002\000\014\067" +
    "\uff69\070\uff69\071\uff69\072\uff69\106\uff69\001\002\000\014" +
    "\067\uff5d\070\uff5d\071\uff5d\072\uff5d\106\uff5d\001\002\000" +
    "\014\067\uff5f\070\uff5f\071\uff5f\072\uff5f\106\uff5f\001\002" +
    "\000\014\067\uff60\070\uff60\071\uff60\072\uff60\106\uff60\001" +
    "\002\000\014\067\uff61\070\uff61\071\uff61\072\uff61\106\uff61" +
    "\001\002\000\004\106\uff68\001\002\000\014\067\uff5e\070" +
    "\uff5e\071\uff5e\072\uff5e\106\uff5e\001\002\000\014\067\uff62" +
    "\070\uff62\071\uff62\072\uff62\106\uff62\001\002\000\054\003" +
    "\uff57\021\uff57\025\360\026\uff57\030\uff57\031\uff57\067\uff57" +
    "\070\uff57\071\uff57\072\uff57\073\uff57\074\uff57\075\uff57\076" +
    "\uff57\077\uff57\100\uff57\101\356\102\uff57\104\uff57\105\357" +
    "\106\uff57\001\002\000\046\003\uff5a\021\uff5a\026\uff5a\030" +
    "\uff5a\031\uff5a\067\uff5a\070\uff5a\071\uff5a\072\uff5a\073\uff5a" +
    "\074\uff5a\075\uff5a\076\uff5a\077\uff5a\100\uff5a\102\uff5a\104" +
    "\uff5a\106\uff5a\001\002\000\004\102\u010c\001\002\000\046" +
    "\003\uff58\021\uff58\026\uff58\030\uff58\031\uff58\067\uff58\070" +
    "\uff58\071\uff58\072\uff58\073\uff58\074\uff58\075\uff58\076\uff58" +
    "\077\uff58\100\uff58\102\uff58\104\uff58\106\uff58\001\002\000" +
    "\046\003\uff59\021\uff59\026\uff59\030\uff59\031\uff59\067\uff59" +
    "\070\uff59\071\uff59\072\uff59\073\uff59\074\uff59\075\uff59\076" +
    "\uff59\077\uff59\100\uff59\102\uff59\104\uff59\106\uff59\001\002" +
    "\000\046\003\uff93\021\237\026\uff93\030\uff93\031\uff93\067" +
    "\uff93\070\uff93\071\227\072\235\073\233\074\234\075\232" +
    "\076\230\077\225\100\231\102\uff93\104\uff93\106\uff93\001" +
    "\002\000\010\033\147\036\162\064\145\001\002\000\004" +
    "\102\u0110\001\002\000\004\103\u0111\001\002\000\054\004" +
    "\064\005\077\006\061\007\055\010\072\012\106\013\063" +
    "\016\067\033\147\036\162\043\163\044\140\045\150\046" +
    "\144\050\143\053\152\054\141\060\155\064\145\065\070" +
    "\104\uff47\001\002\000\004\104\u0113\001\002\000\054\004" +
    "\uff11\005\uff11\006\uff11\007\uff11\010\uff11\012\uff11\013\uff11" +
    "\016\uff11\033\uff11\036\uff11\043\uff11\044\uff11\045\uff11\046" +
    "\uff11\050\uff11\053\uff11\054\uff11\060\uff11\064\uff11\065\uff11" +
    "\104\uff11\001\002\000\046\003\uff99\021\uff99\026\uff99\030" +
    "\uff99\031\uff99\067\uff99\070\uff99\071\uff99\072\uff99\073\uff99" +
    "\074\uff99\075\uff99\076\uff99\077\uff99\100\uff99\102\uff99\104" +
    "\uff99\106\uff99\001\002\000\012\003\075\026\100\030\u011a" +
    "\073\060\001\002\000\004\106\u0118\001\002\000\042\011" +
    "\uff0f\015\uff0f\017\uff0f\020\uff0f\021\uff0f\027\uff0f\037\uff0f" +
    "\062\uff0f\063\uff0f\064\uff0f\066\uff0f\067\uff0f\070\uff0f\101" +
    "\uff0f\102\uff0f\103\uff0f\001\002\000\006\064\u0115\105\u0116" +
    "\001\002\000\042\011\uff07\015\uff07\017\uff07\020\uff07\021" +
    "\uff07\027\uff07\037\uff07\062\uff07\063\uff07\064\uff07\066\uff07" +
    "\067\uff07\070\uff07\101\uff07\102\uff07\103\uff07\001\002\000" +
    "\004\064\u011d\001\002\000\042\011\uff08\015\uff08\017\uff08" +
    "\020\uff08\021\uff08\027\uff08\037\uff08\062\uff08\063\uff08\064" +
    "\uff08\066\uff08\067\uff08\070\uff08\101\uff08\102\uff08\103\uff08" +
    "\001\002\000\042\011\uff05\015\uff05\017\uff05\020\uff05\021" +
    "\uff05\027\uff05\037\uff05\062\uff05\063\uff05\064\uff05\066\uff05" +
    "\067\uff05\070\uff05\101\uff05\102\uff05\103\uff05\001\002\000" +
    "\042\011\uff06\015\uff06\017\uff06\020\uff06\021\uff06\027\uff06" +
    "\037\uff06\062\uff06\063\uff06\064\uff06\066\uff06\067\uff06\070" +
    "\uff06\101\uff06\102\uff06\103\uff06\001\002\000\042\011\uff10" +
    "\015\uff10\017\uff10\020\uff10\021\uff10\027\uff10\037\uff10\062" +
    "\uff10\063\uff10\064\uff10\066\uff10\067\uff10\070\uff10\101\uff10" +
    "\102\uff10\103\uff10\001\002\000\004\064\u0128\001\002\000" +
    "\004\101\u0121\001\002\000\040\011\207\015\221\017\205" +
    "\020\212\021\211\027\220\037\214\062\202\063\215\064" +
    "\206\066\216\067\204\070\223\101\210\103\200\001\002" +
    "\000\034\021\237\031\u0123\067\226\070\236\071\227\072" +
    "\235\073\233\074\234\075\232\076\230\077\225\100\231" +
    "\102\uff2b\001\002\000\040\011\207\015\221\017\205\020" +
    "\212\021\211\027\220\037\214\062\202\063\215\064\206" +
    "\066\216\067\204\070\223\101\210\103\200\001\002\000" +
    "\004\102\u0125\001\002\000\012\003\uff2f\026\uff2f\073\uff2f" +
    "\102\uff2f\001\002\000\034\021\237\031\u0123\067\226\070" +
    "\236\071\227\072\235\073\233\074\234\075\232\076\230" +
    "\077\225\100\231\102\uff2b\001\002\000\004\102\uff2c\001" +
    "\002\000\006\025\u011f\101\uff2d\001\002\000\004\101\uff2e" +
    "\001\002\000\054\003\uff50\004\uff50\005\uff50\006\uff50\007" +
    "\uff50\010\uff50\012\uff50\013\uff50\016\uff50\026\uff50\040\uff50" +
    "\055\uff50\056\uff50\057\uff50\060\uff50\061\uff50\064\uff50\065" +
    "\uff50\073\uff50\101\uff50\104\uff50\001\002\000\010\003\uff42" +
    "\026\uff42\073\uff42\001\002\000\054\004\uff43\005\uff43\006" +
    "\uff43\007\uff43\010\uff43\012\uff43\013\uff43\016\uff43\033\uff43" +
    "\036\uff43\043\uff43\044\uff43\045\uff43\046\uff43\050\uff43\053" +
    "\uff43\054\uff43\060\uff43\064\uff43\065\uff43\104\uff43\001\002" +
    "\000\004\104\uff48\001\002\000\066\003\uff1f\004\uff1f\005" +
    "\uff1f\006\uff1f\007\uff1f\010\uff1f\012\uff1f\013\uff1f\016\uff1f" +
    "\026\uff1f\033\uff1f\036\uff1f\043\uff1f\044\uff1f\045\uff1f\046" +
    "\uff1f\050\uff1f\051\uff1f\052\uff1f\053\uff1f\054\uff1f\060\uff1f" +
    "\064\uff1f\065\uff1f\073\uff1f\104\uff1f\001\002\000\054\004" +
    "\064\005\077\006\061\007\055\010\072\012\106\013\063" +
    "\016\067\033\147\036\162\043\163\044\140\045\150\046" +
    "\144\050\143\053\152\054\141\060\155\064\145\065\070" +
    "\104\uff47\001\002\000\004\104\u0131\001\002\000\004\044" +
    "\u0132\001\002\000\004\101\u0133\001\002\000\040\011\207" +
    "\015\221\017\205\020\212\021\211\027\220\037\214\062" +
    "\202\063\215\064\206\066\216\067\204\070\223\101\210" +
    "\103\200\001\002\000\032\021\237\067\226\070\236\071" +
    "\227\072\235\073\233\074\234\075\232\076\230\077\225" +
    "\100\231\102\u0135\001\002\000\006\003\075\026\100\001" +
    "\002\000\054\004\uff1d\005\uff1d\006\uff1d\007\uff1d\010\uff1d" +
    "\012\uff1d\013\uff1d\016\uff1d\033\uff1d\036\uff1d\043\uff1d\044" +
    "\uff1d\045\uff1d\046\uff1d\050\uff1d\053\uff1d\054\uff1d\060\uff1d" +
    "\064\uff1d\065\uff1d\104\uff1d\001\002\000\012\003\uff37\026" +
    "\uff37\073\uff37\102\uff37\001\002\000\004\064\u013a\001\002" +
    "\000\012\003\uff30\026\uff30\073\uff30\102\uff30\001\002\000" +
    "\020\003\uff36\025\u0138\026\uff36\064\u0137\073\uff36\101\u013b" +
    "\102\uff36\001\002\000\042\011\207\015\221\017\205\020" +
    "\212\021\211\027\220\037\214\062\202\063\215\064\206" +
    "\066\216\067\204\070\223\101\210\102\u0140\103\200\001" +
    "\002\000\012\003\uff38\026\uff38\073\uff38\102\uff38\001\002" +
    "\000\012\003\uff34\026\uff34\073\uff34\102\uff34\001\002\000" +
    "\034\021\237\031\u0123\067\226\070\236\071\227\072\235" +
    "\073\233\074\234\075\232\076\230\077\225\100\231\102" +
    "\uff2b\001\002\000\012\003\uff35\026\uff35\073\uff35\102\uff35" +
    "\001\002\000\012\003\uff32\026\uff32\073\uff32\102\uff32\001" +
    "\002\000\004\102\u0142\001\002\000\012\003\uff33\026\uff33" +
    "\073\uff33\102\uff33\001\002\000\006\067\u0155\073\u0154\001" +
    "\002\000\022\062\uff63\063\uff63\064\uff63\066\uff63\067\372" +
    "\070\367\071\366\072\373\001\002\000\040\011\207\015" +
    "\221\017\205\020\212\021\211\027\220\037\214\062\202" +
    "\063\215\064\206\066\216\067\204\070\223\101\210\103" +
    "\200\001\002\000\006\070\u014b\073\u014c\001\002\000\012" +
    "\003\uff28\026\uff28\073\uff28\102\uff28\001\002\000\004\102" +
    "\u014a\001\002\000\012\003\uff31\026\uff31\073\uff31\102\uff31" +
    "\001\002\000\012\003\uff25\026\uff25\073\uff25\102\uff25\001" +
    "\002\000\012\003\uff23\026\uff23\073\uff23\102\uff23\001\002" +
    "\000\040\011\207\015\221\017\205\020\212\021\211\027" +
    "\220\037\214\062\202\063\215\064\206\066\216\067\204" +
    "\070\223\101\210\103\200\001\002\000\012\003\uff29\026" +
    "\uff29\073\uff29\102\uff29\001\002\000\036\003\uff24\021\237" +
    "\026\uff24\067\226\070\236\071\227\072\235\073\uff24\074" +
    "\234\075\232\076\230\077\225\100\231\102\uff24\001\002" +
    "\000\036\003\uff27\021\237\026\uff27\067\226\070\236\071" +
    "\227\072\235\073\uff27\074\234\075\232\076\230\077\225" +
    "\100\231\102\uff27\001\002\000\004\106\u0151\001\002\000" +
    "\016\003\uff36\025\u0138\026\uff36\064\u0137\073\uff36\102\uff36" +
    "\001\002\000\012\003\uff26\026\uff26\073\uff26\102\uff26\001" +
    "\002\000\012\003\uff2a\026\uff2a\073\uff2a\102\uff2a\001\002" +
    "\000\040\011\207\015\221\017\205\020\212\021\211\027" +
    "\220\037\214\062\202\063\215\064\206\066\216\067\204" +
    "\070\223\101\210\103\200\001\002\000\012\003\uff21\026" +
    "\uff21\073\uff21\102\uff21\001\002\000\036\003\uff22\021\237" +
    "\026\uff22\067\226\070\236\071\227\072\235\073\uff22\074" +
    "\234\075\232\076\230\077\225\100\231\102\uff22\001\002" +
    "\000\040\011\207\015\221\017\205\020\212\021\211\027" +
    "\220\037\214\062\202\063\215\064\206\066\216\067\204" +
    "\070\223\101\210\103\200\001\002\000\032\021\237\067" +
    "\226\070\236\071\227\072\235\073\233\074\234\075\232" +
    "\076\230\077\225\100\231\102\u0159\001\002\000\004\103" +
    "\u015a\001\002\000\054\004\064\005\077\006\061\007\055" +
    "\010\072\012\106\013\063\016\067\033\147\036\162\043" +
    "\163\044\140\045\150\046\144\050\143\053\152\054\141" +
    "\060\155\064\145\065\070\104\uff47\001\002\000\004\104" +
    "\u015c\001\002\000\056\004\uff03\005\uff03\006\uff03\007\uff03" +
    "\010\uff03\012\uff03\013\uff03\016\uff03\033\uff03\036\uff03\043" +
    "\uff03\044\uff03\045\uff03\046\uff03\047\u015d\050\uff03\053\uff03" +
    "\054\uff03\060\uff03\064\uff03\065\uff03\104\uff03\001\002\000" +
    "\006\046\u0161\103\u015f\001\002\000\054\004\uff1c\005\uff1c" +
    "\006\uff1c\007\uff1c\010\uff1c\012\uff1c\013\uff1c\016\uff1c\033" +
    "\uff1c\036\uff1c\043\uff1c\044\uff1c\045\uff1c\046\uff1c\050\uff1c" +
    "\053\uff1c\054\uff1c\060\uff1c\064\uff1c\065\uff1c\104\uff1c\001" +
    "\002\000\054\004\064\005\077\006\061\007\055\010\072" +
    "\012\106\013\063\016\067\033\147\036\162\043\163\044" +
    "\140\045\150\046\144\050\143\053\152\054\141\060\155" +
    "\064\145\065\070\104\uff47\001\002\000\054\004\uff04\005" +
    "\uff04\006\uff04\007\uff04\010\uff04\012\uff04\013\uff04\016\uff04" +
    "\033\uff04\036\uff04\043\uff04\044\uff04\045\uff04\046\uff04\050" +
    "\uff04\053\uff04\054\uff04\060\uff04\064\uff04\065\uff04\104\uff04" +
    "\001\002\000\004\101\u0162\001\002\000\040\011\207\015" +
    "\221\017\205\020\212\021\211\027\220\037\214\062\202" +
    "\063\215\064\206\066\216\067\204\070\223\101\210\103" +
    "\200\001\002\000\032\021\237\067\226\070\236\071\227" +
    "\072\235\073\233\074\234\075\232\076\230\077\225\100" +
    "\231\102\u0164\001\002\000\004\103\u0165\001\002\000\054" +
    "\004\064\005\077\006\061\007\055\010\072\012\106\013" +
    "\063\016\067\033\147\036\162\043\163\044\140\045\150" +
    "\046\144\050\143\053\152\054\141\060\155\064\145\065" +
    "\070\104\uff47\001\002\000\004\104\u0167\001\002\000\056" +
    "\004\uff03\005\uff03\006\uff03\007\uff03\010\uff03\012\uff03\013" +
    "\uff03\016\uff03\033\uff03\036\uff03\043\uff03\044\uff03\045\uff03" +
    "\046\uff03\047\u015d\050\uff03\053\uff03\054\uff03\060\uff03\064" +
    "\uff03\065\uff03\104\uff03\001\002\000\054\004\uff01\005\uff01" +
    "\006\uff01\007\uff01\010\uff01\012\uff01\013\uff01\016\uff01\033" +
    "\uff01\036\uff01\043\uff01\044\uff01\045\uff01\046\uff01\050\uff01" +
    "\053\uff01\054\uff01\060\uff01\064\uff01\065\uff01\104\uff01\001" +
    "\002\000\004\104\u016a\001\002\000\054\004\uff02\005\uff02" +
    "\006\uff02\007\uff02\010\uff02\012\uff02\013\uff02\016\uff02\033" +
    "\uff02\036\uff02\043\uff02\044\uff02\045\uff02\046\uff02\050\uff02" +
    "\053\uff02\054\uff02\060\uff02\064\uff02\065\uff02\104\uff02\001" +
    "\002\000\040\011\207\015\221\017\205\020\212\021\211" +
    "\027\220\037\214\062\202\063\215\064\206\066\216\067" +
    "\204\070\223\101\210\103\200\001\002\000\032\021\237" +
    "\067\226\070\236\071\227\072\235\073\233\074\234\075" +
    "\232\076\230\077\225\100\231\102\u016d\001\002\000\004" +
    "\103\u016e\001\002\000\010\051\u0171\052\u016f\104\uff17\001" +
    "\002\000\004\030\u017c\001\002\000\004\104\u017b\001\002" +
    "\000\040\011\207\015\221\017\205\020\212\021\211\027" +
    "\220\037\214\062\202\063\215\064\206\066\216\067\204" +
    "\070\223\101\210\103\200\001\002\000\004\030\u0173\001" +
    "\002\000\052\004\064\005\077\006\061\007\055\010\072" +
    "\012\106\013\063\016\067\033\147\036\162\043\163\044" +
    "\140\045\150\046\144\050\143\053\152\054\141\060\155" +
    "\064\145\065\070\001\002\000\016\003\uff3f\026\uff3f\051" +
    "\uff15\052\uff15\073\uff3f\104\uff15\001\002\000\052\004\064" +
    "\005\077\006\061\007\055\010\072\012\106\013\063\016" +
    "\067\033\147\036\162\043\163\044\140\045\150\046\144" +
    "\050\143\053\152\054\141\060\155\064\145\065\070\001" +
    "\002\000\010\051\u0171\052\u016f\104\uff17\001\002\000\052" +
    "\004\uff13\005\uff13\006\uff13\007\uff13\010\uff13\012\uff13\013" +
    "\uff13\016\uff13\033\uff13\036\uff13\043\uff13\044\uff13\045\uff13" +
    "\046\uff13\050\uff13\053\uff13\054\uff13\060\uff13\064\uff13\065" +
    "\uff13\001\002\000\052\004\uff14\005\uff14\006\uff14\007\uff14" +
    "\010\uff14\012\uff14\013\uff14\016\uff14\033\uff14\036\uff14\043" +
    "\uff14\044\uff14\045\uff14\046\uff14\050\uff14\053\uff14\054\uff14" +
    "\060\uff14\064\uff14\065\uff14\001\002\000\004\104\uff19\001" +
    "\002\000\010\051\uff16\052\uff16\104\uff16\001\002\000\054" +
    "\004\uff1b\005\uff1b\006\uff1b\007\uff1b\010\uff1b\012\uff1b\013" +
    "\uff1b\016\uff1b\033\uff1b\036\uff1b\043\uff1b\044\uff1b\045\uff1b" +
    "\046\uff1b\050\uff1b\053\uff1b\054\uff1b\060\uff1b\064\uff1b\065" +
    "\uff1b\104\uff1b\001\002\000\052\004\064\005\077\006\061" +
    "\007\055\010\072\012\106\013\063\016\067\033\147\036" +
    "\162\043\163\044\140\045\150\046\144\050\143\053\152" +
    "\054\141\060\155\064\145\065\070\001\002\000\004\104" +
    "\uff18\001\002\000\034\003\075\021\237\026\100\067\226" +
    "\070\236\071\227\072\235\073\233\074\234\075\232\076" +
    "\230\077\225\100\231\001\002\000\066\003\uff20\004\uff20" +
    "\005\uff20\006\uff20\007\uff20\010\uff20\012\uff20\013\uff20\016" +
    "\uff20\026\uff20\033\uff20\036\uff20\043\uff20\044\uff20\045\uff20" +
    "\046\uff20\050\uff20\051\uff20\052\uff20\053\uff20\054\uff20\060" +
    "\uff20\064\uff20\065\uff20\073\uff20\104\uff20\001\002\000\040" +
    "\011\207\015\221\017\205\020\212\021\211\027\220\037" +
    "\214\062\202\063\215\064\206\066\216\067\204\070\223" +
    "\101\210\103\200\001\002\000\032\021\237\067\226\070" +
    "\236\071\227\072\235\073\233\074\234\075\232\076\230" +
    "\077\225\100\231\102\u0182\001\002\000\004\103\u0183\001" +
    "\002\000\054\004\064\005\077\006\061\007\055\010\072" +
    "\012\106\013\063\016\067\033\147\036\162\043\163\044" +
    "\140\045\150\046\144\050\143\053\152\054\141\060\155" +
    "\064\145\065\070\104\uff47\001\002\000\004\104\u0185\001" +
    "\002\000\054\004\uff1e\005\uff1e\006\uff1e\007\uff1e\010\uff1e" +
    "\012\uff1e\013\uff1e\016\uff1e\033\uff1e\036\uff1e\043\uff1e\044" +
    "\uff1e\045\uff1e\046\uff1e\050\uff1e\053\uff1e\054\uff1e\060\uff1e" +
    "\064\uff1e\065\uff1e\104\uff1e\001\002\000\054\003\uffd8\004" +
    "\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8\012\uffd8\013\uffd8" +
    "\016\uffd8\026\uffd8\040\uffd8\055\015\056\011\057\013\060" +
    "\021\061\012\064\uffd8\065\uffd8\073\uffd8\101\uffd8\104\uffdc" +
    "\001\002\000\004\104\uffd4\001\002\000\006\064\112\105" +
    "\110\001\002\000\022\003\uffb1\026\uffb1\031\uffb1\040\uffb1" +
    "\064\uffb1\073\uffb1\101\uffb1\102\uffb1\001\002\000\004\104" +
    "\uffd7\001\002\000\004\101\uff4f\001\002\000\004\101\u018d" +
    "\001\002\000\030\004\064\005\077\006\061\007\055\010" +
    "\072\012\106\013\063\016\067\064\123\065\070\102\uff4b" +
    "\001\002\000\004\102\u018f\001\002\000\004\103\u0190\001" +
    "\002\000\054\004\064\005\077\006\061\007\055\010\072" +
    "\012\106\013\063\016\067\033\147\036\162\043\163\044" +
    "\140\045\150\046\144\050\143\053\152\054\141\060\155" +
    "\064\145\065\070\104\uff47\001\002\000\004\104\u0192\001" +
    "\002\000\054\003\uff4e\004\uff4e\005\uff4e\006\uff4e\007\uff4e" +
    "\010\uff4e\012\uff4e\013\uff4e\016\uff4e\026\uff4e\040\uff4e\055" +
    "\uff4e\056\uff4e\057\uff4e\060\uff4e\061\uff4e\064\uff4e\065\uff4e" +
    "\073\uff4e\101\uff4e\104\uff4e\001\002\000\006\064\112\105" +
    "\110\001\002\000\022\003\uffbf\026\uffbf\031\uffbf\040\uffbf" +
    "\064\uffbf\073\uffbf\101\uffbf\102\uffbf\001\002\000\006\064" +
    "\112\105\110\001\002\000\022\003\uffb7\026\uffb7\031\uffb7" +
    "\040\uffb7\064\uffb7\073\uffb7\101\uffb7\102\uffb7\001\002\000" +
    "\006\064\112\105\110\001\002\000\022\003\uffb9\026\uffb9" +
    "\031\uffb9\040\uffb9\064\uffb9\073\uffb9\101\uffb9\102\uffb9\001" +
    "\002\000\006\064\112\105\110\001\002\000\022\003\uffb3" +
    "\026\uffb3\031\uffb3\040\uffb3\064\uffb3\073\uffb3\101\uffb3\102" +
    "\uffb3\001\002\000\006\064\112\105\110\001\002\000\022" +
    "\003\uffbb\026\uffbb\031\uffbb\040\uffbb\064\uffbb\073\uffbb\101" +
    "\uffbb\102\uffbb\001\002\000\006\064\112\105\110\001\002" +
    "\000\022\003\uffaf\026\uffaf\031\uffaf\040\uffaf\064\uffaf\073" +
    "\uffaf\101\uffaf\102\uffaf\001\002\000\034\003\075\021\237" +
    "\026\100\067\226\070\236\071\227\072\235\073\233\074" +
    "\234\075\232\076\230\077\225\100\231\001\002\000\132" +
    "\003\uffa9\004\uffa9\005\uffa9\006\uffa9\007\uffa9\010\uffa9\011" +
    "\uffa9\012\uffa9\013\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9" +
    "\021\uffa9\026\uffa9\027\uffa9\033\uffa9\036\uffa9\037\uffa9\040" +
    "\uffa9\043\uffa9\044\uffa9\045\uffa9\046\uffa9\050\uffa9\053\uffa9" +
    "\054\uffa9\055\uffa9\056\uffa9\057\uffa9\060\uffa9\061\uffa9\062" +
    "\uffa9\063\uffa9\064\uffa9\065\uffa9\066\uffa9\067\uffa9\070\uffa9" +
    "\073\uffa9\101\uffa9\102\uffa9\103\uffa9\104\uffa9\001\002\000" +
    "\030\004\064\005\077\006\061\007\055\010\072\012\106" +
    "\013\063\016\067\064\123\065\070\102\uff4b\001\002\000" +
    "\004\102\u01a3\001\002\000\004\103\u01a4\001\002\000\054" +
    "\004\064\005\077\006\061\007\055\010\072\012\106\013" +
    "\063\016\067\033\147\036\162\043\163\044\140\045\150" +
    "\046\144\050\143\053\152\054\141\060\155\064\145\065" +
    "\070\104\uff47\001\002\000\004\104\u01a6\001\002\000\054" +
    "\003\uff53\004\uff53\005\uff53\006\uff53\007\uff53\010\uff53\012" +
    "\uff53\013\uff53\016\uff53\026\uff53\040\uff53\055\uff53\056\uff53" +
    "\057\uff53\060\uff53\061\uff53\064\uff53\065\uff53\073\uff53\101" +
    "\uff53\104\uff53\001\002\000\006\064\112\105\110\001\002" +
    "\000\022\003\uffad\026\uffad\031\uffad\040\uffad\064\uffad\073" +
    "\uffad\101\uffad\102\uffad\001\002\000\054\003\uffd8\004\uffd8" +
    "\005\uffd8\006\uffd8\007\uffd8\010\uffd8\012\uffd8\013\uffd8\016" +
    "\uffd8\026\uffd8\040\uffd8\055\015\056\011\057\013\060\021" +
    "\061\012\064\uffd8\065\uffd8\073\uffd8\101\uffd8\104\uffdc\001" +
    "\002\000\004\104\uffd2\001\002\000\004\032\uffea\001\002" +
    "\000\004\032\uffec\001\002\000\004\032\uffeb\001\002\000" +
    "\004\032\uffe8\001\002\000\050\003\uffe6\004\uffe6\005\uffe6" +
    "\006\uffe6\007\uffe6\010\uffe6\012\uffe6\013\uffe6\016\uffe6\026" +
    "\uffe6\032\uffe6\040\uffe6\055\uffe6\056\uffe6\057\uffe6\064\uffe6" +
    "\065\uffe6\073\uffe6\101\uffe6\001\002\000\050\003\uffe4\004" +
    "\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4\012\uffe4\013\uffe4" +
    "\016\uffe4\026\uffe4\032\uffe4\040\uffe4\055\uffe4\056\uffe4\057" +
    "\uffe4\064\uffe4\065\uffe4\073\uffe4\101\uffe4\001\002\000\004" +
    "\002\001\001\002\000\010\003\075\025\u01b3\026\100\001" +
    "\002\000\004\064\u01b7\001\002\000\016\024\004\055\ufffa" +
    "\056\ufffa\057\ufffa\060\ufffa\061\ufffa\001\002\000\016\024" +
    "\ufffc\055\ufffc\056\ufffc\057\ufffc\060\ufffc\061\ufffc\001\002" +
    "\000\014\055\uffff\056\uffff\057\uffff\060\uffff\061\uffff\001" +
    "\002\000\010\003\075\025\u01b3\026\100\001\002\000\016" +
    "\024\ufffd\055\ufffd\056\ufffd\057\ufffd\060\ufffd\061\ufffd\001" +
    "\002\000\010\003\075\025\u01ba\026\100\001\002\000\006" +
    "\064\u01be\071\u01bf\001\002\000\016\024\004\055\ufffa\056" +
    "\ufffa\057\ufffa\060\ufffa\061\ufffa\001\002\000\016\024\ufff8" +
    "\055\ufff8\056\ufff8\057\ufff8\060\ufff8\061\ufff8\001\002\000" +
    "\014\055\ufffb\056\ufffb\057\ufffb\060\ufffb\061\ufffb\001\002" +
    "\000\010\003\075\025\u01ba\026\100\001\002\000\006\003" +
    "\075\026\100\001\002\000\016\024\ufff9\055\ufff9\056\ufff9" +
    "\057\ufff9\060\ufff9\061\ufff9\001\002\000\016\024\ufff7\055" +
    "\ufff7\056\ufff7\057\ufff7\060\ufff7\061\ufff7\001\002\000\016" +
    "\024\ufff6\055\ufff6\056\ufff6\057\ufff6\060\ufff6\061\ufff6\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01c0\000\010\002\006\005\007\006\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\015\017\017\013\020\015\021\016\001" +
    "\001\000\002\001\001\000\004\054\u01ae\001\001\000\002" +
    "\001\001\000\006\014\u01ac\020\u01ad\001\001\000\002\001" +
    "\001\000\006\013\u01ab\017\u01aa\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\055\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\132\025" +
    "\001\001\000\004\024\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\033\001\001" +
    "\000\002\001\001\000\004\024\034\001\001\000\002\001" +
    "\001\000\004\025\036\001\001\000\002\001\001\000\004" +
    "\025\040\001\001\000\004\024\041\001\001\000\002\001" +
    "\001\000\014\016\044\017\045\020\047\027\043\046\046" +
    "\001\001\000\036\007\073\022\055\023\072\026\101\031" +
    "\103\032\053\033\061\034\100\035\070\040\104\041\064" +
    "\044\075\047\052\150\056\001\001\000\002\001\001\000" +
    "\006\020\047\046\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\134" +
    "\u01a8\001\001\000\002\001\001\000\004\146\u01a6\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\030\216\043" +
    "\u019e\073\212\001\001\000\004\145\u019c\001\001\000\002" +
    "\001\001\000\004\137\u019a\001\001\000\004\143\u0198\001" +
    "\001\000\002\001\001\000\006\142\130\153\u018b\001\001" +
    "\000\004\140\u0196\001\001\000\004\141\u0194\001\001\000" +
    "\002\001\001\000\004\135\u0192\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\007\073\023" +
    "\u0189\026\101\047\052\150\056\001\001\000\004\144\u0187" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\133" +
    "\u0185\001\001\000\004\151\115\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\136\106\001\001\000\004\053" +
    "\110\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\147\113\001\001\000\004\053\114\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\152\117" +
    "\001\001\000\002\001\001\000\024\031\103\032\053\033" +
    "\061\034\100\035\070\040\104\041\064\044\123\050\121" +
    "\001\001\000\002\001\001\000\004\142\130\001\001\000" +
    "\004\154\124\001\001\000\004\051\126\001\001\000\024" +
    "\031\103\032\053\033\061\034\100\035\070\040\104\041" +
    "\064\044\123\050\127\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\053\131\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\031\163\032\134\033\136\034\160" +
    "\035\150\040\164\062\157\063\152\064\155\067\135\071" +
    "\145\075\153\076\156\077\141\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\030\216\043\u017d\073\212\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\066\u0146\102" +
    "\u0148\001\001\000\002\001\001\000\004\066\u0138\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\u012d\001" +
    "\001\000\036\031\163\032\134\033\136\034\160\035\150" +
    "\040\164\062\157\063\152\064\u012c\067\135\071\145\075" +
    "\153\076\156\077\141\001\001\000\006\007\073\026\u012b" +
    "\001\001\000\020\031\163\032\134\033\136\034\160\035" +
    "\150\040\164\071\u012a\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\052" +
    "\u011f\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\031\174\032\166\033\170\034\173\035" +
    "\172\040\175\103\167\105\176\001\001\000\002\001\001" +
    "\000\006\007\073\026\u011d\001\001\000\002\001\001\000" +
    "\004\106\u0116\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\030\216\043" +
    "\200\073\212\104\202\001\001\000\012\030\216\043\335" +
    "\060\u0113\073\212\001\001\000\004\007\u010d\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\030\216\043\u010c" +
    "\073\212\001\001\000\002\001\001\000\004\061\360\001" +
    "\001\000\002\001\001\000\010\030\216\043\346\073\212" +
    "\001\001\000\010\030\216\043\345\073\212\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\126\303\001\001" +
    "\000\002\001\001\000\004\113\277\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\030\216\043\223\073\212\001\001\000\002\001" +
    "\001\000\004\036\267\001\001\000\010\030\216\043\266" +
    "\073\212\001\001\000\010\030\216\043\265\073\212\001" +
    "\001\000\004\120\263\001\001\000\004\037\261\001\001" +
    "\000\004\120\256\001\001\000\004\124\250\001\001\000" +
    "\010\030\216\043\245\073\212\001\001\000\010\030\216" +
    "\043\244\073\212\001\001\000\010\030\216\043\243\073" +
    "\212\001\001\000\002\001\001\000\004\037\240\001\001" +
    "\000\010\030\216\043\242\073\212\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\030\216\043\255\073\212\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\030\216\043\260\073\212\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\030\216\043" +
    "\262\073\212\001\001\000\002\001\001\000\010\030\216" +
    "\043\264\073\212\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\030\216\043\271\073\212" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\031" +
    "\163\032\134\033\136\034\160\035\150\040\164\062\157" +
    "\063\152\064\273\067\135\071\145\075\153\076\156\077" +
    "\141\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\030" +
    "\216\043\301\073\212\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\127\317\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\030\216\043\330\073\212" +
    "\131\331\001\001\000\014\030\216\042\320\043\321\057" +
    "\322\073\212\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\045\325\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\030\216\042\326\043\321\073\212\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\130\333\001\001" +
    "\000\002\001\001\000\012\030\216\043\335\060\336\073" +
    "\212\001\001\000\004\065\341\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\030\216\043\343\073\212\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\065\344" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\114\350\001\001\000\002\001\001\000\010" +
    "\030\216\043\352\073\212\001\001\000\002\001\001\000" +
    "\010\030\216\043\354\073\212\001\001\000\002\001\001" +
    "\000\012\030\216\042\u0109\043\321\073\212\001\001\000" +
    "\010\004\370\121\367\122\373\001\001\000\004\056\362" +
    "\001\001\000\002\001\001\000\006\061\363\074\364\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\073\u0100\123\376\001\001\000\004\003\u0106\001\001\000" +
    "\004\113\u0105\001\001\000\004\122\u0104\001\001\000\004" +
    "\003\u0103\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\061\u0108\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\077\u010e\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\031\163\032\134" +
    "\033\136\034\160\035\150\040\164\062\157\063\152\064" +
    "\u0111\067\135\071\145\075\153\076\156\077\141\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\007\073\026\u011b\107\u011a\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\106\u0118\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\030\216\043\u0121\073\212\001\001" +
    "\000\004\125\u0123\001\001\000\010\030\216\043\u0125\073" +
    "\212\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\125\u0126\001\001\000\002\001\001\000\004\052\u0128\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\031\163\032\134\033\136\034\160\035\150\040\164" +
    "\062\157\063\152\064\u012f\067\135\071\145\075\153\076" +
    "\156\077\141\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\030\216\043\u0133\073\212\001" +
    "\001\000\002\001\001\000\004\007\u0135\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\066\u013c\070\u013b\001\001\000\012\030\216" +
    "\043\u013d\072\u013e\073\212\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\125\u0140\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\101\u0152\001\001\000\010\004\u014f\121\367\122\373" +
    "\001\001\000\010\030\216\043\u014e\073\212\001\001\000" +
    "\004\100\u014c\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\030\216\043\u014d\073\212\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\066\u0151\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\030\216\043\u0155\073\212\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\030\216\043\u0157\073\212" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\031" +
    "\163\032\134\033\136\034\160\035\150\040\164\062\157" +
    "\063\152\064\u015a\067\135\071\145\075\153\076\156\077" +
    "\141\001\001\000\002\001\001\000\004\110\u015d\001\001" +
    "\000\004\111\u015f\001\001\000\002\001\001\000\036\031" +
    "\163\032\134\033\136\034\160\035\150\040\164\062\157" +
    "\063\152\064\u0168\067\135\071\145\075\153\076\156\077" +
    "\141\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\030\216\043\u0162\073\212\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\031\163\032\134\033\136\034\160" +
    "\035\150\040\164\062\157\063\152\064\u0165\067\135\071" +
    "\145\075\153\076\156\077\141\001\001\000\002\001\001" +
    "\000\004\110\u0167\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\030\216\043\u016b\073\212" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\115" +
    "\u016f\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\030\216\042\u0171\043\321\073\212\001\001\000\002\001" +
    "\001\000\036\031\163\032\134\033\136\034\160\035\150" +
    "\040\164\062\u0177\067\u0173\071\145\075\153\076\u0176\077" +
    "\141\116\u0175\117\u0174\001\001\000\002\001\001\000\036" +
    "\031\163\032\134\033\136\034\160\035\150\040\164\062" +
    "\u0177\067\u0173\071\145\075\153\076\u0176\077\141\116\u0179" +
    "\117\u0174\001\001\000\004\115\u0178\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\031\163\032\134\033\136\034" +
    "\160\035\150\040\164\062\u0177\067\u0173\071\145\075\153" +
    "\076\u0176\077\141\116\u017c\117\u0174\001\001\000\002\001" +
    "\001\000\004\007\u017e\001\001\000\002\001\001\000\010" +
    "\030\216\043\u0180\073\212\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\031\163\032\134\033\136\034\160" +
    "\035\150\040\164\062\157\063\152\064\u0183\067\135\071" +
    "\145\075\153\076\156\077\141\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\016\u0186\017\045\020\047\027" +
    "\043\046\046\001\001\000\002\001\001\000\004\053\u0188" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\153" +
    "\u018b\001\001\000\002\001\001\000\024\031\103\032\053" +
    "\033\061\034\100\035\070\040\104\041\064\044\123\050" +
    "\u018d\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\031\163\032\134\033\136\034\160\035\150\040\164\062" +
    "\157\063\152\064\u0190\067\135\071\145\075\153\076\156" +
    "\077\141\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\053\u0193\001\001\000\002\001\001\000\004\053\u0195" +
    "\001\001\000\002\001\001\000\004\053\u0197\001\001\000" +
    "\002\001\001\000\004\053\u0199\001\001\000\002\001\001" +
    "\000\004\053\u019b\001\001\000\002\001\001\000\004\053" +
    "\u019d\001\001\000\002\001\001\000\004\007\u019f\001\001" +
    "\000\002\001\001\000\024\031\103\032\053\033\061\034" +
    "\100\035\070\040\104\041\064\044\123\050\u01a1\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\031\163\032" +
    "\134\033\136\034\160\035\150\040\164\062\157\063\152" +
    "\064\u01a4\067\135\071\145\075\153\076\156\077\141\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\053\u01a7" +
    "\001\001\000\002\001\001\000\014\016\u01a9\017\045\020" +
    "\047\027\043\046\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\u01b4\012\u01b3\001\001\000\002\001\001\000" +
    "\004\006\u01b5\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\u01b4\012\u01b7\001\001\000\002\001\001\000" +
    "\006\007\u01bb\010\u01ba\001\001\000\004\011\u01bf\001\001" +
    "\000\004\006\u01bc\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\u01bb\010\u01c1\001\001\000\004\007\u01c0" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        private ClassSyntax classFinalSystax ;
        private ListType typeDate = null;
        private ListType typeMethods = null;
        private Symbol s;
        private String nameClass;
        private String nameVariable;
        private String nameMethods;
        private List<Method> ListMethods =new ArrayList<>();
        private List<Variable> ListVariable= new ArrayList<>();
        private List<Variable> listParameters= new ArrayList<>();
        private int errorCounter= 0;

        Sintactico(Lexico lexico){
            super(lexico);
        }
        public void syntax_error(Symbol cur_token) {
            errorCounter++;
            Console.ConsoleText.append("\n"+errorCounter+" - Clase<"+nameClass+"> en simbolo<" + sym.terminalNames[cur_token.sym]+String.format(">posicion: <%d>, <%d>", (cur_token.left+1), (cur_token.right+1)));
        }
        /*public void unrecovered_syntax_error(Symbol cur_token) {
            if (cur_token.sym == sym.EOF) {
             System.out.println("public void unrecoveredsyntax_error!!!!!!!!!!!!!!");
            }
        }*/
        public Symbol getSymbol(){
            return this.s;
        }

       private void addVariable (int aleft,int aright){
          /*  System.out.println("***************VARIABLE******************");
            System.out.println("tipo:"+typeDate+"x:"+(aright+1)+"y:"+(aleft+1)+"name:"+nameVariable);
            System.out.println("****************************************");*/
            ListVariable.add(new Variable(typeDate,aright+1,aleft+1,nameVariable));
            typeDate=null;
            nameVariable = "";
        }
        private void addMethods (int aleft,int aright){
            /*
            System.out.println("***************METODOS******************");
            System.out.println("tipo:"+typeDate+"x:"+(aright+1)+"y:"+(aleft+1)+"name:"+nameMethods);
            System.out.println("****************************************");*/
            if(typeMethods ==null){
                typeMethods = ListType.CONSTRUCTOR;
            }
            ListMethods.add(new Method(typeMethods, listParameters, (aright+1), (aleft+1), nameMethods));
            listParameters =  new ArrayList<>();
            typeMethods=null;
            nameVariable = "";
        }
        private void addMethodsParameters (int aleft,int aright){
            /*System.out.println("*Methods Parameters");
            System.out.println("tipo:"+typeDate+"x:"+(aright+1)+"y:"+(aleft+1)+"name:"+nameVariable);
            System.out.println("****************************************");*/
            listParameters.add(new Variable(typeDate,aright+1,aleft+1,nameVariable));
            typeDate=null;
            nameVariable = "";
        }
        public void arrayType() {
        switch (typeDate) {
            case BYTE:
                typeDate = ListType.ARRAYBYTE;
                break;
            case SHORT:
                typeDate = ListType.ARRAYSHORT;
                break;
            case INT:
                typeDate = ListType.ARRAYINT;
                break;
            case LONG:
                typeDate = ListType.ARRAYLONG;
                break;
            case FLOAT:
                typeDate = ListType.ARRAYFLOAT;
                break;
            case DOUBLE:
                typeDate = ListType.ARRAYDOUBLE;
                break;
            case CHAR:
                typeDate = ListType.ARRAYCHAR;
                break;
            case BOOLEAN:
                typeDate = ListType.ARRAYBOOLEAN;
                break;
            case STRING:
                typeDate = ListType.ARRAYSTRING;
                break;
            case OBJECT:
                typeDate = ListType.ARRAYOBJECT;
                break;
            default:
                break;
        }
    }
    public String getNameClass(){
        return this.nameClass;
    }
        public int getErrorCounter(){
            return this.errorCounter;
        }
        public List<Variable> getListVariable() {
        return ListVariable;
        }
        public List<Method> getListMethods() {
        return ListMethods;
        }
        public ClassSyntax getClassSyntax(){
            return this.classFinalSystax;
        }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= encabezado clase 
            {
              Object RESULT =null;
		classFinalSystax = new ClassSyntax(nameClass, ListMethods, ListVariable, null);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // encabezado ::= PACKAGE ID pc importacion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("encabezado",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // encabezado ::= importacion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("encabezado",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // pc ::= PUNTO ID pc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("pc",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // pc ::= p 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("pc",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // importacion ::= IMPORT ID sp importacion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("importacion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // importacion ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("importacion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sp ::= PUNTO spp 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sp",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sp ::= p 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sp",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // spp ::= MULTIPLICACION p 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("spp",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // spp ::= ID sp 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("spp",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // p ::= PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("p",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // p ::= error 
            {
              Object RESULT =null;
		System.out.println("te falto colocar ;");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("p",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$0 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
nameClass = a.toString();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",88, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // clase ::= v CLASS ID NT$0 herencia L_APERTURA internoClase L_CIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("clase",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // herencia ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("herencia",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // herencia ::= EXNTENDS ID secuenciIDHRE herencia 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("herencia",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // herencia ::= IMPLEMENTS ID secuenciIDHRE herencia 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("herencia",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // secuenciIDHRE ::= PUNTO ID secuenciIDHRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("secuenciIDHRE",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // secuenciIDHRE ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("secuenciIDHRE",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // v ::= staticCfianl vfactorizadoStatic 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("v",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // v ::= vc vfactorizadoVC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("v",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // vfactorizadoStatic ::= vc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vfactorizadoStatic",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // vfactorizadoStatic ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vfactorizadoStatic",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // vfactorizadoVC ::= staticCfianl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vfactorizadoVC",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // vfactorizadoVC ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vfactorizadoVC",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // staticCfianl ::= STATIC staticFactori 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("staticCfianl",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // staticCfianl ::= FINAL finalFactori 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("staticCfianl",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // staticFactori ::= FINAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("staticFactori",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // staticFactori ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("staticFactori",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // finalFactori ::= STATIC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("finalFactori",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // finalFactori ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("finalFactori",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // vc ::= PUBLIC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vc",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // vc ::= PRIVATE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vc",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // vc ::= PROTECTED 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vc",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // internoClase ::= vGlobal internoClaseFa 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("internoClase",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // internoClase ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("internoClase",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // vGlobal ::= vc vGlobalFac 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vGlobal",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // vGlobal ::= vGlobalFac 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vGlobal",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // vGlobalFac ::= staticCfianl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vGlobalFac",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // vGlobalFac ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vGlobalFac",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // internoClaseFa ::= variableID ayuda 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("internoClaseFa",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // internoClaseFa ::= ayuda 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("internoClaseFa",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$1 ::= 
            {
              Object RESULT =null;

            int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		    int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
            addVariable(aleft,aright);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$1",89, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ayuda ::= asignacionVariable NT$1 internoClase 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ayuda",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$2 ::= 
            {
              Object RESULT =null;

            int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		    int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
            addMethods(aleft,aright);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$2",90, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ayuda ::= metodo NT$2 internoClase 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ayuda",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // variableID ::= numFloat 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableID",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // variableID ::= numDouble 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableID",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // variableID ::= variableChar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableID",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // variableID ::= variableBoolean 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableID",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // variableID ::= variableStirng 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableID",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // variableID ::= variableObject 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableID",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // variableID ::= numEntero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableID",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // typeVarible ::= ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("typeVarible",84, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // typeVarible ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("typeVarible",84, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // typeVarible ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("typeVarible",84, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // typeVarible ::= CHAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("typeVarible",84, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // typeVarible ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("typeVarible",84, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // typeVarible ::= STRING 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("typeVarible",84, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // typeVarible ::= BYTE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("typeVarible",84, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // typeVarible ::= SHORT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("typeVarible",84, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // typeVarible ::= INT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("typeVarible",84, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // typeVarible ::= LONG 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("typeVarible",84, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$3 ::= 
            {
              Object RESULT =null;
typeDate = ListType.FLOAT;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$3",91, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // numFloat ::= FLOAT NT$3 onlyIDArray 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("numFloat",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$4 ::= 
            {
              Object RESULT =null;
typeDate = ListType.DOUBLE;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$4",92, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // numDouble ::= DOUBLE NT$4 onlyIDArray 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("numDouble",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$5 ::= 
            {
              Object RESULT =null;
typeDate = ListType.CHAR;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$5",93, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // variableChar ::= CHAR NT$5 onlyIDArray 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableChar",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$6 ::= 
            {
              Object RESULT =null;
typeDate = ListType.BOOLEAN;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$6",94, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // variableBoolean ::= BOOLEAN NT$6 onlyIDArray 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableBoolean",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$7 ::= 
            {
              Object RESULT =null;
typeDate = ListType.STRING;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$7",95, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // variableStirng ::= STRING NT$7 onlyIDArray 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableStirng",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$8 ::= 
            {
              Object RESULT =null;
typeDate = ListType.OBJECT;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$8",96, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // variableObject ::= ID NT$8 onlyIDArray 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableObject",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$9 ::= 
            {
              Object RESULT =null;
typeDate = ListType.BYTE;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$9",97, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // numEntero ::= BYTE NT$9 onlyIDArray 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("numEntero",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$10 ::= 
            {
              Object RESULT =null;
typeDate = ListType.SHORT;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$10",98, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // numEntero ::= SHORT NT$10 onlyIDArray 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("numEntero",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$11 ::= 
            {
              Object RESULT =null;
typeDate = ListType.INT;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$11",99, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // numEntero ::= INT NT$11 onlyIDArray 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("numEntero",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$12 ::= 
            {
              Object RESULT =null;
typeDate = ListType.LONG;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$12",100, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // numEntero ::= LONG NT$12 onlyIDArray 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("numEntero",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // onlyIDArray ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		nameVariable = a.toString();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("onlyIDArray",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NT$13 ::= 
            {
              Object RESULT =null;
arrayType();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$13",101, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // onlyIDArray ::= C_APERTURA C_CIERRE NT$13 onlyIDArray 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("onlyIDArray",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // asignacionVariable ::= IGUAL tDatos p 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacionVariable",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // asignacionVariable ::= p 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacionVariable",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // tDatos ::= P_APERTURA tDatos P_CIERRE tDatosFac 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatos",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // tDatos ::= tDatos IGUAL igualSimple tDatos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatos",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // tDatos ::= tDatos MAYOR_Q menorYmayorIgual tDatos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatos",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // tDatos ::= tDatos MENOR_Q menorYmayorIgual tDatos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatos",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // tDatos ::= tDatos Y dosY tDatos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatos",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // tDatos ::= tDatos O dosO tDatos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatos",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // tDatos ::= tDatos ADMIRACION IGUAL dosO tDatos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatos",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // tDatos ::= tDatos SUMA tDatos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatos",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // tDatos ::= tDatos RESTA tDatos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatos",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // tDatos ::= tDatos DIVISION tDatos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatos",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // tDatos ::= tDatos MULTIPLICACION tDatos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatos",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // tDatos ::= tDatos MODULO tDatos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatos",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // tDatos ::= vChar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatos",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // tDatos ::= F 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatos",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // tDatos ::= L_APERTURA lCon 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatos",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // tDatos ::= NEW typeVarible newParentesisOCochtes 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatos",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // tDatos ::= FALSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatos",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // tDatos ::= TRUE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatos",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // tDatos ::= ADMIRACION tDatos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatos",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // tDatos ::= RESTA tDatos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatos",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // tDatos ::= SUMA tDatos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatos",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // tDatos ::= ENTERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatos",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // tDatos ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatos",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // tDatos ::= TEXT textOperar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatos",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // tDatos ::= usarOBJECT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatos",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // newParentesisOCochtes ::= P_APERTURA tFact 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("newParentesisOCochtes",85, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // newParentesisOCochtes ::= C_APERTURA tDatosserietDatos C_CIERRE serietDatos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("newParentesisOCochtes",85, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // serietDatos ::= L_APERTURA lCon 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("serietDatos",86, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // serietDatos ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("serietDatos",86, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // tDatosserietDatos ::= tDatos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatosserietDatos",87, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // tDatosserietDatos ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatosserietDatos",87, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // igualSimple ::= IGUAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("igualSimple",82, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // igualSimple ::= SUMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("igualSimple",82, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // igualSimple ::= RESTA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("igualSimple",82, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // igualSimple ::= DIVISION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("igualSimple",82, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // igualSimple ::= MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("igualSimple",82, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // igualSimple ::= MODULO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("igualSimple",82, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // igualSimple ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("igualSimple",82, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // tDatosFac ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatosFac",74, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // tDatosFac ::= INTERO tDatos DOBLE_PUNTO tDatos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatosFac",74, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // menorYmayorIgual ::= IGUAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("menorYmayorIgual",78, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // menorYmayorIgual ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("menorYmayorIgual",78, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // vChar ::= SIMPLE_COMILLA CARACTER SIMPLE_COMILLA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vChar",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // vChar ::= CHARTN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vChar",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // tFact ::= dSeguidoF P_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tFact",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // tFact ::= P_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tFact",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // dSeguidoF ::= tDatos objectInst 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dSeguidoF",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // objectInst ::= COMA dSeguidoF 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("objectInst",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // objectInst ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("objectInst",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // lCon ::= tDatos lConFact L_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lCon",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // lCon ::= L_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lCon",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // lConFact ::= COMA tDatos lConFact 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lConFact",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // lConFact ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lConFact",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // textOperar ::= SUMA tDatos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("textOperar",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // textOperar ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("textOperar",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // dosY ::= Y 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dosY",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // dosY ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dosY",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // dosO ::= O 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dosO",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // dosO ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dosO",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // opBooleanIGUALFac ::= tDatos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("opBooleanIGUALFac",72, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // opBooleanIGUALFac ::= IGUAL tDatos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("opBooleanIGUALFac",72, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // j ::= operacionNumericaRecusividad 
            {
              String RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("j",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // operaionNumerica ::= 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operaionNumerica",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // operacionNumericaRecusividad ::= operacionNumericaPrima operacionNumericaTerminales operacionNumericaPrima 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionNumericaRecusividad",79, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // operacionNumericaPrima ::= SUMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionNumericaPrima",80, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // operacionNumericaPrima ::= RESTA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionNumericaPrima",80, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // operacionNumericaPrima ::= DIVISION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionNumericaPrima",80, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // operacionNumericaPrima ::= MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionNumericaPrima",80, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // operacionNumericaPrima ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionNumericaPrima",80, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // operacionNumericaTerminales ::= RESTA operaionNumerica 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionNumericaTerminales",81, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // operacionNumericaTerminales ::= SUMA operaionNumerica 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionNumericaTerminales",81, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // operacionNumericaTerminales ::= ENTERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionNumericaTerminales",81, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // operacionNumericaTerminales ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionNumericaTerminales",81, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // operacionNumericaTerminales ::= TEXT textOperar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionNumericaTerminales",81, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // operacionNumericaTerminales ::= usarOBJECT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operacionNumericaTerminales",81, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // usarOBJECT ::= ID idDato 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("usarOBJECT",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // idDato ::= PUNTO idDatoFac 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("idDato",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // idDato ::= C_APERTURA j C_CIERRE idDato 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("idDato",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // idDato ::= P_APERTURA dSeguidoF P_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("idDato",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // idDato ::= P_APERTURA P_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("idDato",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // idDato ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("idDato",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // idDatoFac ::= ID idGet 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("idDatoFac",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // idGet ::= idDato 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("idGet",58, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // NT$14 ::= 
            {
              Object RESULT =null;
nameMethods=nameVariable;typeMethods = typeDate;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$14",102, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // metodo ::= NT$14 P_APERTURA pMetodoS P_CIERRE L_APERTURA localMetodo L_CIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("metodo",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // NT$15 ::= 
            {
              Object RESULT =null;
typeMethods = ListType.VOID;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$15",103, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // NT$16 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
nameMethods = a.toString();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$16",104, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // metodo ::= VOID NT$15 ID NT$16 P_APERTURA pMetodoS P_CIERRE L_APERTURA localMetodo L_CIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("metodo",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // NT$17 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
nameMethods = a.toString();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$17",105, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // metodo ::= ID NT$17 P_APERTURA pMetodoS P_CIERRE L_APERTURA localMetodo L_CIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("metodo",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // NT$18 ::= 
            {
              Object RESULT =null;

            int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		    int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
            addMethodsParameters(aleft,aright);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$18",106, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // pMetodoS ::= variableID NT$18 pMetodoSP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("pMetodoS",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // pMetodoS ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("pMetodoS",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // pMetodoSP ::= COMA pMetodoS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("pMetodoSP",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // pMetodoSP ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("pMetodoSP",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // localMetodo ::= local localMetodo 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("localMetodo",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // localMetodo ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("localMetodo",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // local ::= variableLocal 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("local",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // local ::= sentenciaControl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("local",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // local ::= terminalAccion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("local",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // variableLocal ::= variableLocalFinal asignacionVariable 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableLocal",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // variableLocalFinal ::= FINAL variableIDLocal 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableLocalFinal",59, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // variableLocalFinal ::= variableIDLocal 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableLocalFinal",59, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // variableLocalFinal ::= usarVariable 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableLocalFinal",59, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // variableLocalFinal ::= terminalAccion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableLocalFinal",59, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // variableIDLocal ::= numFloat 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableIDLocal",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // variableIDLocal ::= numDouble 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableIDLocal",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // variableIDLocal ::= variableChar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableIDLocal",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // variableIDLocal ::= variableBoolean 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableIDLocal",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // variableIDLocal ::= variableStirng 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableIDLocal",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // variableIDLocal ::= numEntero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableIDLocal",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // loclaMetodFacto ::= PUNTO ID variableObjectUsarCrear 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("loclaMetodFacto",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // loclaMetodFacto ::= ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("loclaMetodFacto",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // loclaMetodFacto ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("loclaMetodFacto",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // variableObjectUsarCrear ::= P_APERTURA variableSet 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableObjectUsarCrear",54, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // variableObjectUsarCrear ::= loclaMetodFacto 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableObjectUsarCrear",54, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // variableSet ::= tDatos secuenciDatos P_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableSet",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // variableSet ::= P_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableSet",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // usarVariable ::= ID usarVariableFacto 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("usarVariable",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // usarVariable ::= THIS loclaMetodFacto 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("usarVariable",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // usarVariable ::= SUPER soloId P_APERTURA tDatos secuenciDatos P_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("usarVariable",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // soloId ::= PUNTO ID soloId 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("soloId",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // soloId ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("soloId",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // secuenciDatos ::= COMA tDatos secuenciDatos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("secuenciDatos",83, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // secuenciDatos ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("secuenciDatos",83, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // usarVariableFacto ::= SUMA sumarIgual 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("usarVariableFacto",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // usarVariableFacto ::= RESTA restarIgual 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("usarVariableFacto",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // usarVariableFacto ::= loclaMetodFacto 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("usarVariableFacto",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // usarVariableFacto ::= IGUAL tDatos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("usarVariableFacto",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // usarVariableFacto ::= C_APERTURA j C_CIERRE loclaMetodFacto 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("usarVariableFacto",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // usarVariableFacto ::= P_APERTURA P_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("usarVariableFacto",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // restarIgual ::= IGUAL tDatos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("restarIgual",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // restarIgual ::= RESTA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("restarIgual",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // sumarIgual ::= IGUAL tDatos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sumarIgual",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // sumarIgual ::= SUMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sumarIgual",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // terminalAccion ::= RETURN tDatos p 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("terminalAccion",53, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // terminalAccion ::= BREAK p 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("terminalAccion",53, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // sentenciaControl ::= WHILE P_APERTURA tDatos P_CIERRE L_APERTURA localMetodo L_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciaControl",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // sentenciaControl ::= DO L_APERTURA localMetodo L_CIERRE WHILE P_APERTURA tDatos P_CIERRE p 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciaControl",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // sentenciaControl ::= IF P_APERTURA tDatos P_CIERRE L_APERTURA localMetodo L_CIERRE sentenciaElse 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciaControl",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // sentenciaControl ::= SWITCH P_APERTURA tDatos P_CIERRE L_APERTURA internoSwitch L_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciaControl",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // sentenciaControl ::= FOR P_APERTURA inializarVariable sentenciaFor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciaControl",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // internoSwitch ::= CASE dSeguidoF DOBLE_PUNTO localSwitch internoSwitch 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("internoSwitch",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // internoSwitch ::= DEFAULT DOBLE_PUNTO localSwitch 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("internoSwitch",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // internoSwitch ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("internoSwitch",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // localSwitch ::= localSwitchDeclaracion localSwitch 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("localSwitch",76, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // localSwitch ::= terminalAccion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("localSwitch",76, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // localSwitchDeclaracion ::= variableLocal 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("localSwitchDeclaracion",77, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // localSwitchDeclaracion ::= sentenciaControl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("localSwitchDeclaracion",77, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // sentenciaFor ::= P_CIERRE L_APERTURA localMetodo L_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciaFor",66, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // sentenciaFor ::= tDatos p usarVariable P_CIERRE L_APERTURA localMetodo L_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciaFor",66, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // inializarVariable ::= variableIDFor asignacionVariable 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("inializarVariable",67, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // inializarVariable ::= ID forVariableId 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("inializarVariable",67, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // variableIDFor ::= numFloat 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableIDFor",65, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // variableIDFor ::= numDouble 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableIDFor",65, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // variableIDFor ::= variableChar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableIDFor",65, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // variableIDFor ::= variableBoolean 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableIDFor",65, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // variableIDFor ::= variableStirng 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableIDFor",65, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // variableIDFor ::= numEntero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableIDFor",65, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // forVariableId ::= ID forVariableIdFac 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("forVariableId",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // forVariableId ::= C_APERTURA C_CIERRE forVariableId 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("forVariableId",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // forVariableIdFac ::= DOBLE_PUNTO ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("forVariableIdFac",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // forVariableIdFac ::= asignacionVariable 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("forVariableIdFac",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // sentenciaElse ::= ELSE sentenciaElseFac 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciaElse",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // sentenciaElse ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciaElse",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // sentenciaElseFac ::= L_APERTURA localMetodo L_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciaElseFac",71, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // sentenciaElseFac ::= IF P_APERTURA tDatos P_CIERRE L_APERTURA localMetodo L_CIERRE sentenciaElse 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciaElseFac",71, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
