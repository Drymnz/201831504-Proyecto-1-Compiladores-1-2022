
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.cunoc.JFlex_Cup.Java;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import com.cunoc.Server.Console;
import com.cunoc.JFlex_Cup.Java.repetition.ListType;
import com.cunoc.JFlex_Cup.Java.repetition.Method;
import com.cunoc.JFlex_Cup.Java.repetition.Variable;
import com.cunoc.JFlex_Cup.Java.repetition.ClassSyntax;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0100\000\002\002\004\000\002\002\004\000\002\003" +
    "\006\000\002\003\003\000\002\010\005\000\002\010\003" +
    "\000\002\004\007\000\002\004\002\000\002\110\003\000" +
    "\002\110\002\000\002\006\004\000\002\006\003\000\002" +
    "\007\004\000\002\007\004\000\002\005\003\000\002\005" +
    "\003\000\002\127\002\000\002\013\012\000\002\022\002" +
    "\000\002\022\006\000\002\022\006\000\002\023\005\000" +
    "\002\023\002\000\002\017\004\000\002\017\004\000\002" +
    "\011\003\000\002\011\002\000\002\012\003\000\002\012" +
    "\002\000\002\016\004\000\002\016\004\000\002\053\003" +
    "\000\002\053\002\000\002\054\003\000\002\054\002\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\014\004\000\002\014\002\000\002\025\004\000\002\025" +
    "\003\000\002\043\003\000\002\043\002\000\002\020\004" +
    "\000\002\020\003\000\002\130\002\000\002\021\005\000" +
    "\002\131\002\000\002\021\005\000\002\041\003\000\002" +
    "\041\003\000\002\041\003\000\002\041\003\000\002\041" +
    "\003\000\002\041\003\000\002\041\003\000\002\116\003" +
    "\000\002\116\003\000\002\116\003\000\002\116\003\000" +
    "\002\116\003\000\002\116\003\000\002\116\003\000\002" +
    "\116\003\000\002\116\003\000\002\116\003\000\002\116" +
    "\003\000\002\132\002\000\002\030\005\000\002\133\002" +
    "\000\002\032\005\000\002\134\002\000\002\033\005\000" +
    "\002\135\002\000\002\034\005\000\002\136\002\000\002" +
    "\035\005\000\002\137\002\000\002\036\005\000\002\140" +
    "\002\000\002\031\005\000\002\141\002\000\002\031\005" +
    "\000\002\142\002\000\002\031\005\000\002\143\002\000" +
    "\002\031\005\000\002\052\004\000\002\144\002\000\002" +
    "\052\006\000\002\070\004\000\002\070\002\000\002\024" +
    "\005\000\002\024\003\000\002\125\003\000\002\125\005" +
    "\000\002\126\005\000\002\126\003\000\002\040\004\000" +
    "\002\027\003\000\002\027\003\000\002\027\004\000\002" +
    "\027\005\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\004\000\002\027\004\000\002\027\003\000" +
    "\002\044\004\000\002\044\002\000\002\124\005\000\002" +
    "\124\005\000\002\061\004\000\002\061\006\000\002\061" +
    "\002\000\002\120\003\000\002\120\003\000\002\120\003" +
    "\000\002\120\003\000\002\120\003\000\002\120\003\000" +
    "\002\120\003\000\002\120\003\000\002\120\003\000\002" +
    "\121\003\000\002\121\003\000\002\121\003\000\002\121" +
    "\003\000\002\121\003\000\002\121\003\000\002\121\003" +
    "\000\002\121\003\000\002\121\003\000\002\121\003\000" +
    "\002\121\003\000\002\121\003\000\002\121\003\000\002" +
    "\121\003\000\002\121\003\000\002\117\004\000\002\117" +
    "\006\000\002\122\004\000\002\122\002\000\002\123\003" +
    "\000\002\123\002\000\002\026\005\000\002\026\003\000" +
    "\002\056\004\000\002\056\003\000\002\037\004\000\002" +
    "\042\004\000\002\042\002\000\002\057\005\000\002\057" +
    "\003\000\002\065\005\000\002\065\002\000\002\074\004" +
    "\000\002\060\004\000\002\060\006\000\002\060\004\000" +
    "\002\060\002\000\002\111\004\000\002\111\003\000\002" +
    "\055\004\000\002\145\002\000\002\045\011\000\002\146" +
    "\002\000\002\147\002\000\002\045\014\000\002\150\002" +
    "\000\002\045\012\000\002\151\002\000\002\046\005\000" +
    "\002\046\002\000\002\047\004\000\002\047\002\000\002" +
    "\064\004\000\002\064\002\000\002\063\003\000\002\063" +
    "\003\000\002\063\003\000\002\062\004\000\002\075\004" +
    "\000\002\075\003\000\002\075\003\000\002\075\003\000" +
    "\002\072\003\000\002\072\003\000\002\072\003\000\002" +
    "\072\003\000\002\072\003\000\002\072\003\000\002\077" +
    "\004\000\002\077\004\000\002\077\010\000\002\050\005" +
    "\000\002\050\002\000\002\115\005\000\002\115\002\000" +
    "\002\100\003\000\002\100\004\000\002\100\003\000\002" +
    "\100\004\000\002\100\004\000\002\100\004\000\002\100" +
    "\004\000\002\100\004\000\002\100\003\000\002\100\006" +
    "\000\002\100\004\000\002\066\005\000\002\066\002\000" +
    "\002\071\004\000\002\071\003\000\002\073\005\000\002" +
    "\073\003\000\002\067\005\000\002\067\004\000\002\076" +
    "\007\000\002\076\011\000\002\076\010\000\002\076\011" +
    "\000\002\076\006\000\002\051\005\000\002\112\007\000" +
    "\002\112\005\000\002\112\002\000\002\113\004\000\002" +
    "\113\003\000\002\114\003\000\002\114\003\000\002\102" +
    "\004\000\002\102\007\000\002\103\004\000\002\103\004" +
    "\000\002\101\003\000\002\101\003\000\002\101\003\000" +
    "\002\101\003\000\002\101\003\000\002\101\003\000\002" +
    "\101\003\000\002\104\004\000\002\104\005\000\002\105" +
    "\004\000\002\105\003\000\002\106\004\000\002\106\002" +
    "\000\002\107\005\000\002\107\012\000\002\107\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01af\000\020\023\005\024\004\055\ufffa\056\ufffa\057" +
    "\ufffa\060\ufffa\061\ufffa\001\002\000\006\061\u01a7\064\ufff8" +
    "\001\002\000\004\064\u019f\001\002\000\014\055\ufffe\056" +
    "\ufffe\057\ufffe\060\ufffe\061\ufffe\001\002\000\004\002\u019e" +
    "\001\002\000\014\055\016\056\011\057\013\060\021\061" +
    "\012\001\002\000\046\003\uffde\004\uffde\005\uffde\006\uffde" +
    "\007\uffde\010\uffde\012\uffde\013\uffde\016\uffde\026\uffde\032" +
    "\uffde\040\uffde\060\uffde\061\uffde\064\uffde\065\uffde\102\uffde" +
    "\116\uffde\001\002\000\052\003\uffe1\004\uffe1\005\uffe1\006" +
    "\uffe1\007\uffe1\010\uffe1\012\uffe1\013\uffe1\016\uffe1\026\uffe1" +
    "\032\uffe1\040\uffe1\055\uffe1\056\uffe1\057\uffe1\060\u019d\064" +
    "\uffe1\065\uffe1\102\uffe1\116\uffe1\001\002\000\046\003\uffdc" +
    "\004\uffdc\005\uffdc\006\uffdc\007\uffdc\010\uffdc\012\uffdc\013" +
    "\uffdc\016\uffdc\026\uffdc\032\uffdc\040\uffdc\060\uffdc\061\uffdc" +
    "\064\uffdc\065\uffdc\102\uffdc\116\uffdc\001\002\000\010\032" +
    "\uffe5\060\021\061\012\001\002\000\012\032\uffe7\055\016" +
    "\056\011\057\013\001\002\000\046\003\uffdd\004\uffdd\005" +
    "\uffdd\006\uffdd\007\uffdd\010\uffdd\012\uffdd\013\uffdd\016\uffdd" +
    "\026\uffdd\032\uffdd\040\uffdd\060\uffdd\061\uffdd\064\uffdd\065" +
    "\uffdd\102\uffdd\116\uffdd\001\002\000\004\032\024\001\002" +
    "\000\004\002\000\001\002\000\052\003\uffdf\004\uffdf\005" +
    "\uffdf\006\uffdf\007\uffdf\010\uffdf\012\uffdf\013\uffdf\016\uffdf" +
    "\026\uffdf\032\uffdf\040\uffdf\055\uffdf\056\uffdf\057\uffdf\061" +
    "\022\064\uffdf\065\uffdf\102\uffdf\116\uffdf\001\002\000\050" +
    "\003\uffe0\004\uffe0\005\uffe0\006\uffe0\007\uffe0\010\uffe0\012" +
    "\uffe0\013\uffe0\016\uffe0\026\uffe0\032\uffe0\040\uffe0\055\uffe0" +
    "\056\uffe0\057\uffe0\064\uffe0\065\uffe0\102\uffe0\116\uffe0\001" +
    "\002\000\050\003\uffe3\004\uffe3\005\uffe3\006\uffe3\007\uffe3" +
    "\010\uffe3\012\uffe3\013\uffe3\016\uffe3\026\uffe3\032\uffe3\040" +
    "\uffe3\055\uffe3\056\uffe3\057\uffe3\064\uffe3\065\uffe3\102\uffe3" +
    "\116\uffe3\001\002\000\004\064\025\001\002\000\010\034" +
    "\ufff1\035\ufff1\120\ufff1\001\002\000\010\034\031\035\030" +
    "\120\uffef\001\002\000\004\120\043\001\002\000\004\064" +
    "\040\001\002\000\004\064\032\001\002\000\012\025\033" +
    "\034\uffeb\035\uffeb\120\uffeb\001\002\000\004\064\036\001" +
    "\002\000\010\034\031\035\030\120\uffef\001\002\000\004" +
    "\120\uffee\001\002\000\012\025\033\034\uffeb\035\uffeb\120" +
    "\uffeb\001\002\000\010\034\uffec\035\uffec\120\uffec\001\002" +
    "\000\012\025\033\034\uffeb\035\uffeb\120\uffeb\001\002\000" +
    "\010\034\031\035\030\120\uffef\001\002\000\004\120\uffed" +
    "\001\002\000\054\003\uffd6\004\uffd6\005\uffd6\006\uffd6\007" +
    "\uffd6\010\uffd6\012\uffd6\013\uffd6\016\uffd6\026\uffd6\040\uffd6" +
    "\055\016\056\011\057\013\060\021\061\012\064\uffd6\065" +
    "\uffd6\102\uffd6\116\uffd6\121\uffda\001\002\000\040\003\075" +
    "\004\062\005\077\006\061\007\055\010\072\012\106\013" +
    "\063\016\067\026\100\040\103\064\066\065\070\102\060" +
    "\116\uff58\001\002\000\004\121\052\001\002\000\044\003" +
    "\uffd6\004\uffd6\005\uffd6\006\uffd6\007\uffd6\010\uffd6\012\uffd6" +
    "\013\uffd6\016\uffd6\026\uffd6\040\uffd6\060\021\061\012\064" +
    "\uffd6\065\uffd6\102\uffd6\116\uffd6\001\002\000\040\003\uffd8" +
    "\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8\012\uffd8\013" +
    "\uffd8\016\uffd8\026\uffd8\040\uffd8\064\uffd8\065\uffd8\102\uffd8" +
    "\116\uffd8\001\002\000\040\003\uffd7\004\uffd7\005\uffd7\006" +
    "\uffd7\007\uffd7\010\uffd7\012\uffd7\013\uffd7\016\uffd7\026\uffd7" +
    "\040\uffd7\064\uffd7\065\uffd7\102\uffd7\116\uffd7\001\002\000" +
    "\040\003\uffd9\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9" +
    "\012\uffd9\013\uffd9\016\uffd9\026\uffd9\040\uffd9\064\uffd9\065" +
    "\uffd9\102\uffd9\116\uffd9\001\002\000\004\002\ufff0\001\002" +
    "\000\054\003\uffd1\004\uffd1\005\uffd1\006\uffd1\007\uffd1\010" +
    "\uffd1\012\uffd1\013\uffd1\016\uffd1\026\uffd1\040\uffd1\055\uffd1" +
    "\056\uffd1\057\uffd1\060\uffd1\061\uffd1\064\uffd1\065\uffd1\102" +
    "\uffd1\116\uffd1\121\uffd1\001\002\000\022\003\uffc9\026\uffc9" +
    "\031\uffc9\040\uffc9\064\uffc9\102\uffc9\116\uffc9\117\uffc9\001" +
    "\002\000\006\064\uffab\122\uffab\001\002\000\004\121\uffdb" +
    "\001\002\000\004\116\u018e\001\002\000\036\003\217\011" +
    "\213\015\227\017\211\020\216\021\215\027\225\037\221" +
    "\062\206\063\222\064\212\066\223\116\214\120\204\001" +
    "\002\000\006\064\uffad\122\uffad\001\002\000\006\064\uffb1" +
    "\122\uffb1\001\002\000\006\064\uffb9\122\uffb9\001\002\000" +
    "\022\003\uffce\026\uffce\031\uffce\040\uffce\064\uffce\102\uffce" +
    "\116\uffce\117\uffce\001\002\000\022\003\uffca\026\uffca\031" +
    "\uffca\040\uffca\064\uffca\102\uffca\116\uffca\117\uffca\001\002" +
    "\000\010\064\uffb3\116\uff53\122\uffb3\001\002\000\006\064" +
    "\uffb7\122\uffb7\001\002\000\006\064\uffb5\122\uffb5\001\002" +
    "\000\022\003\uffcc\026\uffcc\031\uffcc\040\uffcc\064\uffcc\102" +
    "\uffcc\116\uffcc\117\uffcc\001\002\000\006\064\uffbd\122\uffbd" +
    "\001\002\000\004\121\uffd4\001\002\000\126\003\uffa3\004" +
    "\uffa3\005\uffa3\006\uffa3\007\uffa3\010\uffa3\011\uffa3\012\uffa3" +
    "\013\uffa3\015\uffa3\016\uffa3\017\uffa3\020\uffa3\021\uffa3\026" +
    "\uffa3\027\uffa3\033\uffa3\036\uffa3\037\uffa3\040\uffa3\043\uffa3" +
    "\044\uffa3\045\uffa3\046\uffa3\050\uffa3\053\uffa3\054\uffa3\055" +
    "\uffa3\056\uffa3\057\uffa3\060\uffa3\061\uffa3\062\uffa3\063\uffa3" +
    "\064\uffa3\065\uffa3\066\uffa3\102\uffa3\116\uffa3\117\uffa3\120" +
    "\uffa3\121\uffa3\001\002\000\134\003\ufff2\004\ufff2\005\ufff2" +
    "\006\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2\015" +
    "\ufff2\016\ufff2\017\ufff2\020\ufff2\021\ufff2\024\ufff2\026\ufff2" +
    "\027\ufff2\033\ufff2\036\ufff2\037\ufff2\040\ufff2\043\ufff2\044" +
    "\ufff2\045\ufff2\046\ufff2\050\ufff2\051\ufff2\052\ufff2\053\ufff2" +
    "\054\ufff2\055\ufff2\056\ufff2\057\ufff2\060\ufff2\061\ufff2\062" +
    "\ufff2\063\ufff2\064\ufff2\065\ufff2\066\ufff2\102\ufff2\116\ufff2" +
    "\117\ufff2\120\ufff2\121\ufff2\001\002\000\016\003\075\026" +
    "\100\040\103\064\u0170\102\060\116\uff58\001\002\000\006" +
    "\064\uffaf\122\uffaf\001\002\000\134\003\ufff3\004\ufff3\005" +
    "\ufff3\006\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3" +
    "\015\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3\024\ufff3\026" +
    "\ufff3\027\ufff3\033\ufff3\036\ufff3\037\ufff3\040\ufff3\043\ufff3" +
    "\044\ufff3\045\ufff3\046\ufff3\050\ufff3\051\ufff3\052\ufff3\053" +
    "\ufff3\054\ufff3\055\ufff3\056\ufff3\057\ufff3\060\ufff3\061\ufff3" +
    "\062\ufff3\063\ufff3\064\ufff3\065\ufff3\066\ufff3\102\ufff3\116" +
    "\ufff3\117\ufff3\120\ufff3\121\ufff3\001\002\000\054\003\uffd3" +
    "\004\uffd3\005\uffd3\006\uffd3\007\uffd3\010\uffd3\012\uffd3\013" +
    "\uffd3\016\uffd3\026\uffd3\040\uffd3\055\uffd3\056\uffd3\057\uffd3" +
    "\060\uffd3\061\uffd3\064\uffd3\065\uffd3\102\uffd3\116\uffd3\121" +
    "\uffd3\001\002\000\022\003\uffcd\026\uffcd\031\uffcd\040\uffcd" +
    "\064\uffcd\102\uffcd\116\uffcd\117\uffcd\001\002\000\004\064" +
    "\uff56\001\002\000\022\003\uffcf\026\uffcf\031\uffcf\040\uffcf" +
    "\064\uffcf\102\uffcf\116\uffcf\117\uffcf\001\002\000\022\003" +
    "\uffcb\026\uffcb\031\uffcb\040\uffcb\064\uffcb\102\uffcb\116\uffcb" +
    "\117\uffcb\001\002\000\006\064\uffbb\122\uffbb\001\002\000" +
    "\006\064\111\122\112\001\002\000\022\003\uffba\026\uffba" +
    "\031\uffba\040\uffba\064\uffba\102\uffba\116\uffba\117\uffba\001" +
    "\002\000\024\003\uffa5\026\uffa5\031\uffa5\040\uffa5\064\uffa5" +
    "\102\uffa5\116\uffa5\117\uffa5\122\116\001\002\000\004\123" +
    "\113\001\002\000\006\064\uffa8\122\uffa8\001\002\000\006" +
    "\064\111\122\112\001\002\000\022\003\uffa7\026\uffa7\031" +
    "\uffa7\040\uffa7\064\uffa7\102\uffa7\116\uffa7\117\uffa7\001\002" +
    "\000\004\123\120\001\002\000\022\003\uffa9\026\uffa9\031" +
    "\uffa9\040\uffa9\064\uffa9\102\uffa9\116\uffa9\117\uffa9\001\002" +
    "\000\022\003\uffa6\026\uffa6\031\uffa6\040\uffa6\064\uffa6\102" +
    "\uffa6\116\uffa6\117\uffa6\001\002\000\004\064\122\001\002" +
    "\000\004\116\uff55\001\002\000\004\116\124\001\002\000" +
    "\030\004\062\005\077\006\061\007\055\010\072\012\106" +
    "\013\063\016\067\064\126\065\070\117\uff4f\001\002\000" +
    "\004\117\136\001\002\000\006\064\uffb3\122\uffb3\001\002" +
    "\000\006\031\uff51\117\uff51\001\002\000\006\031\131\117" +
    "\uff4d\001\002\000\030\004\062\005\077\006\061\007\055" +
    "\010\072\012\106\013\063\016\067\064\126\065\070\117" +
    "\uff4f\001\002\000\004\117\uff50\001\002\000\004\117\uff4e" +
    "\001\002\000\006\064\111\122\112\001\002\000\022\003" +
    "\uffb2\026\uffb2\031\uffb2\040\uffb2\064\uffb2\102\uffb2\116\uffb2" +
    "\117\uffb2\001\002\000\004\120\137\001\002\000\054\004" +
    "\062\005\077\006\061\007\055\010\072\012\106\013\063" +
    "\016\067\033\151\036\164\043\166\044\143\045\153\046" +
    "\147\050\146\053\155\054\144\060\157\064\150\065\070" +
    "\121\uff4b\001\002\000\010\003\uff3d\026\uff3d\102\uff3d\001" +
    "\002\000\062\003\uff43\004\uff48\005\uff48\006\uff48\007\uff48" +
    "\010\uff48\012\uff48\013\uff48\016\uff48\026\uff43\033\uff48\036" +
    "\uff48\043\uff48\044\uff48\045\uff48\046\uff48\050\uff48\053\uff48" +
    "\054\uff48\060\uff48\064\uff48\065\uff48\102\uff43\121\uff48\001" +
    "\002\000\010\003\uff41\026\uff41\102\uff41\001\002\000\004" +
    "\116\u0167\001\002\000\036\003\217\011\213\015\227\017" +
    "\211\020\216\021\215\027\225\037\221\062\206\063\222" +
    "\064\212\066\223\116\214\120\204\001\002\000\010\003" +
    "\uff44\026\uff44\102\uff44\001\002\000\004\116\u0152\001\002" +
    "\000\004\116\u013f\001\002\000\040\003\uff29\025\u011e\026" +
    "\uff29\064\u012d\067\u0129\071\u012b\072\u012f\073\u012e\075\u0130" +
    "\077\u012a\100\u0133\102\uff29\116\u0132\117\uff29\122\u012c\001" +
    "\002\000\014\003\uff29\025\u011e\026\uff29\102\uff29\117\uff29" +
    "\001\002\000\010\003\uff45\026\uff45\102\uff45\001\002\000" +
    "\004\120\231\001\002\000\010\003\uff3f\026\uff3f\102\uff3f" +
    "\001\002\000\006\003\075\026\100\001\002\000\054\004" +
    "\062\005\077\006\061\007\055\010\072\012\106\013\063" +
    "\016\067\033\151\036\164\043\166\044\143\045\153\046" +
    "\147\050\146\053\155\054\144\060\157\064\150\065\070" +
    "\121\uff4b\001\002\000\024\004\062\005\077\006\061\007" +
    "\055\010\072\012\106\013\063\016\067\065\070\001\002" +
    "\000\004\121\u0114\001\002\000\010\003\075\026\100\102" +
    "\060\001\002\000\054\004\uff49\005\uff49\006\uff49\007\uff49" +
    "\010\uff49\012\uff49\013\uff49\016\uff49\033\uff49\036\uff49\043" +
    "\uff49\044\uff49\045\uff49\046\uff49\050\uff49\053\uff49\054\uff49" +
    "\060\uff49\064\uff49\065\uff49\121\uff49\001\002\000\054\004" +
    "\uff4a\005\uff4a\006\uff4a\007\uff4a\010\uff4a\012\uff4a\013\uff4a" +
    "\016\uff4a\033\uff4a\036\uff4a\043\uff4a\044\uff4a\045\uff4a\046" +
    "\uff4a\050\uff4a\053\uff4a\054\uff4a\060\uff4a\064\uff4a\065\uff4a" +
    "\121\uff4a\001\002\000\006\025\u0108\116\uff38\001\002\000" +
    "\010\003\uff40\026\uff40\102\uff40\001\002\000\004\116\171" +
    "\001\002\000\010\003\uff42\026\uff42\102\uff42\001\002\000" +
    "\010\003\uff3e\026\uff3e\102\uff3e\001\002\000\030\003\177" +
    "\004\062\005\077\006\061\007\055\010\072\012\106\013" +
    "\063\016\067\064\175\065\070\001\002\000\010\003\uff0c" +
    "\026\uff0c\102\uff0c\001\002\000\010\003\075\026\100\102" +
    "\060\001\002\000\010\003\uff10\026\uff10\102\uff10\001\002" +
    "\000\006\064\377\122\376\001\002\000\010\003\uff0e\026" +
    "\uff0e\102\uff0e\001\002\000\010\003\uff0b\026\uff0b\102\uff0b" +
    "\001\002\000\010\003\uff0f\026\uff0f\102\uff0f\001\002\000" +
    "\010\003\uff11\026\uff11\102\uff11\001\002\000\010\003\uff0d" +
    "\026\uff0d\102\uff0d\001\002\000\040\003\217\011\213\015" +
    "\227\017\211\020\216\021\215\027\225\037\221\062\206" +
    "\063\222\064\212\066\223\116\214\117\226\120\204\001" +
    "\002\000\040\003\217\011\213\015\227\017\211\020\216" +
    "\021\215\027\225\037\221\062\206\063\222\064\212\066" +
    "\223\116\214\120\204\121\264\001\002\000\006\003\075" +
    "\026\100\001\002\000\060\003\uff96\026\uff96\030\uff96\031" +
    "\uff96\070\uff96\074\uff96\076\uff96\101\uff96\102\uff96\103\uff96" +
    "\104\uff96\105\uff96\106\uff96\107\uff96\110\uff96\111\uff96\112" +
    "\uff96\113\uff96\114\uff96\115\uff96\117\uff96\121\uff96\123\uff96" +
    "\001\002\000\054\004\uff1e\005\uff1e\006\uff1e\007\uff1e\010" +
    "\uff1e\012\uff1e\013\uff1e\016\uff1e\033\uff1e\036\uff1e\043\uff1e" +
    "\044\uff1e\045\uff1e\046\uff1e\050\uff1e\053\uff1e\054\uff1e\060" +
    "\uff1e\064\uff1e\065\uff1e\121\uff1e\001\002\000\060\003\uff8f" +
    "\026\uff8f\030\uff8f\031\uff8f\070\325\074\343\076\323\101" +
    "\324\102\uff8f\103\326\104\340\105\331\106\330\107\332" +
    "\110\342\111\333\112\341\113\327\114\334\115\322\117" +
    "\uff8f\121\uff8f\123\uff8f\001\002\000\060\003\uff98\026\uff98" +
    "\030\uff98\031\uff98\070\uff98\074\uff98\076\uff98\101\uff98\102" +
    "\uff98\103\uff98\104\uff98\105\uff98\106\uff98\107\uff98\110\uff98" +
    "\111\uff98\112\uff98\113\uff98\114\uff98\115\uff98\117\uff98\121" +
    "\uff98\123\uff98\001\002\000\066\003\uff5c\025\352\026\uff5c" +
    "\030\uff5c\031\uff5c\070\uff5c\074\uff5c\076\uff5c\101\uff5c\102" +
    "\uff5c\103\uff5c\104\uff5c\105\uff5c\106\uff5c\107\uff5c\110\uff5c" +
    "\111\uff5c\112\uff5c\113\uff5c\114\uff5c\115\uff5c\116\351\117" +
    "\uff5c\121\uff5c\122\350\123\uff5c\001\002\000\060\003\uff9c" +
    "\026\uff9c\030\uff9c\031\uff9c\070\uff9c\074\uff9c\076\uff9c\101" +
    "\uff9c\102\uff9c\103\uff9c\104\uff9c\105\uff9c\106\uff9c\107\uff9c" +
    "\110\uff9c\111\uff9c\112\uff9c\113\uff9c\114\uff9c\115\uff9c\117" +
    "\uff9c\121\uff9c\123\uff9c\001\002\000\060\003\217\004\306" +
    "\005\315\006\304\007\303\010\313\011\213\012\316\013" +
    "\307\015\227\016\311\017\211\020\216\021\215\027\225" +
    "\037\221\062\206\063\222\064\212\065\312\066\223\116" +
    "\214\120\204\001\002\000\036\003\217\011\213\015\227" +
    "\017\211\020\216\021\215\027\225\037\221\062\206\063" +
    "\222\064\212\066\223\116\214\120\204\001\002\000\060" +
    "\003\uff99\026\uff99\030\uff99\031\uff99\070\uff99\074\uff99\076" +
    "\uff99\101\uff99\102\uff99\103\uff99\104\uff99\105\uff99\106\uff99" +
    "\107\uff99\110\uff99\111\uff99\112\uff99\113\uff99\114\uff99\115" +
    "\uff99\117\uff99\121\uff99\123\uff99\001\002\000\060\003\uff91" +
    "\026\uff91\030\uff91\031\uff91\070\uff91\074\uff91\076\uff91\101" +
    "\uff91\102\uff91\103\uff91\104\uff91\105\uff91\106\uff91\107\uff91" +
    "\110\uff91\111\uff91\112\uff91\113\uff91\114\uff91\115\uff91\117" +
    "\uff91\121\uff91\123\uff91\001\002\000\060\003\uff94\026\uff94" +
    "\030\uff94\031\uff94\070\uff94\074\uff94\076\uff94\101\uff94\102" +
    "\uff94\103\uff94\104\uff94\105\uff94\106\uff94\107\uff94\110\uff94" +
    "\111\uff94\112\uff94\113\uff94\114\uff94\115\uff94\117\uff94\121" +
    "\uff94\123\uff94\001\002\000\030\003\245\004\246\005\250" +
    "\006\236\007\240\010\247\012\243\013\251\016\241\064" +
    "\244\065\242\001\002\000\060\003\uff97\026\uff97\030\uff97" +
    "\031\uff97\070\uff97\074\uff97\076\uff97\101\uff97\102\uff97\103" +
    "\uff97\104\uff97\105\uff97\106\uff97\107\uff97\110\uff97\111\uff97" +
    "\112\uff97\113\uff97\114\uff97\115\uff97\117\uff97\121\uff97\123" +
    "\uff97\001\002\000\060\003\uff95\026\uff95\030\uff95\031\uff95" +
    "\070\uff95\074\uff95\076\uff95\101\uff95\102\uff95\103\uff95\104" +
    "\uff95\105\uff95\106\uff95\107\uff95\110\uff95\111\uff95\112\uff95" +
    "\113\uff95\114\uff95\115\uff95\117\uff95\121\uff95\123\uff95\001" +
    "\002\000\060\003\uff9d\026\uff9d\030\uff9d\031\uff9d\070\uff9d" +
    "\074\uff9d\076\uff9d\101\uff9d\102\uff9d\103\uff9d\104\uff9d\105" +
    "\uff9d\106\uff9d\107\uff9d\110\uff9d\111\uff9d\112\uff9d\113\uff9d" +
    "\114\uff9d\115\uff9d\117\uff9d\121\uff9d\123\uff9d\001\002\000" +
    "\004\014\234\001\002\000\004\120\231\001\002\000\060" +
    "\003\uff6a\026\uff6a\030\uff6a\031\uff6a\070\uff6a\074\uff6a\076" +
    "\uff6a\101\uff6a\102\uff6a\103\uff6a\104\uff6a\105\uff6a\106\uff6a" +
    "\107\uff6a\110\uff6a\111\uff6a\112\uff6a\113\uff6a\114\uff6a\115" +
    "\uff6a\117\uff6a\121\uff6a\123\uff6a\001\002\000\054\004\uff15" +
    "\005\uff15\006\uff15\007\uff15\010\uff15\012\uff15\013\uff15\016" +
    "\uff15\033\uff15\036\uff15\043\uff15\044\uff15\045\uff15\046\uff15" +
    "\050\uff15\053\uff15\054\uff15\060\uff15\064\uff15\065\uff15\121" +
    "\uff15\001\002\000\054\004\062\005\077\006\061\007\055" +
    "\010\072\012\106\013\063\016\067\033\151\036\164\043" +
    "\166\044\143\045\153\046\147\050\146\053\155\054\144" +
    "\060\157\064\150\065\070\121\uff4b\001\002\000\004\121" +
    "\233\001\002\000\056\004\uff1d\005\uff1d\006\uff1d\007\uff1d" +
    "\010\uff1d\012\uff1d\013\uff1d\016\uff1d\033\uff1d\036\uff1d\043" +
    "\uff1d\044\uff1d\045\uff1d\046\uff1d\047\uff1d\050\uff1d\053\uff1d" +
    "\054\uff1d\060\uff1d\064\uff1d\065\uff1d\121\uff1d\001\002\000" +
    "\004\027\235\001\002\000\060\003\uff6b\026\uff6b\030\uff6b" +
    "\031\uff6b\070\uff6b\074\uff6b\076\uff6b\101\uff6b\102\uff6b\103" +
    "\uff6b\104\uff6b\105\uff6b\106\uff6b\107\uff6b\110\uff6b\111\uff6b" +
    "\112\uff6b\113\uff6b\114\uff6b\115\uff6b\117\uff6b\121\uff6b\123" +
    "\uff6b\001\002\000\006\116\uffc0\122\uffc0\001\002\000\006" +
    "\116\252\122\253\001\002\000\006\116\uffbf\122\uffbf\001" +
    "\002\000\006\116\uffc4\122\uffc4\001\002\000\006\116\uffc3" +
    "\122\uffc3\001\002\000\006\116\uffc6\122\uffc6\001\002\000" +
    "\006\116\uffc8\122\uffc8\001\002\000\006\116\uffbe\122\uffbe" +
    "\001\002\000\006\116\uffc2\122\uffc2\001\002\000\006\116" +
    "\uffc7\122\uffc7\001\002\000\006\116\uffc1\122\uffc1\001\002" +
    "\000\006\116\uffc5\122\uffc5\001\002\000\040\003\217\011" +
    "\213\015\227\017\211\020\216\021\215\027\225\037\221" +
    "\062\206\063\222\064\212\066\223\116\214\117\275\120" +
    "\204\001\002\000\040\003\217\011\213\015\227\017\211" +
    "\020\216\021\215\027\225\037\221\062\206\063\222\064" +
    "\212\066\223\116\214\120\204\123\uff6c\001\002\000\060" +
    "\003\uff9a\026\uff9a\030\uff9a\031\uff9a\070\uff9a\074\uff9a\076" +
    "\uff9a\101\uff9a\102\uff9a\103\uff9a\104\uff9a\105\uff9a\106\uff9a" +
    "\107\uff9a\110\uff9a\111\uff9a\112\uff9a\113\uff9a\114\uff9a\115" +
    "\uff9a\117\uff9a\121\uff9a\123\uff9a\001\002\000\004\123\uff6d" +
    "\001\002\000\004\123\257\001\002\000\062\003\uff6e\026" +
    "\uff6e\030\uff6e\031\uff6e\070\uff6e\074\uff6e\076\uff6e\101\uff6e" +
    "\102\uff6e\103\uff6e\104\uff6e\105\uff6e\106\uff6e\107\uff6e\110" +
    "\uff6e\111\uff6e\112\uff6e\113\uff6e\114\uff6e\115\uff6e\117\uff6e" +
    "\120\261\121\uff6e\123\uff6e\001\002\000\060\003\uff70\026" +
    "\uff70\030\uff70\031\uff70\070\uff70\074\uff70\076\uff70\101\uff70" +
    "\102\uff70\103\uff70\104\uff70\105\uff70\106\uff70\107\uff70\110" +
    "\uff70\111\uff70\112\uff70\113\uff70\114\uff70\115\uff70\117\uff70" +
    "\121\uff70\123\uff70\001\002\000\040\003\217\011\213\015" +
    "\227\017\211\020\216\021\215\027\225\037\221\062\206" +
    "\063\222\064\212\066\223\116\214\120\204\121\264\001" +
    "\002\000\006\031\265\121\uff61\001\002\000\060\003\uff6f" +
    "\026\uff6f\030\uff6f\031\uff6f\070\uff6f\074\uff6f\076\uff6f\101" +
    "\uff6f\102\uff6f\103\uff6f\104\uff6f\105\uff6f\106\uff6f\107\uff6f" +
    "\110\uff6f\111\uff6f\112\uff6f\113\uff6f\114\uff6f\115\uff6f\117" +
    "\uff6f\121\uff6f\123\uff6f\001\002\000\060\003\uff63\026\uff63" +
    "\030\uff63\031\uff63\070\uff63\074\uff63\076\uff63\101\uff63\102" +
    "\uff63\103\uff63\104\uff63\105\uff63\106\uff63\107\uff63\110\uff63" +
    "\111\uff63\112\uff63\113\uff63\114\uff63\115\uff63\117\uff63\121" +
    "\uff63\123\uff63\001\002\000\036\003\217\011\213\015\227" +
    "\017\211\020\216\021\215\027\225\037\221\062\206\063" +
    "\222\064\212\066\223\116\214\120\204\001\002\000\004" +
    "\121\267\001\002\000\060\003\uff64\026\uff64\030\uff64\031" +
    "\uff64\070\uff64\074\uff64\076\uff64\101\uff64\102\uff64\103\uff64" +
    "\104\uff64\105\uff64\106\uff64\107\uff64\110\uff64\111\uff64\112" +
    "\uff64\113\uff64\114\uff64\115\uff64\117\uff64\121\uff64\123\uff64" +
    "\001\002\000\006\031\265\121\uff61\001\002\000\004\121" +
    "\uff62\001\002\000\004\117\301\001\002\000\010\030\uff65" +
    "\031\276\117\uff65\001\002\000\060\003\uff71\026\uff71\030" +
    "\uff71\031\uff71\070\uff71\074\uff71\076\uff71\101\uff71\102\uff71" +
    "\103\uff71\104\uff71\105\uff71\106\uff71\107\uff71\110\uff71\111" +
    "\uff71\112\uff71\113\uff71\114\uff71\115\uff71\117\uff71\121\uff71" +
    "\123\uff71\001\002\000\060\003\uff68\026\uff68\030\uff68\031" +
    "\uff68\070\uff68\074\uff68\076\uff68\101\uff68\102\uff68\103\uff68" +
    "\104\uff68\105\uff68\106\uff68\107\uff68\110\uff68\111\uff68\112" +
    "\uff68\113\uff68\114\uff68\115\uff68\117\uff68\121\uff68\123\uff68" +
    "\001\002\000\036\003\217\011\213\015\227\017\211\020" +
    "\216\021\215\027\225\037\221\062\206\063\222\064\212" +
    "\066\223\116\214\120\204\001\002\000\006\030\uff67\117" +
    "\uff67\001\002\000\006\030\uff66\117\uff66\001\002\000\060" +
    "\003\uff69\026\uff69\030\uff69\031\uff69\070\uff69\074\uff69\076" +
    "\uff69\101\uff69\102\uff69\103\uff69\104\uff69\105\uff69\106\uff69" +
    "\107\uff69\110\uff69\111\uff69\112\uff69\113\uff69\114\uff69\115" +
    "\uff69\117\uff69\121\uff69\123\uff69\001\002\000\060\003\uff92" +
    "\026\uff92\030\uff92\031\uff92\070\uff92\074\uff92\076\uff92\101" +
    "\uff92\102\uff92\103\uff92\104\uff92\105\uff92\106\uff92\107\uff92" +
    "\110\uff92\111\uff92\112\uff92\113\uff92\114\uff92\115\uff92\117" +
    "\uff92\121\uff92\123\uff92\001\002\000\004\117\uff81\001\002" +
    "\000\004\117\uff82\001\002\000\004\117\321\001\002\000" +
    "\004\117\uff84\001\002\000\004\117\uff87\001\002\000\004" +
    "\117\317\001\002\000\004\117\uff86\001\002\000\004\117" +
    "\uff85\001\002\000\004\117\uff89\001\002\000\060\003\uff93" +
    "\026\uff93\030\uff93\031\uff93\070\uff93\074\uff93\076\uff93\101" +
    "\uff93\102\uff93\103\uff93\104\uff93\105\uff93\106\uff93\107\uff93" +
    "\110\uff93\111\uff93\112\uff93\113\uff93\114\uff93\115\uff93\117" +
    "\uff93\121\uff93\123\uff93\001\002\000\004\117\uff83\001\002" +
    "\000\004\117\uff88\001\002\000\036\003\217\011\213\015" +
    "\227\017\211\020\216\021\215\027\225\037\221\062\206" +
    "\063\222\064\212\066\223\116\214\120\204\001\002\000" +
    "\060\003\uff8d\026\uff8d\030\uff8d\031\uff8d\070\uff8d\074\uff8d" +
    "\076\uff8d\101\uff8d\102\uff8d\103\uff8d\104\uff8d\105\uff8d\106" +
    "\uff8d\107\uff8d\110\uff8d\111\uff8d\112\uff8d\113\uff8d\114\uff8d" +
    "\115\uff8d\117\uff8d\121\uff8d\123\uff8d\001\002\000\062\003" +
    "\uff8a\022\337\026\uff8a\030\uff8a\031\uff8a\070\325\074\343" +
    "\076\323\101\324\102\uff8a\103\326\104\340\105\331\106" +
    "\330\107\332\110\342\111\333\112\341\113\327\114\334" +
    "\115\322\117\uff8a\121\uff8a\123\uff8a\001\002\000\036\003" +
    "\uff77\011\uff77\015\uff77\017\uff77\020\uff77\021\uff77\027\uff77" +
    "\037\uff77\062\uff77\063\uff77\064\uff77\066\uff77\116\uff77\120" +
    "\uff77\001\002\000\036\003\uff74\011\uff74\015\uff74\017\uff74" +
    "\020\uff74\021\uff74\027\uff74\037\uff74\062\uff74\063\uff74\064" +
    "\uff74\066\uff74\116\uff74\120\uff74\001\002\000\036\003\uff73" +
    "\011\uff73\015\uff73\017\uff73\020\uff73\021\uff73\027\uff73\037" +
    "\uff73\062\uff73\063\uff73\064\uff73\066\uff73\116\uff73\120\uff73" +
    "\001\002\000\036\003\uff76\011\uff76\015\uff76\017\uff76\020" +
    "\uff76\021\uff76\027\uff76\037\uff76\062\uff76\063\uff76\064\uff76" +
    "\066\uff76\116\uff76\120\uff76\001\002\000\036\003\uff72\011" +
    "\uff72\015\uff72\017\uff72\020\uff72\021\uff72\027\uff72\037\uff72" +
    "\062\uff72\063\uff72\064\uff72\066\uff72\116\uff72\120\uff72\001" +
    "\002\000\036\003\uff79\011\uff79\015\uff79\017\uff79\020\uff79" +
    "\021\uff79\027\uff79\037\uff79\062\uff79\063\uff79\064\uff79\066" +
    "\uff79\116\uff79\120\uff79\001\002\000\036\003\uff7e\011\uff7e" +
    "\015\uff7e\017\uff7e\020\uff7e\021\uff7e\027\uff7e\037\uff7e\062" +
    "\uff7e\063\uff7e\064\uff7e\066\uff7e\116\uff7e\120\uff7e\001\002" +
    "\000\036\003\uff7f\011\uff7f\015\uff7f\017\uff7f\020\uff7f\021" +
    "\uff7f\027\uff7f\037\uff7f\062\uff7f\063\uff7f\064\uff7f\066\uff7f" +
    "\116\uff7f\120\uff7f\001\002\000\036\003\uff7d\011\uff7d\015" +
    "\uff7d\017\uff7d\020\uff7d\021\uff7d\027\uff7d\037\uff7d\062\uff7d" +
    "\063\uff7d\064\uff7d\066\uff7d\116\uff7d\120\uff7d\001\002\000" +
    "\036\003\uff7b\011\uff7b\015\uff7b\017\uff7b\020\uff7b\021\uff7b" +
    "\027\uff7b\037\uff7b\062\uff7b\063\uff7b\064\uff7b\066\uff7b\116" +
    "\uff7b\120\uff7b\001\002\000\036\003\uff78\011\uff78\015\uff78" +
    "\017\uff78\020\uff78\021\uff78\027\uff78\037\uff78\062\uff78\063" +
    "\uff78\064\uff78\066\uff78\116\uff78\120\uff78\001\002\000\060" +
    "\003\uff8e\026\uff8e\030\uff8e\031\uff8e\070\uff8e\074\uff8e\076" +
    "\uff8e\101\uff8e\102\uff8e\103\uff8e\104\uff8e\105\uff8e\106\uff8e" +
    "\107\uff8e\110\uff8e\111\uff8e\112\uff8e\113\uff8e\114\uff8e\115" +
    "\uff8e\117\uff8e\121\uff8e\123\uff8e\001\002\000\036\003\217" +
    "\011\213\015\227\017\211\020\216\021\215\027\225\037" +
    "\221\062\206\063\222\064\212\066\223\116\214\120\204" +
    "\001\002\000\036\003\217\011\213\015\227\017\211\020" +
    "\216\021\215\027\225\037\221\062\206\063\222\064\212" +
    "\066\223\116\214\120\204\001\002\000\036\003\uff80\011" +
    "\uff80\015\uff80\017\uff80\020\uff80\021\uff80\027\uff80\037\uff80" +
    "\062\uff80\063\uff80\064\uff80\066\uff80\116\uff80\120\uff80\001" +
    "\002\000\036\003\uff7a\011\uff7a\015\uff7a\017\uff7a\020\uff7a" +
    "\021\uff7a\027\uff7a\037\uff7a\062\uff7a\063\uff7a\064\uff7a\066" +
    "\uff7a\116\uff7a\120\uff7a\001\002\000\036\003\uff7c\011\uff7c" +
    "\015\uff7c\017\uff7c\020\uff7c\021\uff7c\027\uff7c\037\uff7c\062" +
    "\uff7c\063\uff7c\064\uff7c\066\uff7c\116\uff7c\120\uff7c\001\002" +
    "\000\036\003\uff75\011\uff75\015\uff75\017\uff75\020\uff75\021" +
    "\uff75\027\uff75\037\uff75\062\uff75\063\uff75\064\uff75\066\uff75" +
    "\116\uff75\120\uff75\001\002\000\004\030\345\001\002\000" +
    "\036\003\217\011\213\015\227\017\211\020\216\021\215" +
    "\027\225\037\221\062\206\063\222\064\212\066\223\116" +
    "\214\120\204\001\002\000\060\003\uff8b\026\uff8b\030\uff8b" +
    "\031\uff8b\070\uff8b\074\uff8b\076\uff8b\101\uff8b\102\uff8b\103" +
    "\uff8b\104\uff8b\105\uff8b\106\uff8b\107\uff8b\110\uff8b\111\uff8b" +
    "\112\uff8b\113\uff8b\114\uff8b\115\uff8b\117\uff8b\121\uff8b\123" +
    "\uff8b\001\002\000\060\003\uff8c\026\uff8c\030\uff8c\031\uff8c" +
    "\070\uff8c\074\uff8c\076\uff8c\101\uff8c\102\uff8c\103\uff8c\104" +
    "\uff8c\105\uff8c\106\uff8c\107\uff8c\110\uff8c\111\uff8c\112\uff8c" +
    "\113\uff8c\114\uff8c\115\uff8c\117\uff8c\121\uff8c\123\uff8c\001" +
    "\002\000\036\003\217\011\213\015\227\017\211\020\216" +
    "\021\215\027\225\037\221\062\206\063\222\064\212\066" +
    "\223\116\214\120\204\001\002\000\040\003\217\011\213" +
    "\015\227\017\211\020\216\021\215\027\225\037\221\062" +
    "\206\063\222\064\212\066\223\116\214\117\361\120\204" +
    "\001\002\000\004\064\355\001\002\000\060\003\uff60\026" +
    "\uff60\030\uff60\031\uff60\070\uff60\074\uff60\076\uff60\101\uff60" +
    "\102\uff60\103\uff60\104\uff60\105\uff60\106\uff60\107\uff60\110" +
    "\uff60\111\uff60\112\uff60\113\uff60\114\uff60\115\uff60\117\uff60" +
    "\121\uff60\123\uff60\001\002\000\060\003\uff5f\026\uff5f\030" +
    "\uff5f\031\uff5f\070\uff5f\074\uff5f\076\uff5f\101\uff5f\102\uff5f" +
    "\103\uff5f\104\uff5f\105\uff5f\106\uff5f\107\uff5f\110\uff5f\111" +
    "\uff5f\112\uff5f\113\uff5f\114\uff5f\115\uff5f\117\uff5f\121\uff5f" +
    "\123\uff5f\001\002\000\066\003\uff5c\025\352\026\uff5c\030" +
    "\uff5c\031\uff5c\070\uff5c\074\uff5c\076\uff5c\101\uff5c\102\uff5c" +
    "\103\uff5c\104\uff5c\105\uff5c\106\uff5c\107\uff5c\110\uff5c\111" +
    "\uff5c\112\uff5c\113\uff5c\114\uff5c\115\uff5c\116\351\117\uff5c" +
    "\121\uff5c\122\350\123\uff5c\001\002\000\060\003\uff59\026" +
    "\uff59\030\uff59\031\uff59\070\uff59\074\uff59\076\uff59\101\uff59" +
    "\102\uff59\103\uff59\104\uff59\105\uff59\106\uff59\107\uff59\110" +
    "\uff59\111\uff59\112\uff59\113\uff59\114\uff59\115\uff59\117\uff59" +
    "\121\uff59\123\uff59\001\002\000\004\117\362\001\002\000" +
    "\060\003\uff5d\026\uff5d\030\uff5d\031\uff5d\070\uff5d\074\uff5d" +
    "\076\uff5d\101\uff5d\102\uff5d\103\uff5d\104\uff5d\105\uff5d\106" +
    "\uff5d\107\uff5d\110\uff5d\111\uff5d\112\uff5d\113\uff5d\114\uff5d" +
    "\115\uff5d\117\uff5d\121\uff5d\123\uff5d\001\002\000\060\003" +
    "\uff5a\026\uff5a\030\uff5a\031\uff5a\070\uff5a\074\uff5a\076\uff5a" +
    "\101\uff5a\102\uff5a\103\uff5a\104\uff5a\105\uff5a\106\uff5a\107" +
    "\uff5a\110\uff5a\111\uff5a\112\uff5a\113\uff5a\114\uff5a\115\uff5a" +
    "\117\uff5a\121\uff5a\123\uff5a\001\002\000\060\003\uff5b\026" +
    "\uff5b\030\uff5b\031\uff5b\070\uff5b\074\uff5b\076\uff5b\101\uff5b" +
    "\102\uff5b\103\uff5b\104\uff5b\105\uff5b\106\uff5b\107\uff5b\110" +
    "\uff5b\111\uff5b\112\uff5b\113\uff5b\114\uff5b\115\uff5b\117\uff5b" +
    "\121\uff5b\123\uff5b\001\002\000\004\123\364\001\002\000" +
    "\066\003\uff5c\025\352\026\uff5c\030\uff5c\031\uff5c\070\uff5c" +
    "\074\uff5c\076\uff5c\101\uff5c\102\uff5c\103\uff5c\104\uff5c\105" +
    "\uff5c\106\uff5c\107\uff5c\110\uff5c\111\uff5c\112\uff5c\113\uff5c" +
    "\114\uff5c\115\uff5c\116\351\117\uff5c\121\uff5c\122\350\123" +
    "\uff5c\001\002\000\060\003\uff5e\026\uff5e\030\uff5e\031\uff5e" +
    "\070\uff5e\074\uff5e\076\uff5e\101\uff5e\102\uff5e\103\uff5e\104" +
    "\uff5e\105\uff5e\106\uff5e\107\uff5e\110\uff5e\111\uff5e\112\uff5e" +
    "\113\uff5e\114\uff5e\115\uff5e\117\uff5e\121\uff5e\123\uff5e\001" +
    "\002\000\060\003\uff9e\026\uff9e\030\uff9e\031\uff9e\070\uff9e" +
    "\074\uff9e\076\uff9e\101\uff9e\102\uff9e\103\uff9e\104\uff9e\105" +
    "\uff9e\106\uff9e\107\uff9e\110\uff9e\111\uff9e\112\uff9e\113\uff9e" +
    "\114\uff9e\115\uff9e\117\uff9e\121\uff9e\123\uff9e\001\002\000" +
    "\036\003\217\011\213\015\227\017\211\020\216\021\215" +
    "\027\225\037\221\062\206\063\222\064\212\066\223\116" +
    "\214\120\204\001\002\000\060\003\uff90\026\uff90\030\uff90" +
    "\031\uff90\070\uff90\074\uff90\076\uff90\101\uff90\102\uff90\103" +
    "\uff90\104\uff90\105\uff90\106\uff90\107\uff90\110\uff90\111\uff90" +
    "\112\uff90\113\uff90\114\uff90\115\uff90\117\uff90\121\uff90\123" +
    "\uff90\001\002\000\010\033\151\036\164\064\150\001\002" +
    "\000\004\117\373\001\002\000\004\120\231\001\002\000" +
    "\054\004\uff14\005\uff14\006\uff14\007\uff14\010\uff14\012\uff14" +
    "\013\uff14\016\uff14\033\uff14\036\uff14\043\uff14\044\uff14\045" +
    "\uff14\046\uff14\050\uff14\053\uff14\054\uff14\060\uff14\064\uff14" +
    "\065\uff14\121\uff14\001\002\000\060\003\uff9b\026\uff9b\030" +
    "\uff9b\031\uff9b\070\uff9b\074\uff9b\076\uff9b\101\uff9b\102\uff9b" +
    "\103\uff9b\104\uff9b\105\uff9b\106\uff9b\107\uff9b\110\uff9b\111" +
    "\uff9b\112\uff9b\113\uff9b\114\uff9b\115\uff9b\117\uff9b\121\uff9b" +
    "\123\uff9b\001\002\000\004\123\u0105\001\002\000\012\003" +
    "\075\026\100\030\u0101\102\060\001\002\000\040\003\uff12" +
    "\011\uff12\015\uff12\017\uff12\020\uff12\021\uff12\027\uff12\037" +
    "\uff12\062\uff12\063\uff12\064\uff12\066\uff12\116\uff12\117\uff12" +
    "\120\uff12\001\002\000\004\064\u0104\001\002\000\040\003" +
    "\uff0a\011\uff0a\015\uff0a\017\uff0a\020\uff0a\021\uff0a\027\uff0a" +
    "\037\uff0a\062\uff0a\063\uff0a\064\uff0a\066\uff0a\116\uff0a\117" +
    "\uff0a\120\uff0a\001\002\000\040\003\uff07\011\uff07\015\uff07" +
    "\017\uff07\020\uff07\021\uff07\027\uff07\037\uff07\062\uff07\063" +
    "\uff07\064\uff07\066\uff07\116\uff07\117\uff07\120\uff07\001\002" +
    "\000\040\003\uff08\011\uff08\015\uff08\017\uff08\020\uff08\021" +
    "\uff08\027\uff08\037\uff08\062\uff08\063\uff08\064\uff08\066\uff08" +
    "\116\uff08\117\uff08\120\uff08\001\002\000\006\064\377\122" +
    "\376\001\002\000\040\003\uff09\011\uff09\015\uff09\017\uff09" +
    "\020\uff09\021\uff09\027\uff09\037\uff09\062\uff09\063\uff09\064" +
    "\uff09\066\uff09\116\uff09\117\uff09\120\uff09\001\002\000\040" +
    "\003\uff13\011\uff13\015\uff13\017\uff13\020\uff13\021\uff13\027" +
    "\uff13\037\uff13\062\uff13\063\uff13\064\uff13\066\uff13\116\uff13" +
    "\117\uff13\120\uff13\001\002\000\004\064\u0111\001\002\000" +
    "\004\116\u010a\001\002\000\036\003\217\011\213\015\227" +
    "\017\211\020\216\021\215\027\225\037\221\062\206\063" +
    "\222\064\212\066\223\116\214\120\204\001\002\000\006" +
    "\031\u010c\117\uff36\001\002\000\036\003\217\011\213\015" +
    "\227\017\211\020\216\021\215\027\225\037\221\062\206" +
    "\063\222\064\212\066\223\116\214\120\204\001\002\000" +
    "\004\117\u010e\001\002\000\012\003\uff3a\026\uff3a\102\uff3a" +
    "\117\uff3a\001\002\000\006\031\u010c\117\uff36\001\002\000" +
    "\004\117\uff37\001\002\000\006\025\u0108\116\uff38\001\002" +
    "\000\004\116\uff39\001\002\000\054\004\uff47\005\uff47\006" +
    "\uff47\007\uff47\010\uff47\012\uff47\013\uff47\016\uff47\033\uff47" +
    "\036\uff47\043\uff47\044\uff47\045\uff47\046\uff47\050\uff47\053" +
    "\uff47\054\uff47\060\uff47\064\uff47\065\uff47\121\uff47\001\002" +
    "\000\054\003\uff54\004\uff54\005\uff54\006\uff54\007\uff54\010" +
    "\uff54\012\uff54\013\uff54\016\uff54\026\uff54\040\uff54\055\uff54" +
    "\056\uff54\057\uff54\060\uff54\061\uff54\064\uff54\065\uff54\102" +
    "\uff54\116\uff54\121\uff54\001\002\000\010\003\uff46\026\uff46" +
    "\102\uff46\001\002\000\004\121\uff4c\001\002\000\066\003" +
    "\uff23\004\uff23\005\uff23\006\uff23\007\uff23\010\uff23\012\uff23" +
    "\013\uff23\016\uff23\026\uff23\033\uff23\036\uff23\043\uff23\044" +
    "\uff23\045\uff23\046\uff23\050\uff23\051\uff23\052\uff23\053\uff23" +
    "\054\uff23\060\uff23\064\uff23\065\uff23\102\uff23\121\uff23\001" +
    "\002\000\004\044\u0119\001\002\000\004\116\u011a\001\002" +
    "\000\036\003\217\011\213\015\227\017\211\020\216\021" +
    "\215\027\225\037\221\062\206\063\222\064\212\066\223" +
    "\116\214\120\204\001\002\000\004\117\u011c\001\002\000" +
    "\006\003\075\026\100\001\002\000\054\004\uff21\005\uff21" +
    "\006\uff21\007\uff21\010\uff21\012\uff21\013\uff21\016\uff21\033" +
    "\uff21\036\uff21\043\uff21\044\uff21\045\uff21\046\uff21\050\uff21" +
    "\053\uff21\054\uff21\060\uff21\064\uff21\065\uff21\121\uff21\001" +
    "\002\000\004\064\u0120\001\002\000\012\003\uff3b\026\uff3b" +
    "\102\uff3b\117\uff3b\001\002\000\016\003\uff29\025\u011e\026" +
    "\uff29\102\uff29\116\u0122\117\uff29\001\002\000\012\003\uff2a" +
    "\026\uff2a\102\uff2a\117\uff2a\001\002\000\040\003\217\011" +
    "\213\015\227\017\211\020\216\021\215\027\225\037\221" +
    "\062\206\063\222\064\212\066\223\116\214\117\u0126\120" +
    "\204\001\002\000\012\003\uff27\026\uff27\102\uff27\117\uff27" +
    "\001\002\000\006\031\u010c\117\uff36\001\002\000\012\003" +
    "\uff28\026\uff28\102\uff28\117\uff28\001\002\000\012\003\uff25" +
    "\026\uff25\102\uff25\117\uff25\001\002\000\004\117\u0128\001" +
    "\002\000\012\003\uff26\026\uff26\102\uff26\117\uff26\001\002" +
    "\000\036\003\217\011\213\015\227\017\211\020\216\021" +
    "\215\027\225\037\221\062\206\063\222\064\212\066\223" +
    "\116\214\120\204\001\002\000\036\003\217\011\213\015" +
    "\227\017\211\020\216\021\215\027\225\037\221\062\206" +
    "\063\222\064\212\066\223\116\214\120\204\001\002\000" +
    "\012\003\uff35\026\uff35\102\uff35\117\uff35\001\002\000\036" +
    "\003\217\011\213\015\227\017\211\020\216\021\215\027" +
    "\225\037\221\062\206\063\222\064\212\066\223\116\214" +
    "\120\204\001\002\000\014\003\uff29\025\u011e\026\uff29\102" +
    "\uff29\117\uff29\001\002\000\036\003\217\011\213\015\227" +
    "\017\211\020\216\021\215\027\225\037\221\062\206\063" +
    "\222\064\212\066\223\116\214\120\204\001\002\000\012" +
    "\003\uff33\026\uff33\102\uff33\117\uff33\001\002\000\036\003" +
    "\217\011\213\015\227\017\211\020\216\021\215\027\225" +
    "\037\221\062\206\063\222\064\212\066\223\116\214\120" +
    "\204\001\002\000\012\003\uff2d\026\uff2d\102\uff2d\117\uff2d" +
    "\001\002\000\040\003\217\011\213\015\227\017\211\020" +
    "\216\021\215\027\225\037\221\062\206\063\222\064\212" +
    "\066\223\116\214\117\361\120\204\001\002\000\036\003" +
    "\217\011\213\015\227\017\211\020\216\021\215\027\225" +
    "\037\221\062\206\063\222\064\212\066\223\116\214\120" +
    "\204\001\002\000\012\003\uff3c\026\uff3c\102\uff3c\117\uff3c" +
    "\001\002\000\012\003\uff30\026\uff30\102\uff30\117\uff30\001" +
    "\002\000\012\003\uff2b\026\uff2b\102\uff2b\117\uff2b\001\002" +
    "\000\012\003\uff31\026\uff31\102\uff31\117\uff31\001\002\000" +
    "\012\003\uff32\026\uff32\102\uff32\117\uff32\001\002\000\012" +
    "\003\uff2e\026\uff2e\102\uff2e\117\uff2e\001\002\000\004\123" +
    "\u013b\001\002\000\014\003\uff29\025\u011e\026\uff29\102\uff29" +
    "\117\uff29\001\002\000\012\003\uff2c\026\uff2c\102\uff2c\117" +
    "\uff2c\001\002\000\012\003\uff2f\026\uff2f\102\uff2f\117\uff2f" +
    "\001\002\000\012\003\uff34\026\uff34\102\uff34\117\uff34\001" +
    "\002\000\036\003\217\011\213\015\227\017\211\020\216" +
    "\021\215\027\225\037\221\062\206\063\222\064\212\066" +
    "\223\116\214\120\204\001\002\000\004\117\u0141\001\002" +
    "\000\004\120\231\001\002\000\056\004\uff05\005\uff05\006" +
    "\uff05\007\uff05\010\uff05\012\uff05\013\uff05\016\uff05\033\uff05" +
    "\036\uff05\043\uff05\044\uff05\045\uff05\046\uff05\047\u0143\050" +
    "\uff05\053\uff05\054\uff05\060\uff05\064\uff05\065\uff05\121\uff05" +
    "\001\002\000\010\003\u0145\046\u0148\120\u0146\001\002\000" +
    "\054\004\uff20\005\uff20\006\uff20\007\uff20\010\uff20\012\uff20" +
    "\013\uff20\016\uff20\033\uff20\036\uff20\043\uff20\044\uff20\045" +
    "\uff20\046\uff20\050\uff20\053\uff20\054\uff20\060\uff20\064\uff20" +
    "\065\uff20\121\uff20\001\002\000\054\004\uff02\005\uff02\006" +
    "\uff02\007\uff02\010\uff02\012\uff02\013\uff02\016\uff02\033\uff02" +
    "\036\uff02\043\uff02\044\uff02\045\uff02\046\uff02\050\uff02\053" +
    "\uff02\054\uff02\060\uff02\064\uff02\065\uff02\121\uff02\001\002" +
    "\000\054\004\062\005\077\006\061\007\055\010\072\012" +
    "\106\013\063\016\067\033\151\036\164\043\166\044\143" +
    "\045\153\046\147\050\146\053\155\054\144\060\157\064" +
    "\150\065\070\121\uff4b\001\002\000\054\004\uff06\005\uff06" +
    "\006\uff06\007\uff06\010\uff06\012\uff06\013\uff06\016\uff06\033" +
    "\uff06\036\uff06\043\uff06\044\uff06\045\uff06\046\uff06\050\uff06" +
    "\053\uff06\054\uff06\060\uff06\064\uff06\065\uff06\121\uff06\001" +
    "\002\000\004\116\u0149\001\002\000\036\003\217\011\213" +
    "\015\227\017\211\020\216\021\215\027\225\037\221\062" +
    "\206\063\222\064\212\066\223\116\214\120\204\001\002" +
    "\000\004\117\u014b\001\002\000\004\120\u014c\001\002\000" +
    "\054\004\062\005\077\006\061\007\055\010\072\012\106" +
    "\013\063\016\067\033\151\036\164\043\166\044\143\045" +
    "\153\046\147\050\146\053\155\054\144\060\157\064\150" +
    "\065\070\121\uff4b\001\002\000\004\121\u014e\001\002\000" +
    "\056\004\uff05\005\uff05\006\uff05\007\uff05\010\uff05\012\uff05" +
    "\013\uff05\016\uff05\033\uff05\036\uff05\043\uff05\044\uff05\045" +
    "\uff05\046\uff05\047\u0143\050\uff05\053\uff05\054\uff05\060\uff05" +
    "\064\uff05\065\uff05\121\uff05\001\002\000\054\004\uff03\005" +
    "\uff03\006\uff03\007\uff03\010\uff03\012\uff03\013\uff03\016\uff03" +
    "\033\uff03\036\uff03\043\uff03\044\uff03\045\uff03\046\uff03\050" +
    "\uff03\053\uff03\054\uff03\060\uff03\064\uff03\065\uff03\121\uff03" +
    "\001\002\000\004\121\u0151\001\002\000\054\004\uff04\005" +
    "\uff04\006\uff04\007\uff04\010\uff04\012\uff04\013\uff04\016\uff04" +
    "\033\uff04\036\uff04\043\uff04\044\uff04\045\uff04\046\uff04\050" +
    "\uff04\053\uff04\054\uff04\060\uff04\064\uff04\065\uff04\121\uff04" +
    "\001\002\000\036\003\217\011\213\015\227\017\211\020" +
    "\216\021\215\027\225\037\221\062\206\063\222\064\212" +
    "\066\223\116\214\120\204\001\002\000\004\117\u0154\001" +
    "\002\000\004\120\u0155\001\002\000\010\051\u0157\052\u0156" +
    "\121\uff1a\001\002\000\004\030\u0163\001\002\000\036\003" +
    "\217\011\213\015\227\017\211\020\216\021\215\027\225" +
    "\037\221\062\206\063\222\064\212\066\223\116\214\120" +
    "\204\001\002\000\004\121\u0159\001\002\000\054\004\uff1f" +
    "\005\uff1f\006\uff1f\007\uff1f\010\uff1f\012\uff1f\013\uff1f\016" +
    "\uff1f\033\uff1f\036\uff1f\043\uff1f\044\uff1f\045\uff1f\046\uff1f" +
    "\050\uff1f\053\uff1f\054\uff1f\060\uff1f\064\uff1f\065\uff1f\121" +
    "\uff1f\001\002\000\004\030\u015b\001\002\000\052\004\062" +
    "\005\077\006\061\007\055\010\072\012\106\013\063\016" +
    "\067\033\151\036\164\043\166\044\143\045\153\046\147" +
    "\050\146\053\155\054\144\060\157\064\150\065\070\001" +
    "\002\000\016\003\uff43\026\uff43\051\uff18\052\uff18\102\uff43" +
    "\121\uff18\001\002\000\052\004\062\005\077\006\061\007" +
    "\055\010\072\012\106\013\063\016\067\033\151\036\164" +
    "\043\166\044\143\045\153\046\147\050\146\053\155\054" +
    "\144\060\157\064\150\065\070\001\002\000\010\051\u0157" +
    "\052\u0156\121\uff1a\001\002\000\052\004\uff16\005\uff16\006" +
    "\uff16\007\uff16\010\uff16\012\uff16\013\uff16\016\uff16\033\uff16" +
    "\036\uff16\043\uff16\044\uff16\045\uff16\046\uff16\050\uff16\053" +
    "\uff16\054\uff16\060\uff16\064\uff16\065\uff16\001\002\000\052" +
    "\004\uff17\005\uff17\006\uff17\007\uff17\010\uff17\012\uff17\013" +
    "\uff17\016\uff17\033\uff17\036\uff17\043\uff17\044\uff17\045\uff17" +
    "\046\uff17\050\uff17\053\uff17\054\uff17\060\uff17\064\uff17\065" +
    "\uff17\001\002\000\004\121\uff1c\001\002\000\010\051\uff19" +
    "\052\uff19\121\uff19\001\002\000\052\004\062\005\077\006" +
    "\061\007\055\010\072\012\106\013\063\016\067\033\151" +
    "\036\164\043\166\044\143\045\153\046\147\050\146\053" +
    "\155\054\144\060\157\064\150\065\070\001\002\000\004" +
    "\121\uff1b\001\002\000\006\003\075\026\100\001\002\000" +
    "\066\003\uff24\004\uff24\005\uff24\006\uff24\007\uff24\010\uff24" +
    "\012\uff24\013\uff24\016\uff24\026\uff24\033\uff24\036\uff24\043" +
    "\uff24\044\uff24\045\uff24\046\uff24\050\uff24\051\uff24\052\uff24" +
    "\053\uff24\054\uff24\060\uff24\064\uff24\065\uff24\102\uff24\121" +
    "\uff24\001\002\000\036\003\217\011\213\015\227\017\211" +
    "\020\216\021\215\027\225\037\221\062\206\063\222\064" +
    "\212\066\223\116\214\120\204\001\002\000\004\117\u0169" +
    "\001\002\000\004\120\231\001\002\000\054\004\uff22\005" +
    "\uff22\006\uff22\007\uff22\010\uff22\012\uff22\013\uff22\016\uff22" +
    "\033\uff22\036\uff22\043\uff22\044\uff22\045\uff22\046\uff22\050" +
    "\uff22\053\uff22\054\uff22\060\uff22\064\uff22\065\uff22\121\uff22" +
    "\001\002\000\054\003\uffd6\004\uffd6\005\uffd6\006\uffd6\007" +
    "\uffd6\010\uffd6\012\uffd6\013\uffd6\016\uffd6\026\uffd6\040\uffd6" +
    "\055\016\056\011\057\013\060\021\061\012\064\uffd6\065" +
    "\uffd6\102\uffd6\116\uffd6\121\uffda\001\002\000\004\121\uffd2" +
    "\001\002\000\006\064\111\122\112\001\002\000\022\003" +
    "\uffae\026\uffae\031\uffae\040\uffae\064\uffae\102\uffae\116\uffae" +
    "\117\uffae\001\002\000\004\121\uffd5\001\002\000\004\116" +
    "\uff53\001\002\000\004\116\u0172\001\002\000\030\004\062" +
    "\005\077\006\061\007\055\010\072\012\106\013\063\016" +
    "\067\064\126\065\070\117\uff4f\001\002\000\004\117\u0174" +
    "\001\002\000\004\120\u0175\001\002\000\054\004\062\005" +
    "\077\006\061\007\055\010\072\012\106\013\063\016\067" +
    "\033\151\036\164\043\166\044\143\045\153\046\147\050" +
    "\146\053\155\054\144\060\157\064\150\065\070\121\uff4b" +
    "\001\002\000\004\121\u0177\001\002\000\054\003\uff52\004" +
    "\uff52\005\uff52\006\uff52\007\uff52\010\uff52\012\uff52\013\uff52" +
    "\016\uff52\026\uff52\040\uff52\055\uff52\056\uff52\057\uff52\060" +
    "\uff52\061\uff52\064\uff52\065\uff52\102\uff52\116\uff52\121\uff52" +
    "\001\002\000\006\064\111\122\112\001\002\000\022\003" +
    "\uffbc\026\uffbc\031\uffbc\040\uffbc\064\uffbc\102\uffbc\116\uffbc" +
    "\117\uffbc\001\002\000\006\064\111\122\112\001\002\000" +
    "\022\003\uffb4\026\uffb4\031\uffb4\040\uffb4\064\uffb4\102\uffb4" +
    "\116\uffb4\117\uffb4\001\002\000\006\064\111\122\112\001" +
    "\002\000\022\003\uffb6\026\uffb6\031\uffb6\040\uffb6\064\uffb6" +
    "\102\uffb6\116\uffb6\117\uffb6\001\002\000\006\064\111\122" +
    "\112\001\002\000\022\003\uffb8\026\uffb8\031\uffb8\040\uffb8" +
    "\064\uffb8\102\uffb8\116\uffb8\117\uffb8\001\002\000\006\064" +
    "\111\122\112\001\002\000\022\003\uffb0\026\uffb0\031\uffb0" +
    "\040\uffb0\064\uffb0\102\uffb0\116\uffb0\117\uffb0\001\002\000" +
    "\006\064\111\122\112\001\002\000\022\003\uffac\026\uffac" +
    "\031\uffac\040\uffac\064\uffac\102\uffac\116\uffac\117\uffac\001" +
    "\002\000\010\003\075\026\100\031\u0185\001\002\000\004" +
    "\064\u0188\001\002\000\126\003\uffa4\004\uffa4\005\uffa4\006" +
    "\uffa4\007\uffa4\010\uffa4\011\uffa4\012\uffa4\013\uffa4\015\uffa4" +
    "\016\uffa4\017\uffa4\020\uffa4\021\uffa4\026\uffa4\027\uffa4\033" +
    "\uffa4\036\uffa4\037\uffa4\040\uffa4\043\uffa4\044\uffa4\045\uffa4" +
    "\046\uffa4\050\uffa4\053\uffa4\054\uffa4\055\uffa4\056\uffa4\057" +
    "\uffa4\060\uffa4\061\uffa4\062\uffa4\063\uffa4\064\uffa4\065\uffa4" +
    "\066\uffa4\102\uffa4\116\uffa4\117\uffa4\120\uffa4\121\uffa4\001" +
    "\002\000\126\003\uffa2\004\uffa2\005\uffa2\006\uffa2\007\uffa2" +
    "\010\uffa2\011\uffa2\012\uffa2\013\uffa2\015\uffa2\016\uffa2\017" +
    "\uffa2\020\uffa2\021\uffa2\026\uffa2\027\uffa2\033\uffa2\036\uffa2" +
    "\037\uffa2\040\uffa2\043\uffa2\044\uffa2\045\uffa2\046\uffa2\050" +
    "\uffa2\053\uffa2\054\uffa2\055\uffa2\056\uffa2\057\uffa2\060\uffa2" +
    "\061\uffa2\062\uffa2\063\uffa2\064\uffa2\065\uffa2\066\uffa2\102" +
    "\uffa2\116\uffa2\117\uffa2\120\uffa2\121\uffa2\001\002\000\010" +
    "\003\075\026\100\102\u018a\001\002\000\126\003\uffa1\004" +
    "\uffa1\005\uffa1\006\uffa1\007\uffa1\010\uffa1\011\uffa1\012\uffa1" +
    "\013\uffa1\015\uffa1\016\uffa1\017\uffa1\020\uffa1\021\uffa1\026" +
    "\uffa1\027\uffa1\033\uffa1\036\uffa1\037\uffa1\040\uffa1\043\uffa1" +
    "\044\uffa1\045\uffa1\046\uffa1\050\uffa1\053\uffa1\054\uffa1\055" +
    "\uffa1\056\uffa1\057\uffa1\060\uffa1\061\uffa1\062\uffa1\063\uffa1" +
    "\064\uffa1\065\uffa1\066\uffa1\102\uffa1\116\uffa1\117\uffa1\120" +
    "\uffa1\121\uffa1\001\002\000\036\003\217\011\213\015\227" +
    "\017\211\020\216\021\215\027\225\037\221\062\206\063" +
    "\222\064\212\066\223\116\214\120\204\001\002\000\126" +
    "\003\uff9f\004\uff9f\005\uff9f\006\uff9f\007\uff9f\010\uff9f\011" +
    "\uff9f\012\uff9f\013\uff9f\015\uff9f\016\uff9f\017\uff9f\020\uff9f" +
    "\021\uff9f\026\uff9f\027\uff9f\033\uff9f\036\uff9f\037\uff9f\040" +
    "\uff9f\043\uff9f\044\uff9f\045\uff9f\046\uff9f\050\uff9f\053\uff9f" +
    "\054\uff9f\055\uff9f\056\uff9f\057\uff9f\060\uff9f\061\uff9f\062" +
    "\uff9f\063\uff9f\064\uff9f\065\uff9f\066\uff9f\102\uff9f\116\uff9f" +
    "\117\uff9f\120\uff9f\121\uff9f\001\002\000\010\003\075\026" +
    "\100\031\u0185\001\002\000\126\003\uffa0\004\uffa0\005\uffa0" +
    "\006\uffa0\007\uffa0\010\uffa0\011\uffa0\012\uffa0\013\uffa0\015" +
    "\uffa0\016\uffa0\017\uffa0\020\uffa0\021\uffa0\026\uffa0\027\uffa0" +
    "\033\uffa0\036\uffa0\037\uffa0\040\uffa0\043\uffa0\044\uffa0\045" +
    "\uffa0\046\uffa0\050\uffa0\053\uffa0\054\uffa0\055\uffa0\056\uffa0" +
    "\057\uffa0\060\uffa0\061\uffa0\062\uffa0\063\uffa0\064\uffa0\065" +
    "\uffa0\066\uffa0\102\uffa0\116\uffa0\117\uffa0\120\uffa0\121\uffa0" +
    "\001\002\000\030\004\062\005\077\006\061\007\055\010" +
    "\072\012\106\013\063\016\067\064\126\065\070\117\uff4f" +
    "\001\002\000\004\117\u0190\001\002\000\004\120\u0191\001" +
    "\002\000\054\004\062\005\077\006\061\007\055\010\072" +
    "\012\106\013\063\016\067\033\151\036\164\043\166\044" +
    "\143\045\153\046\147\050\146\053\155\054\144\060\157" +
    "\064\150\065\070\121\uff4b\001\002\000\004\121\u0193\001" +
    "\002\000\054\003\uff57\004\uff57\005\uff57\006\uff57\007\uff57" +
    "\010\uff57\012\uff57\013\uff57\016\uff57\026\uff57\040\uff57\055" +
    "\uff57\056\uff57\057\uff57\060\uff57\061\uff57\064\uff57\065\uff57" +
    "\102\uff57\116\uff57\121\uff57\001\002\000\006\064\111\122" +
    "\112\001\002\000\022\003\uffaa\026\uffaa\031\uffaa\040\uffaa" +
    "\064\uffaa\102\uffaa\116\uffaa\117\uffaa\001\002\000\054\003" +
    "\uffd6\004\uffd6\005\uffd6\006\uffd6\007\uffd6\010\uffd6\012\uffd6" +
    "\013\uffd6\016\uffd6\026\uffd6\040\uffd6\055\016\056\011\057" +
    "\013\060\021\061\012\064\uffd6\065\uffd6\102\uffd6\116\uffd6" +
    "\121\uffda\001\002\000\004\121\uffd0\001\002\000\004\032" +
    "\uffe8\001\002\000\004\032\uffea\001\002\000\004\032\uffe9" +
    "\001\002\000\004\032\uffe6\001\002\000\050\003\uffe4\004" +
    "\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4\012\uffe4\013\uffe4" +
    "\016\uffe4\026\uffe4\032\uffe4\040\uffe4\055\uffe4\056\uffe4\057" +
    "\uffe4\064\uffe4\065\uffe4\102\uffe4\116\uffe4\001\002\000\050" +
    "\003\uffe2\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\012" +
    "\uffe2\013\uffe2\016\uffe2\026\uffe2\032\uffe2\040\uffe2\055\uffe2" +
    "\056\uffe2\057\uffe2\064\uffe2\065\uffe2\102\uffe2\116\uffe2\001" +
    "\002\000\004\002\001\001\002\000\010\003\075\025\u01a0" +
    "\026\100\001\002\000\004\064\u01a4\001\002\000\016\024" +
    "\004\055\ufffa\056\ufffa\057\ufffa\060\ufffa\061\ufffa\001\002" +
    "\000\016\024\ufffc\055\ufffc\056\ufffc\057\ufffc\060\ufffc\061" +
    "\ufffc\001\002\000\014\055\uffff\056\uffff\057\uffff\060\uffff" +
    "\061\uffff\001\002\000\010\003\075\025\u01a0\026\100\001" +
    "\002\000\016\024\ufffd\055\ufffd\056\ufffd\057\ufffd\060\ufffd" +
    "\061\ufffd\001\002\000\004\064\u01a8\001\002\000\004\064" +
    "\ufff9\001\002\000\010\003\075\025\u01a9\026\100\001\002" +
    "\000\006\064\u01ae\076\u01ad\001\002\000\016\024\004\055" +
    "\ufffa\056\ufffa\057\ufffa\060\ufffa\061\ufffa\001\002\000\016" +
    "\024\ufff6\055\ufff6\056\ufff6\057\ufff6\060\ufff6\061\ufff6\001" +
    "\002\000\014\055\ufffb\056\ufffb\057\ufffb\060\ufffb\061\ufffb" +
    "\001\002\000\006\003\075\026\100\001\002\000\010\003" +
    "\075\025\u01a9\026\100\001\002\000\016\024\ufff7\055\ufff7" +
    "\056\ufff7\057\ufff7\060\ufff7\061\ufff7\001\002\000\016\024" +
    "\ufff4\055\ufff4\056\ufff4\057\ufff4\060\ufff4\061\ufff4\001\002" +
    "\000\016\024\ufff5\055\ufff5\056\ufff5\057\ufff5\060\ufff5\061" +
    "\ufff5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01af\000\010\002\006\003\007\004\005\001\001\000" +
    "\004\110\u01a5\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\013\017\015\013\016\014\017" +
    "\016\001\001\000\002\001\001\000\004\053\u019b\001\001" +
    "\000\002\001\001\000\006\012\u0199\016\u019a\001\001\000" +
    "\006\011\u0198\015\u0197\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\054\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\127\025\001\001\000\004\022\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\033" +
    "\001\001\000\002\001\001\000\004\022\034\001\001\000" +
    "\002\001\001\000\004\023\036\001\001\000\002\001\001" +
    "\000\004\023\040\001\001\000\004\022\041\001\001\000" +
    "\002\001\001\000\014\014\044\015\045\016\047\025\043" +
    "\043\046\001\001\000\036\005\073\020\055\021\072\024" +
    "\100\030\103\031\053\032\063\033\101\034\070\035\104" +
    "\036\064\041\075\045\052\145\056\001\001\000\002\001" +
    "\001\000\006\016\047\043\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\131\u0195\001\001\000\002\001\001\000\004\143\u0193" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\026" +
    "\223\027\207\040\u0183\074\217\001\001\000\004\142\u0181" +
    "\001\001\000\004\140\u017f\001\001\000\004\134\u017d\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\137\133" +
    "\150\u0170\001\001\000\004\135\u017b\001\001\000\004\136" +
    "\u0179\001\001\000\002\001\001\000\004\132\u0177\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\005\073\021\u016e\024\100\045\052\145\056\001\001" +
    "\000\004\141\u016c\001\001\000\002\001\001\000\004\130" +
    "\u016a\001\001\000\002\001\001\000\004\146\120\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\133\106\001" +
    "\001\000\004\052\107\001\001\000\002\001\001\000\004" +
    "\070\116\001\001\000\002\001\001\000\004\144\113\001" +
    "\001\000\004\052\114\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\147\122\001\001\000\002\001\001\000\024" +
    "\030\103\031\053\032\063\033\101\034\070\035\104\036" +
    "\064\041\126\046\124\001\001\000\002\001\001\000\004" +
    "\137\133\001\001\000\004\151\127\001\001\000\004\047" +
    "\131\001\001\000\024\030\103\031\053\032\063\033\101" +
    "\034\070\035\104\036\064\041\126\046\132\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\052\134\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\030\166\031" +
    "\137\032\141\033\164\034\153\035\167\062\162\063\155" +
    "\064\157\067\140\072\151\075\160\076\161\077\144\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\026\223\027\207\040\u0164\074" +
    "\217\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\066\u0130\100\u0133\001\001\000\004\066" +
    "\u011e\001\001\000\002\001\001\000\004\051\u0117\001\001" +
    "\000\002\001\001\000\004\005\u0116\001\001\000\036\030" +
    "\166\031\137\032\141\033\164\034\153\035\167\062\162" +
    "\063\155\064\u0115\067\140\072\151\075\160\076\161\077" +
    "\144\001\001\000\020\030\166\031\137\032\141\033\164" +
    "\034\153\035\167\072\u0114\001\001\000\002\001\001\000" +
    "\006\005\073\024\u0112\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\050\u0108\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\030\200\031\171\032\173\033\177\034\175\035\201\101" +
    "\172\103\202\001\001\000\002\001\001\000\006\005\073" +
    "\024\u0106\001\001\000\002\001\001\000\004\104\377\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\026\223\027" +
    "\207\040\204\074\217\102\206\001\001\000\014\026\223" +
    "\027\207\040\261\057\374\074\217\001\001\000\004\005" +
    "\370\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\044\365\121\366\001\001\000\002\001\001\000\004\060" +
    "\352\001\001\000\002\001\001\000\016\026\223\027\207" +
    "\040\304\074\217\120\307\124\313\001\001\000\012\026" +
    "\223\027\207\040\301\074\217\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\116\236\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\051\227\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\030\166\031\137\032\141" +
    "\033\164\034\153\035\167\062\162\063\155\064\231\067" +
    "\140\072\151\075\160\076\161\077\144\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\117\253\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\026\223\027\207\037\271\040\272\056\273\074\217" +
    "\001\001\000\014\026\223\027\207\040\254\074\217\123" +
    "\255\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\122\257\001\001\000\002\001\001\000" +
    "\014\026\223\027\207\040\261\057\262\074\217\001\001" +
    "\000\004\065\265\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\026\223\027\207\040\267\074\217\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\065\270\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\042\276" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\026" +
    "\223\027\207\037\277\040\272\074\217\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\026" +
    "\223\027\207\040\317\074\217\001\001\000\002\001\001" +
    "\000\006\061\334\121\335\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\026\223\027\207\040\346\074" +
    "\217\001\001\000\012\026\223\027\207\040\343\074\217" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\026\223" +
    "\027\207\040\345\074\217\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\026\223\027\207\040\362\074\217" +
    "\001\001\000\016\026\223\027\207\037\356\040\272\074" +
    "\217\111\357\001\001\000\004\055\353\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\060\355\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\060" +
    "\364\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\026\223\027\207\040\367\074\217\001\001\000\002\001" +
    "\001\000\004\077\371\001\001\000\002\001\001\000\004" +
    "\051\373\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\073\024\u0102\105\u0101\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\104\u0105\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\026\223\027\207\040\u010a\074\217" +
    "\001\001\000\004\115\u010c\001\001\000\012\026\223\027" +
    "\207\040\u010e\074\217\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\115\u010f\001\001\000\002\001\001\000" +
    "\004\050\u0111\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\026\223\027\207\040\u011a\074\217\001\001\000\002\001" +
    "\001\000\004\005\u011c\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\066\u0122\071\u0120\001" +
    "\001\000\002\001\001\000\014\026\223\027\207\040\u0123" +
    "\073\u0124\074\217\001\001\000\002\001\001\000\004\115" +
    "\u0126\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\026\223\027\207\040" +
    "\u013d\074\217\001\001\000\012\026\223\027\207\040\u013c" +
    "\074\217\001\001\000\002\001\001\000\012\026\223\027" +
    "\207\040\u0139\074\217\001\001\000\004\066\u0138\001\001" +
    "\000\012\026\223\027\207\040\u0137\074\217\001\001\000" +
    "\002\001\001\000\012\026\223\027\207\040\u0136\074\217" +
    "\001\001\000\002\001\001\000\016\026\223\027\207\037" +
    "\356\040\272\074\217\111\u0135\001\001\000\012\026\223" +
    "\027\207\040\u0134\074\217\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\066" +
    "\u013b\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\026\223\027\207\040\u013f\074\217\001" +
    "\001\000\002\001\001\000\004\051\u0141\001\001\000\004" +
    "\106\u0143\001\001\000\004\107\u0146\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\030\166\031\137\032\141" +
    "\033\164\034\153\035\167\062\162\063\155\064\u014f\067" +
    "\140\072\151\075\160\076\161\077\144\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\026\223\027\207\040" +
    "\u0149\074\217\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\030\166\031\137\032\141\033\164\034\153\035" +
    "\167\062\162\063\155\064\u014c\067\140\072\151\075\160" +
    "\076\161\077\144\001\001\000\002\001\001\000\004\106" +
    "\u014e\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\026\223\027\207\040\u0152\074\217\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\112\u0157" +
    "\001\001\000\002\001\001\000\014\026\223\027\207\037" +
    "\u0159\040\272\074\217\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\030\166\031\137\032" +
    "\141\033\164\034\153\035\167\062\u015f\067\u015b\072\151" +
    "\075\160\076\u015e\077\144\113\u015d\114\u015c\001\001\000" +
    "\002\001\001\000\036\030\166\031\137\032\141\033\164" +
    "\034\153\035\167\062\u015f\067\u015b\072\151\075\160\076" +
    "\u015e\077\144\113\u0161\114\u015c\001\001\000\004\112\u0160" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\030\166\031\137\032\141" +
    "\033\164\034\153\035\167\062\u015f\067\u015b\072\151\075" +
    "\160\076\u015e\077\144\113\u0163\114\u015c\001\001\000\002" +
    "\001\001\000\004\005\u0165\001\001\000\002\001\001\000" +
    "\012\026\223\027\207\040\u0167\074\217\001\001\000\002" +
    "\001\001\000\004\051\u0169\001\001\000\002\001\001\000" +
    "\014\014\u016b\015\045\016\047\025\043\043\046\001\001" +
    "\000\002\001\001\000\004\052\u016d\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\150\u0170\001\001\000\002" +
    "\001\001\000\024\030\103\031\053\032\063\033\101\034" +
    "\070\035\104\036\064\041\126\046\u0172\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\030\166\031\137\032" +
    "\141\033\164\034\153\035\167\062\162\063\155\064\u0175" +
    "\067\140\072\151\075\160\076\161\077\144\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\052\u0178\001\001" +
    "\000\002\001\001\000\004\052\u017a\001\001\000\002\001" +
    "\001\000\004\052\u017c\001\001\000\002\001\001\000\004" +
    "\052\u017e\001\001\000\002\001\001\000\004\052\u0180\001" +
    "\001\000\002\001\001\000\004\052\u0182\001\001\000\002" +
    "\001\001\000\006\005\u0186\125\u0185\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\u018a" +
    "\126\u0188\001\001\000\002\001\001\000\012\026\223\027" +
    "\207\040\u018b\074\217\001\001\000\002\001\001\000\006" +
    "\005\u0186\125\u018c\001\001\000\002\001\001\000\024\030" +
    "\103\031\053\032\063\033\101\034\070\035\104\036\064" +
    "\041\126\046\u018e\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\030\166\031\137\032\141\033\164\034\153" +
    "\035\167\062\162\063\155\064\u0191\067\140\072\151\075" +
    "\160\076\161\077\144\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\052\u0194\001\001\000\002\001\001\000" +
    "\014\014\u0196\015\045\016\047\025\043\043\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\u01a1\010\u01a0\001" +
    "\001\000\002\001\001\000\004\004\u01a2\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\u01a1\010\u01a4\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\u01aa\006\u01a9\001\001\000\004\007\u01ae\001" +
    "\001\000\004\004\u01ab\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\u01b0\001\001\000\006\005\u01aa\006" +
    "\u01af\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        private ClassSyntax classFinalSystax ;
        private ListType typeDate = null;
        private ListType typeMethods = null;
        private Symbol s;
        private String nameClass;
        private String nameVariable;
        private String nameMethods;
        private List<Method> ListMethods =new ArrayList<>();
        private List<Variable> ListVariable= new ArrayList<>();
        private List<Variable> listParameters= new ArrayList<>();
        private int errorCounter= 0;

        Sintactico(Lexico lexico){
            super(lexico);
        }
        public void syntax_error(Symbol cur_token) {
            errorCounter++;
            try {
              Lexico lexico = (Lexico) this.getScanner();
              lexico.setReport(lexico.getReport() + "\n"+errorCounter+" - Clase<"+nameClass+"> en simbolo<" + sym.terminalNames[cur_token.sym]+String.format(">posicion: <%d>, <%d>", (cur_token.left+1), (cur_token.right+1)));
            } catch (Exception e) {
              System.out.println("no!!!");
              Console.ConsoleText.append("no!!!");
            }
            
            System.out.println("\n"+errorCounter+" - Clase<"+nameClass+"> en simbolo<" + sym.terminalNames[cur_token.sym]+String.format(">posicion: <%d>, <%d>", (cur_token.left+1), (cur_token.right+1)));
            Console.ConsoleText.append("\n"+errorCounter+" - Clase<"+nameClass+"> en simbolo<" + sym.terminalNames[cur_token.sym]+String.format(">posicion: <%d>, <%d>", (cur_token.left+1), (cur_token.right+1)));
        }
        /*public void unrecovered_syntax_error(Symbol cur_token) {
            if (cur_token.sym == sym.EOF) {
             System.out.println("public void unrecoveredsyntax_error!!!!!!!!!!!!!!");
            }
        }*/
        public Symbol getSymbol(){
            return this.s;
        }

       private void addVariable (int aleft,int aright){
          /*  System.out.println("***************VARIABLE******************");
            System.out.println("tipo:"+typeDate+"x:"+(aright+1)+"y:"+(aleft+1)+"name:"+nameVariable);
            System.out.println("****************************************");*/
            ListVariable.add(new Variable(typeDate,aright+1,aleft+1,nameVariable));
            typeDate=null;
            nameVariable = "";
        }
        private void addMethods (int aleft,int aright){
            /*
            System.out.println("***************METODOS******************");
            System.out.println("tipo:"+typeDate+"x:"+(aright+1)+"y:"+(aleft+1)+"name:"+nameMethods);
            System.out.println("****************************************");*/
            if(typeMethods ==null){
                typeMethods = ListType.CONSTRUCTOR;
            }
            ListMethods.add(new Method(typeMethods, listParameters, (aright+1), (aleft+1), nameMethods));
            listParameters =  new ArrayList<>();
            typeMethods=null;
            nameVariable = "";
        }
        private void addMethodsParameters (int aleft,int aright){
            /*System.out.println("*Methods Parameters");
            System.out.println("tipo:"+typeDate+"x:"+(aright+1)+"y:"+(aleft+1)+"name:"+nameVariable);
            System.out.println("****************************************");*/
            listParameters.add(new Variable(typeDate,aright+1,aleft+1,nameVariable));
            typeDate=null;
            nameVariable = "";
        }
        public void arrayType() {
        switch (typeDate) {
            case BYTE:
                typeDate = ListType.ARRAYBYTE;
                break;
            case SHORT:
                typeDate = ListType.ARRAYSHORT;
                break;
            case INT:
                typeDate = ListType.ARRAYINT;
                break;
            case LONG:
                typeDate = ListType.ARRAYLONG;
                break;
            case FLOAT:
                typeDate = ListType.ARRAYFLOAT;
                break;
            case DOUBLE:
                typeDate = ListType.ARRAYDOUBLE;
                break;
            case CHAR:
                typeDate = ListType.ARRAYCHAR;
                break;
            case BOOLEAN:
                typeDate = ListType.ARRAYBOOLEAN;
                break;
            case STRING:
                typeDate = ListType.ARRAYSTRING;
                break;
            case OBJECT:
                typeDate = ListType.ARRAYOBJECT;
                break;
            default:
                break;
        }
    }
    public String getNameClass(){
        return this.nameClass;
    }
        public int getErrorCounter(){
            return this.errorCounter;
        }
        public List<Variable> getListVariable() {
        return ListVariable;
        }
        public List<Method> getListMethods() {
        return ListMethods;
        }
        public ClassSyntax getClassSyntax(){
            return this.classFinalSystax;
        }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= encabezado clase 
            {
              Object RESULT =null;
		classFinalSystax = new ClassSyntax(nameClass, ListMethods, ListVariable, null);
System.out.println("Final class : "+nameClass);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // encabezado ::= PACKAGE ID pc importacion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("encabezado",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // encabezado ::= importacion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("encabezado",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // pc ::= PUNTO ID pc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("pc",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // pc ::= p 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("pc",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // importacion ::= IMPORT staticImport ID sp importacion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("importacion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // importacion ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("importacion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // staticImport ::= STATIC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("staticImport",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // staticImport ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("staticImport",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sp ::= PUNTO spp 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sp",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sp ::= p 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sp",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // spp ::= MULTIPLICACION p 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("spp",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // spp ::= ID sp 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("spp",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // p ::= PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("p",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // p ::= error 
            {
              Object RESULT =null;
		
System.out.println("\n"+errorCounter+" - Clase<"+nameClass+"> en simbolo<" + sym.terminalNames[cur_token.sym]+String.format(">posicion: <%d>, <%d>", (cur_token.left+1), (cur_token.right+1)));
Console.ConsoleText.append("\n"+errorCounter+" - Clase<"+nameClass+"> en simbolo<" + sym.terminalNames[cur_token.sym]+String.format(">posicion: <%d>, <%d>", (cur_token.left+1), (cur_token.right+1)));

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("p",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$0 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
nameClass = a.toString();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",85, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // clase ::= v CLASS ID NT$0 herencia L_APERTURA internoClase L_CIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("clase",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // herencia ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("herencia",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // herencia ::= EXNTENDS ID secuenciIDHRE herencia 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("herencia",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // herencia ::= IMPLEMENTS ID secuenciIDHRE herencia 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("herencia",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // secuenciIDHRE ::= PUNTO ID secuenciIDHRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("secuenciIDHRE",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // secuenciIDHRE ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("secuenciIDHRE",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // v ::= staticCfianl vfactorizadoStatic 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("v",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // v ::= vc vfactorizadoVC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("v",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // vfactorizadoStatic ::= vc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vfactorizadoStatic",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // vfactorizadoStatic ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vfactorizadoStatic",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // vfactorizadoVC ::= staticCfianl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vfactorizadoVC",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // vfactorizadoVC ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vfactorizadoVC",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // staticCfianl ::= STATIC staticFactori 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("staticCfianl",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // staticCfianl ::= FINAL finalFactori 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("staticCfianl",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // staticFactori ::= FINAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("staticFactori",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // staticFactori ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("staticFactori",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // finalFactori ::= STATIC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("finalFactori",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // finalFactori ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("finalFactori",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // vc ::= PUBLIC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vc",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // vc ::= PRIVATE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vc",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // vc ::= PROTECTED 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vc",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // internoClase ::= vGlobal internoClaseFa 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("internoClase",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // internoClase ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("internoClase",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // vGlobal ::= vc vGlobalFac 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vGlobal",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // vGlobal ::= vGlobalFac 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vGlobal",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // vGlobalFac ::= staticCfianl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vGlobalFac",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // vGlobalFac ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vGlobalFac",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // internoClaseFa ::= variableID ayuda 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("internoClaseFa",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // internoClaseFa ::= ayuda 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("internoClaseFa",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$1 ::= 
            {
              Object RESULT =null;

            int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		    int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
            addVariable(aleft,aright);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$1",86, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ayuda ::= asignacionVariable NT$1 internoClase 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ayuda",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$2 ::= 
            {
              Object RESULT =null;

            int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		    int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
            addMethods(aleft,aright);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$2",87, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ayuda ::= metodo NT$2 internoClase 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ayuda",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // variableID ::= numFloat 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableID",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // variableID ::= numDouble 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableID",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // variableID ::= variableChar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableID",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // variableID ::= variableBoolean 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableID",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // variableID ::= variableStirng 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableID",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // variableID ::= variableObject 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableID",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // variableID ::= numEntero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableID",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // typeVarible ::= ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("typeVarible",76, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // typeVarible ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("typeVarible",76, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // typeVarible ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("typeVarible",76, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // typeVarible ::= CHAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("typeVarible",76, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // typeVarible ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("typeVarible",76, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // typeVarible ::= STRING 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("typeVarible",76, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // typeVarible ::= BYTE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("typeVarible",76, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // typeVarible ::= SHORT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("typeVarible",76, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // typeVarible ::= INT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("typeVarible",76, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // typeVarible ::= LONG 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("typeVarible",76, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // typeVarible ::= error 
            {
              Object RESULT =null;
		
System.out.println("\n"+errorCounter+" - Clase<"+nameClass+"> en simbolo<" + sym.terminalNames[cur_token.sym]+String.format(">posicion: <%d>, <%d>", (cur_token.left+1), (cur_token.right+1)));
Console.ConsoleText.append("\n"+errorCounter+" - Clase<"+nameClass+"> en simbolo<" + sym.terminalNames[cur_token.sym]+String.format(">posicion: <%d>, <%d>", (cur_token.left+1), (cur_token.right+1)));

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("typeVarible",76, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NT$3 ::= 
            {
              Object RESULT =null;
typeDate = ListType.FLOAT;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$3",88, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // numFloat ::= FLOAT NT$3 onlyIDArray 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("numFloat",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$4 ::= 
            {
              Object RESULT =null;
typeDate = ListType.DOUBLE;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$4",89, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // numDouble ::= DOUBLE NT$4 onlyIDArray 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("numDouble",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NT$5 ::= 
            {
              Object RESULT =null;
typeDate = ListType.CHAR;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$5",90, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // variableChar ::= CHAR NT$5 onlyIDArray 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableChar",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$6 ::= 
            {
              Object RESULT =null;
typeDate = ListType.BOOLEAN;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$6",91, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // variableBoolean ::= BOOLEAN NT$6 onlyIDArray 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableBoolean",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$7 ::= 
            {
              Object RESULT =null;
typeDate = ListType.STRING;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$7",92, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // variableStirng ::= STRING NT$7 onlyIDArray 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableStirng",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$8 ::= 
            {
              Object RESULT =null;
typeDate = ListType.OBJECT;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$8",93, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // variableObject ::= ID NT$8 onlyIDArray 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableObject",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$9 ::= 
            {
              Object RESULT =null;
typeDate = ListType.BYTE;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$9",94, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // numEntero ::= BYTE NT$9 onlyIDArray 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("numEntero",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // NT$10 ::= 
            {
              Object RESULT =null;
typeDate = ListType.SHORT;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$10",95, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // numEntero ::= SHORT NT$10 onlyIDArray 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("numEntero",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NT$11 ::= 
            {
              Object RESULT =null;
typeDate = ListType.INT;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$11",96, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // numEntero ::= INT NT$11 onlyIDArray 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("numEntero",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NT$12 ::= 
            {
              Object RESULT =null;
typeDate = ListType.LONG;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$12",97, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // numEntero ::= LONG NT$12 onlyIDArray 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("numEntero",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // onlyIDArray ::= ID arrayID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		nameVariable = a.toString();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("onlyIDArray",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$13 ::= 
            {
              Object RESULT =null;
arrayType();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$13",98, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // onlyIDArray ::= C_APERTURA C_CIERRE NT$13 onlyIDArray 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("onlyIDArray",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // arrayID ::= C_APERTURA C_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("arrayID",54, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // arrayID ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("arrayID",54, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // asignacionVariable ::= IGUAL tDatos signacionVariableSecuencial 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacionVariable",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // asignacionVariable ::= p 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacionVariable",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // signacionVariableSecuencial ::= p 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("signacionVariableSecuencial",83, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // signacionVariableSecuencial ::= COMA ID signacionVariableFactori 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("signacionVariableSecuencial",83, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // signacionVariableFactori ::= IGUAL tDatos signacionVariableSecuencial 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("signacionVariableFactori",84, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // signacionVariableFactori ::= p 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("signacionVariableFactori",84, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // tDatos ::= tDAtosFacto tDatosPrima 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatos",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // tDAtosFacto ::= vChar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDAtosFacto",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // tDAtosFacto ::= F 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDAtosFacto",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // tDAtosFacto ::= L_APERTURA lCon 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDAtosFacto",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // tDAtosFacto ::= NEW typeVarible newParentesisOCochtes 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDAtosFacto",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // tDAtosFacto ::= FALSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDAtosFacto",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // tDAtosFacto ::= TRUE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDAtosFacto",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // tDAtosFacto ::= ENTERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDAtosFacto",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // tDAtosFacto ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDAtosFacto",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // tDAtosFacto ::= TEXT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDAtosFacto",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // tDAtosFacto ::= usarOBJECT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDAtosFacto",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // tDAtosFacto ::= P_APERTURA castin 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDAtosFacto",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // tDAtosFacto ::= ADMIRACION tDatos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDAtosFacto",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // tDAtosFacto ::= error 
            {
              Object RESULT =null;
		
System.out.println("\n"+errorCounter+" - Clase<"+nameClass+"> en simbolo<" + sym.terminalNames[cur_token.sym]+String.format(">posicion: <%d>, <%d>", (cur_token.left+1), (cur_token.right+1)));
Console.ConsoleText.append("\n"+errorCounter+" - Clase<"+nameClass+"> en simbolo<" + sym.terminalNames[cur_token.sym]+String.format(">posicion: <%d>, <%d>", (cur_token.left+1), (cur_token.right+1)));

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDAtosFacto",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // tDatosPrima ::= operadorestDatos tDatos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatosPrima",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // tDatosPrima ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatosPrima",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // castin ::= tDatos P_CIERRE tDatosDespues 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("castin",82, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // castin ::= typeVaribleSimple P_CIERRE tDatos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("castin",82, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // tDatosDespues ::= operadorestDatos tDatos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatosDespues",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // tDatosDespues ::= INTERO tDatos DOBLE_PUNTO tDatos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatosDespues",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // tDatosDespues ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatosDespues",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // typeVaribleSimple ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("typeVaribleSimple",78, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // typeVaribleSimple ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("typeVaribleSimple",78, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // typeVaribleSimple ::= CHAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("typeVaribleSimple",78, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // typeVaribleSimple ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("typeVaribleSimple",78, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // typeVaribleSimple ::= STRING 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("typeVaribleSimple",78, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // typeVaribleSimple ::= BYTE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("typeVaribleSimple",78, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // typeVaribleSimple ::= SHORT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("typeVaribleSimple",78, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // typeVaribleSimple ::= INT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("typeVaribleSimple",78, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // typeVaribleSimple ::= LONG 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("typeVaribleSimple",78, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // operadorestDatos ::= TWOO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operadorestDatos",79, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // operadorestDatos ::= TWOY 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operadorestDatos",79, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // operadorestDatos ::= DOUBLE_IGUAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operadorestDatos",79, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // operadorestDatos ::= MENOR_Q_IGUAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operadorestDatos",79, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // operadorestDatos ::= MAYOR_Q_IGUAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operadorestDatos",79, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // operadorestDatos ::= MENOR_Q 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operadorestDatos",79, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // operadorestDatos ::= MAYOR_Q 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operadorestDatos",79, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // operadorestDatos ::= ONEY 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operadorestDatos",79, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // operadorestDatos ::= ONEO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operadorestDatos",79, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // operadorestDatos ::= ADMIRACION_IGUAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operadorestDatos",79, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // operadorestDatos ::= SUMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operadorestDatos",79, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // operadorestDatos ::= RESTA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operadorestDatos",79, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // operadorestDatos ::= MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operadorestDatos",79, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // operadorestDatos ::= DIVISION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operadorestDatos",79, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // operadorestDatos ::= MODULO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operadorestDatos",79, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // newParentesisOCochtes ::= P_APERTURA tFact 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("newParentesisOCochtes",77, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // newParentesisOCochtes ::= C_APERTURA tDatosserietDatos C_CIERRE serietDatos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("newParentesisOCochtes",77, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // serietDatos ::= L_APERTURA lCon 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("serietDatos",80, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // serietDatos ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("serietDatos",80, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // tDatosserietDatos ::= tDatos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatosserietDatos",81, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // tDatosserietDatos ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatosserietDatos",81, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // vChar ::= SIMPLE_COMILLA CARACTER SIMPLE_COMILLA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vChar",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // vChar ::= CHARTN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vChar",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // tFact ::= dSeguidoF P_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tFact",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // tFact ::= P_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tFact",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // dSeguidoF ::= tDatos objectInst 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dSeguidoF",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // objectInst ::= COMA dSeguidoF 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("objectInst",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // objectInst ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("objectInst",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // lCon ::= tDatos lConFact L_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lCon",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // lCon ::= L_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lCon",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // lConFact ::= COMA tDatos lConFact 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lConFact",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // lConFact ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lConFact",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // usarOBJECT ::= ID idDato 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("usarOBJECT",58, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // idDato ::= PUNTO idDatoFac 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("idDato",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // idDato ::= C_APERTURA tDatos C_CIERRE idDato 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("idDato",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // idDato ::= P_APERTURA factoIDATO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("idDato",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // idDato ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("idDato",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // factoIDATO ::= dSeguidoF P_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("factoIDATO",71, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // factoIDATO ::= P_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("factoIDATO",71, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // idDatoFac ::= ID idDato 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("idDatoFac",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // NT$14 ::= 
            {
              Object RESULT =null;
nameMethods=nameVariable;typeMethods = typeDate;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$14",99, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // metodo ::= NT$14 P_APERTURA pMetodoS P_CIERRE L_APERTURA localMetodo L_CIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("metodo",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // NT$15 ::= 
            {
              Object RESULT =null;
typeMethods = ListType.VOID;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$15",100, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // NT$16 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
nameMethods = a.toString();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$16",101, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // metodo ::= VOID NT$15 ID NT$16 P_APERTURA pMetodoS P_CIERRE L_APERTURA localMetodo L_CIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("metodo",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // NT$17 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
nameMethods = a.toString();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$17",102, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // metodo ::= ID NT$17 P_APERTURA pMetodoS P_CIERRE L_APERTURA localMetodo L_CIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("metodo",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // NT$18 ::= 
            {
              Object RESULT =null;

            int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		    int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
            addMethodsParameters(aleft,aright);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$18",103, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // pMetodoS ::= variableID NT$18 pMetodoSP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("pMetodoS",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // pMetodoS ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("pMetodoS",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // pMetodoSP ::= COMA pMetodoS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("pMetodoSP",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // pMetodoSP ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("pMetodoSP",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // localMetodo ::= local localMetodo 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("localMetodo",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // localMetodo ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("localMetodo",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // local ::= variableLocal 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("local",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // local ::= sentenciaControl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("local",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // local ::= terminalAccion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("local",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // variableLocal ::= variableLocalFinal asignacionVariable 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableLocal",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // variableLocalFinal ::= FINAL variableIDLocal 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableLocalFinal",59, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // variableLocalFinal ::= variableIDLocal 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableLocalFinal",59, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // variableLocalFinal ::= usarVariable 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableLocalFinal",59, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // variableLocalFinal ::= terminalAccion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableLocalFinal",59, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // variableIDLocal ::= numFloat 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableIDLocal",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // variableIDLocal ::= numDouble 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableIDLocal",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // variableIDLocal ::= variableChar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableIDLocal",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // variableIDLocal ::= variableBoolean 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableIDLocal",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // variableIDLocal ::= variableStirng 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableIDLocal",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // variableIDLocal ::= numEntero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableIDLocal",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // usarVariable ::= ID usarVariableFacto 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("usarVariable",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // usarVariable ::= THIS loclaMetodFacto 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("usarVariable",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // usarVariable ::= SUPER soloId P_APERTURA tDatos secuenciDatos P_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("usarVariable",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // soloId ::= PUNTO ID soloId 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("soloId",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // soloId ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("soloId",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // secuenciDatos ::= COMA tDatos secuenciDatos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("secuenciDatos",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // secuenciDatos ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("secuenciDatos",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // usarVariableFacto ::= CREMENTO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("usarVariableFacto",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // usarVariableFacto ::= SUMA_IGUAL tDatos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("usarVariableFacto",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // usarVariableFacto ::= INCREMENTO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("usarVariableFacto",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // usarVariableFacto ::= RESTA_IGUAL tDatos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("usarVariableFacto",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // usarVariableFacto ::= MULTIPLICACION_IGUAL tDatos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("usarVariableFacto",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // usarVariableFacto ::= DIVISION_IGUAL tDatos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("usarVariableFacto",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // usarVariableFacto ::= MODULO_IGUAL tDatos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("usarVariableFacto",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // usarVariableFacto ::= ID loclaMetodFacto 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("usarVariableFacto",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // usarVariableFacto ::= loclaMetodFacto 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("usarVariableFacto",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // usarVariableFacto ::= C_APERTURA tDatos C_CIERRE loclaMetodFacto 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("usarVariableFacto",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // usarVariableFacto ::= P_APERTURA factoIDATO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("usarVariableFacto",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // loclaMetodFacto ::= PUNTO ID variableObjectUsarCrear 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("loclaMetodFacto",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // loclaMetodFacto ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("loclaMetodFacto",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // variableObjectUsarCrear ::= P_APERTURA variableSet 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableObjectUsarCrear",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // variableObjectUsarCrear ::= loclaMetodFacto 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableObjectUsarCrear",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // variableSet ::= tDatos secuenciDatos P_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableSet",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // variableSet ::= P_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableSet",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // terminalAccion ::= RETURN tDatos p 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("terminalAccion",53, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // terminalAccion ::= BREAK p 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("terminalAccion",53, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // sentenciaControl ::= WHILE P_APERTURA tDatos P_CIERRE realicarSentenciaControl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciaControl",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // sentenciaControl ::= DO realicarSentenciaControl WHILE P_APERTURA tDatos P_CIERRE p 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciaControl",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // sentenciaControl ::= IF P_APERTURA tDatos P_CIERRE realicarSentenciaControl sentenciaElse 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciaControl",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // sentenciaControl ::= SWITCH P_APERTURA tDatos P_CIERRE L_APERTURA internoSwitch L_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciaControl",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // sentenciaControl ::= FOR P_APERTURA inializarVariable sentenciaFor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciaControl",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // realicarSentenciaControl ::= L_APERTURA localMetodo L_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("realicarSentenciaControl",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // internoSwitch ::= CASE dSeguidoF DOBLE_PUNTO localSwitch internoSwitch 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("internoSwitch",72, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // internoSwitch ::= DEFAULT DOBLE_PUNTO localSwitch 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("internoSwitch",72, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // internoSwitch ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("internoSwitch",72, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // localSwitch ::= localSwitchDeclaracion localSwitch 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("localSwitch",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // localSwitch ::= terminalAccion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("localSwitch",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // localSwitchDeclaracion ::= variableLocal 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("localSwitchDeclaracion",74, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // localSwitchDeclaracion ::= sentenciaControl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("localSwitchDeclaracion",74, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // sentenciaFor ::= P_CIERRE realicarSentenciaControl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciaFor",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // sentenciaFor ::= tDatos p usarVariable P_CIERRE realicarSentenciaControl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciaFor",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // inializarVariable ::= variableIDFor asignacionVariable 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("inializarVariable",65, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // inializarVariable ::= ID forVariableId 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("inializarVariable",65, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // variableIDFor ::= numFloat 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableIDFor",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // variableIDFor ::= numDouble 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableIDFor",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // variableIDFor ::= variableChar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableIDFor",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // variableIDFor ::= variableBoolean 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableIDFor",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // variableIDFor ::= variableStirng 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableIDFor",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // variableIDFor ::= numEntero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableIDFor",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // variableIDFor ::= error 
            {
              Object RESULT =null;
		
System.out.println("\n"+errorCounter+" - Clase<"+nameClass+"> en simbolo<" + sym.terminalNames[cur_token.sym]+String.format(">posicion: <%d>, <%d>", (cur_token.left+1), (cur_token.right+1)));
Console.ConsoleText.append("\n"+errorCounter+" - Clase<"+nameClass+"> en simbolo<" + sym.terminalNames[cur_token.sym]+String.format(">posicion: <%d>, <%d>", (cur_token.left+1), (cur_token.right+1)));

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableIDFor",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // forVariableId ::= ID forVariableIdFac 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("forVariableId",66, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // forVariableId ::= C_APERTURA C_CIERRE forVariableId 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("forVariableId",66, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // forVariableIdFac ::= DOBLE_PUNTO ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("forVariableIdFac",67, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // forVariableIdFac ::= asignacionVariable 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("forVariableIdFac",67, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // sentenciaElse ::= ELSE sentenciaElseFac 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciaElse",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // sentenciaElse ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciaElse",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // sentenciaElseFac ::= L_APERTURA localMetodo L_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciaElseFac",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // sentenciaElseFac ::= IF P_APERTURA tDatos P_CIERRE L_APERTURA localMetodo L_CIERRE sentenciaElse 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciaElseFac",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // sentenciaElseFac ::= error 
            {
              Object RESULT =null;
		
System.out.println("\n"+errorCounter+" - Clase<"+nameClass+"> en simbolo<" + sym.terminalNames[cur_token.sym]+String.format(">posicion: <%d>, <%d>", (cur_token.left+1), (cur_token.right+1)));
Console.ConsoleText.append("\n"+errorCounter+" - Clase<"+nameClass+"> en simbolo<" + sym.terminalNames[cur_token.sym]+String.format(">posicion: <%d>, <%d>", (cur_token.left+1), (cur_token.right+1)));

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciaElseFac",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
