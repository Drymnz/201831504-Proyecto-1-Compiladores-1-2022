
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.cunoc.JFlex_Cup.Java;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\161\000\002\002\004\000\002\002\004\000\002\060" +
    "\002\000\002\054\006\000\002\054\002\000\002\005\003" +
    "\000\002\055\005\000\002\055\005\000\002\055\003\000" +
    "\002\055\004\000\002\057\004\000\002\057\002\000\002" +
    "\056\004\000\002\004\003\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\003\000\002\003\003\000\002\006\006\000" +
    "\002\006\002\000\002\007\006\000\002\007\002\000\002" +
    "\011\004\000\002\011\003\000\002\012\004\000\002\012" +
    "\004\000\002\013\005\000\002\013\003\000\002\010\003" +
    "\000\002\010\003\000\002\020\002\000\002\020\004\000" +
    "\002\020\003\000\002\020\003\000\002\020\004\000\002" +
    "\017\004\000\002\017\004\000\002\052\003\000\002\052" +
    "\002\000\002\053\003\000\002\053\002\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\061\002\000" +
    "\002\062\002\000\002\014\012\000\002\015\004\000\002" +
    "\015\002\000\002\021\004\000\002\021\003\000\002\063" +
    "\002\000\002\022\005\000\002\022\004\000\002\024\004" +
    "\000\002\024\003\000\002\045\003\000\002\045\002\000" +
    "\002\023\005\000\002\023\003\000\002\044\005\000\002" +
    "\044\003\000\002\041\004\000\002\040\004\000\002\040" +
    "\002\000\002\043\003\000\002\043\003\000\002\043\003" +
    "\000\002\043\003\000\002\043\003\000\002\043\003\000" +
    "\002\043\003\000\002\031\004\000\002\033\004\000\002" +
    "\034\004\000\002\035\004\000\002\036\004\000\002\037" +
    "\004\000\002\032\004\000\002\032\004\000\002\032\004" +
    "\000\002\032\004\000\002\051\003\000\002\051\005\000" +
    "\002\025\003\000\002\025\006\000\002\042\003\000\002" +
    "\042\003\000\002\042\003\000\002\042\003\000\002\042" +
    "\003\000\002\042\005\000\002\026\003\000\002\027\005" +
    "\000\002\027\003\000\002\030\003\000\002\030\003\000" +
    "\002\064\002\000\002\065\002\000\002\046\012\000\002" +
    "\066\002\000\002\067\002\000\002\046\014\000\002\070" +
    "\002\000\002\071\002\000\002\046\013\000\002\047\004" +
    "\000\002\047\002\000\002\050\004\000\002\050\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\274\000\020\021\004\030\uffeb\052\uffeb\053\uffeb\054" +
    "\uffeb\055\uffeb\056\uffeb\001\002\000\004\061\255\001\002" +
    "\000\004\002\254\001\002\000\016\030\uffe0\052\013\053" +
    "\007\054\011\055\017\056\010\001\002\000\046\003\uffd5" +
    "\004\uffd5\005\uffd5\006\uffd5\007\uffd5\010\uffd5\012\uffd5\013" +
    "\uffd5\016\uffd5\024\uffd5\030\uffd5\036\uffd5\055\uffd5\056\uffd5" +
    "\061\uffd5\062\uffd5\070\uffd5\076\uffd5\001\002\000\052\003" +
    "\uffd8\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8\012\uffd8" +
    "\013\uffd8\016\uffd8\024\uffd8\030\uffd8\036\uffd8\052\uffd8\053" +
    "\uffd8\054\uffd8\055\253\061\uffd8\062\uffd8\070\uffd8\076\uffd8" +
    "\001\002\000\046\003\uffd3\004\uffd3\005\uffd3\006\uffd3\007" +
    "\uffd3\010\uffd3\012\uffd3\013\uffd3\016\uffd3\024\uffd3\030\uffd3" +
    "\036\uffd3\055\uffd3\056\uffd3\061\uffd3\062\uffd3\070\uffd3\076" +
    "\uffd3\001\002\000\010\030\uffdd\055\017\056\010\001\002" +
    "\000\046\003\uffd4\004\uffd4\005\uffd4\006\uffd4\007\uffd4\010" +
    "\uffd4\012\uffd4\013\uffd4\016\uffd4\024\uffd4\030\uffd4\036\uffd4" +
    "\055\uffd4\056\uffd4\061\uffd4\062\uffd4\070\uffd4\076\uffd4\001" +
    "\002\000\012\030\uffde\052\013\053\007\054\011\001\002" +
    "\000\004\030\022\001\002\000\004\002\000\001\002\000" +
    "\052\003\uffd6\004\uffd6\005\uffd6\006\uffd6\007\uffd6\010\uffd6" +
    "\012\uffd6\013\uffd6\016\uffd6\024\uffd6\030\uffd6\036\uffd6\052" +
    "\uffd6\053\uffd6\054\uffd6\056\020\061\uffd6\062\uffd6\070\uffd6" +
    "\076\uffd6\001\002\000\050\003\uffd7\004\uffd7\005\uffd7\006" +
    "\uffd7\007\uffd7\010\uffd7\012\uffd7\013\uffd7\016\uffd7\024\uffd7" +
    "\030\uffd7\036\uffd7\052\uffd7\053\uffd7\054\uffd7\061\uffd7\062" +
    "\uffd7\070\uffd7\076\uffd7\001\002\000\050\003\uffda\004\uffda" +
    "\005\uffda\006\uffda\007\uffda\010\uffda\012\uffda\013\uffda\016" +
    "\uffda\024\uffda\030\uffda\036\uffda\052\uffda\053\uffda\054\uffda" +
    "\061\uffda\062\uffda\070\uffda\076\uffda\001\002\000\004\061" +
    "\023\001\002\000\004\100\024\001\002\000\054\003\uffd2" +
    "\004\uffd2\005\uffd2\006\uffd2\007\uffd2\010\uffd2\012\uffd2\013" +
    "\uffd2\016\uffd2\024\uffd2\036\uffd2\052\uffd2\053\uffd2\054\uffd2" +
    "\055\uffd2\056\uffd2\061\uffd2\062\uffd2\070\uffd2\076\uffd2\101" +
    "\uffd2\001\002\000\054\003\uffc5\004\uffc5\005\uffc5\006\uffc5" +
    "\007\uffc5\010\uffc5\012\uffc5\013\uffc5\016\uffc5\024\uffc5\036" +
    "\uffc5\052\013\053\007\054\011\055\017\056\010\061\uffc5" +
    "\062\uffc5\070\uffc5\076\uffc5\101\uffce\001\002\000\040\003" +
    "\060\004\045\005\061\006\043\007\040\010\054\012\071" +
    "\013\046\016\051\024\063\036\065\061\050\062\052\070" +
    "\042\076\057\001\002\000\004\101\uffd1\001\002\000\044" +
    "\003\uffc5\004\uffc5\005\uffc5\006\uffc5\007\uffc5\010\uffc5\012" +
    "\uffc5\013\uffc5\016\uffc5\024\uffc5\036\uffc5\055\017\056\010" +
    "\061\uffc5\062\uffc5\070\uffc5\076\uffc5\001\002\000\040\003" +
    "\uffc7\004\uffc7\005\uffc7\006\uffc7\007\uffc7\010\uffc7\012\uffc7" +
    "\013\uffc7\016\uffc7\024\uffc7\036\uffc7\061\uffc7\062\uffc7\070" +
    "\uffc7\076\uffc7\001\002\000\040\003\uffc6\004\uffc6\005\uffc6" +
    "\006\uffc6\007\uffc6\010\uffc6\012\uffc6\013\uffc6\016\uffc6\024" +
    "\uffc6\036\uffc6\061\uffc6\062\uffc6\070\uffc6\076\uffc6\001\002" +
    "\000\040\003\uffc8\004\uffc8\005\uffc8\006\uffc8\007\uffc8\010" +
    "\uffc8\012\uffc8\013\uffc8\016\uffc8\024\uffc8\036\uffc8\061\uffc8" +
    "\062\uffc8\070\uffc8\076\uffc8\001\002\000\004\101\035\001" +
    "\002\000\004\002\uffd0\001\002\000\022\003\uffb7\024\uffb7" +
    "\027\uffb7\036\uffb7\061\uffb7\070\uffb7\076\uffb7\077\uffb7\001" +
    "\002\000\054\003\uffc5\004\uffc5\005\uffc5\006\uffc5\007\uffc5" +
    "\010\uffc5\012\uffc5\013\uffc5\016\uffc5\024\uffc5\036\uffc5\052" +
    "\013\053\007\054\011\055\017\056\010\061\uffc5\062\uffc5" +
    "\070\uffc5\076\uffc5\101\uffce\001\002\000\006\061\074\102" +
    "\072\001\002\000\004\101\uffcf\001\002\000\032\011\164" +
    "\015\200\017\161\020\171\025\177\035\173\057\156\060" +
    "\175\061\163\063\174\076\170\100\154\001\002\000\006" +
    "\061\074\102\072\001\002\000\022\003\uffbc\024\uffbc\027" +
    "\uffbc\036\uffbc\061\uffbc\070\uffbc\076\uffbc\077\uffbc\001\002" +
    "\000\006\061\074\102\072\001\002\000\006\061\074\102" +
    "\072\001\002\000\022\003\uffb8\024\uffb8\027\uffb8\036\uffb8" +
    "\061\uffb8\070\uffb8\076\uffb8\077\uffb8\001\002\000\010\061" +
    "\074\076\126\102\072\001\002\000\006\061\074\102\072" +
    "\001\002\000\006\061\074\102\072\001\002\000\022\003" +
    "\uffba\024\uffba\027\uffba\036\uffba\061\uffba\070\uffba\076\uffba" +
    "\077\uffba\001\002\000\006\061\074\102\072\001\002\000" +
    "\004\101\uffcc\001\002\000\054\003\uffc3\004\uffc3\005\uffc3" +
    "\006\uffc3\007\uffc3\010\uffc3\012\uffc3\013\uffc3\016\uffc3\024" +
    "\uffc3\036\uffc3\052\uffc3\053\uffc3\054\uffc3\055\uffc3\056\uffc3" +
    "\061\uffc3\062\uffc3\070\uffc3\076\uffc3\101\uffc3\001\002\000" +
    "\030\004\045\005\061\006\043\007\040\010\054\012\071" +
    "\013\046\016\051\061\104\062\052\077\uff93\001\002\000" +
    "\060\003\uffe1\004\uffe1\005\uffe1\006\uffe1\007\uffe1\010\uffe1" +
    "\012\uffe1\013\uffe1\016\uffe1\022\uffe1\024\uffe1\030\uffe1\036" +
    "\uffe1\052\uffe1\053\uffe1\054\uffe1\055\uffe1\056\uffe1\061\uffe1" +
    "\062\uffe1\070\uffe1\076\uffe1\101\uffe1\001\002\000\006\061" +
    "\074\102\072\001\002\000\016\003\060\024\063\036\065" +
    "\061\125\070\042\076\057\001\002\000\060\003\uffe2\004" +
    "\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\012\uffe2\013\uffe2" +
    "\016\uffe2\022\uffe2\024\uffe2\030\uffe2\036\uffe2\052\uffe2\053" +
    "\uffe2\054\uffe2\055\uffe2\056\uffe2\061\uffe2\062\uffe2\070\uffe2" +
    "\076\uffe2\101\uffe2\001\002\000\022\003\uffbb\024\uffbb\027" +
    "\uffbb\036\uffbb\061\uffbb\070\uffbb\076\uffbb\077\uffbb\001\002" +
    "\000\004\061\101\001\002\000\054\003\uffcb\004\uffcb\005" +
    "\uffcb\006\uffcb\007\uffcb\010\uffcb\012\uffcb\013\uffcb\016\uffcb" +
    "\024\uffcb\036\uffcb\052\uffcb\053\uffcb\054\uffcb\055\uffcb\056" +
    "\uffcb\061\uffcb\062\uffcb\070\uffcb\076\uffcb\101\uffcb\001\002" +
    "\000\022\003\uffbd\024\uffbd\027\uffbd\036\uffbd\061\uffbd\070" +
    "\uffbd\076\uffbd\077\uffbd\001\002\000\022\003\uffb9\024\uffb9" +
    "\027\uffb9\036\uffb9\061\uffb9\070\uffb9\076\uffb9\077\uffb9\001" +
    "\002\000\006\061\074\102\072\001\002\000\004\103\075" +
    "\001\002\000\022\003\uffb5\024\uffb5\027\uffb5\036\uffb5\061" +
    "\uffb5\070\uffb5\076\uffb5\077\uffb5\001\002\000\022\003\uffac" +
    "\024\uffac\027\uffac\036\uffac\061\uffac\070\uffac\076\uffac\077" +
    "\uffac\001\002\000\006\061\074\102\072\001\002\000\022" +
    "\003\uffab\024\uffab\027\uffab\036\uffab\061\uffab\070\uffab\076" +
    "\uffab\077\uffab\001\002\000\054\003\uffc5\004\uffc5\005\uffc5" +
    "\006\uffc5\007\uffc5\010\uffc5\012\uffc5\013\uffc5\016\uffc5\024" +
    "\uffc5\036\uffc5\052\013\053\007\054\011\055\017\056\010" +
    "\061\uffc5\062\uffc5\070\uffc5\076\uffc5\101\uffce\001\002\000" +
    "\004\101\uffca\001\002\000\004\076\102\001\002\000\030" +
    "\004\045\005\061\006\043\007\040\010\054\012\071\013" +
    "\046\016\051\061\104\062\052\077\uff93\001\002\000\004" +
    "\077\112\001\002\000\006\061\074\102\072\001\002\000" +
    "\006\027\106\077\uff91\001\002\000\030\004\045\005\061" +
    "\006\043\007\040\010\054\012\071\013\046\016\051\061" +
    "\104\062\052\077\uff93\001\002\000\004\077\uff94\001\002" +
    "\000\004\077\uff92\001\002\000\022\003\uffb1\024\uffb1\027" +
    "\uffb1\036\uffb1\061\uffb1\070\uffb1\076\uffb1\077\uffb1\001\002" +
    "\000\004\100\113\001\002\000\030\004\uff9a\005\uff9a\006" +
    "\uff9a\007\uff9a\010\uff9a\012\uff9a\013\uff9a\016\uff9a\061\uff9a" +
    "\062\uff9a\101\uff9a\001\002\000\030\004\045\005\061\006" +
    "\043\007\040\010\054\012\071\013\046\016\051\061\104" +
    "\062\052\101\ufffd\001\002\000\004\101\uff99\001\002\000" +
    "\010\003\060\024\063\070\042\001\002\000\030\004\uffff" +
    "\005\uffff\006\uffff\007\uffff\010\uffff\012\uffff\013\uffff\016" +
    "\uffff\061\uffff\062\uffff\101\uffff\001\002\000\030\004\045" +
    "\005\061\006\043\007\040\010\054\012\071\013\046\016" +
    "\051\061\104\062\052\101\ufffd\001\002\000\004\101\ufffe" +
    "\001\002\000\004\101\123\001\002\000\054\003\uff98\004" +
    "\uff98\005\uff98\006\uff98\007\uff98\010\uff98\012\uff98\013\uff98" +
    "\016\uff98\024\uff98\036\uff98\052\uff98\053\uff98\054\uff98\055" +
    "\uff98\056\uff98\061\uff98\062\uff98\070\uff98\076\uff98\101\uff98" +
    "\001\002\000\004\101\uffcd\001\002\000\004\076\126\001" +
    "\002\000\030\004\045\005\061\006\043\007\040\010\054" +
    "\012\071\013\046\016\051\061\104\062\052\077\uff93\001" +
    "\002\000\004\077\130\001\002\000\004\100\131\001\002" +
    "\000\030\004\uff97\005\uff97\006\uff97\007\uff97\010\uff97\012" +
    "\uff97\013\uff97\016\uff97\061\uff97\062\uff97\101\uff97\001\002" +
    "\000\030\004\045\005\061\006\043\007\040\010\054\012" +
    "\071\013\046\016\051\061\104\062\052\101\ufffd\001\002" +
    "\000\004\101\uff96\001\002\000\004\101\135\001\002\000" +
    "\054\003\uff95\004\uff95\005\uff95\006\uff95\007\uff95\010\uff95" +
    "\012\uff95\013\uff95\016\uff95\024\uff95\036\uff95\052\uff95\053" +
    "\uff95\054\uff95\055\uff95\056\uff95\061\uff95\062\uff95\070\uff95" +
    "\076\uff95\101\uff95\001\002\000\022\003\uffaf\024\uffaf\027" +
    "\uffaf\036\uffaf\061\uffaf\070\uffaf\076\uffaf\077\uffaf\001\002" +
    "\000\004\077\140\001\002\000\004\100\141\001\002\000" +
    "\030\004\uff9d\005\uff9d\006\uff9d\007\uff9d\010\uff9d\012\uff9d" +
    "\013\uff9d\016\uff9d\061\uff9d\062\uff9d\101\uff9d\001\002\000" +
    "\030\004\045\005\061\006\043\007\040\010\054\012\071" +
    "\013\046\016\051\061\104\062\052\101\ufffd\001\002\000" +
    "\004\101\uff9c\001\002\000\004\101\145\001\002\000\054" +
    "\003\uff9b\004\uff9b\005\uff9b\006\uff9b\007\uff9b\010\uff9b\012" +
    "\uff9b\013\uff9b\016\uff9b\024\uff9b\036\uff9b\052\uff9b\053\uff9b" +
    "\054\uff9b\055\uff9b\056\uff9b\061\uff9b\062\uff9b\070\uff9b\076" +
    "\uff9b\101\uff9b\001\002\000\022\003\uffb6\024\uffb6\027\uffb6" +
    "\036\uffb6\061\uffb6\070\uffb6\076\uffb6\077\uffb6\001\002\000" +
    "\022\003\uffb2\024\uffb2\027\uffb2\036\uffb2\061\uffb2\070\uffb2" +
    "\076\uffb2\077\uffb2\001\002\000\022\003\uffb3\024\uffb3\027" +
    "\uffb3\036\uffb3\061\uffb3\070\uffb3\076\uffb3\077\uffb3\001\002" +
    "\000\022\003\uffb4\024\uffb4\027\uffb4\036\uffb4\061\uffb4\070" +
    "\uffb4\076\uffb4\077\uffb4\001\002\000\022\003\uffb0\024\uffb0" +
    "\027\uffb0\036\uffb0\061\uffb0\070\uffb0\076\uffb0\077\uffb0\001" +
    "\002\000\022\003\uffae\024\uffae\027\uffae\036\uffae\061\uffae" +
    "\070\uffae\076\uffae\077\uffae\001\002\000\032\011\164\015" +
    "\200\017\161\020\171\025\177\035\173\057\156\060\175" +
    "\061\163\063\174\076\170\100\154\001\002\000\010\003" +
    "\uffaa\024\uffaa\101\uffaa\001\002\000\024\003\uffed\024\uffed" +
    "\027\uffed\064\uffed\065\uffed\066\uffed\067\uffed\077\uffed\101" +
    "\uffed\001\002\000\014\003\uffa8\024\uffa8\027\uffa8\077\uffa8" +
    "\101\uffa8\001\002\000\016\003\ufffc\024\ufffc\027\ufffc\064" +
    "\232\077\ufffc\101\ufffc\001\002\000\014\003\uff9f\024\uff9f" +
    "\027\uff9f\077\uff9f\101\uff9f\001\002\000\014\003\uffa6\024" +
    "\uffa6\027\uffa6\077\uffa6\101\uffa6\001\002\000\020\003\ufff6" +
    "\023\237\024\ufff6\027\ufff6\064\ufff6\077\ufff6\101\ufff6\001" +
    "\002\000\014\003\uffa4\024\uffa4\027\uffa4\077\uffa4\101\uffa4" +
    "\001\002\000\006\003\060\024\063\001\002\000\014\003" +
    "\uffa5\024\uffa5\027\uffa5\077\uffa5\101\uffa5\001\002\000\024" +
    "\003\ufff4\024\ufff4\027\ufff4\064\222\065\221\066\220\067" +
    "\224\077\ufff4\101\ufff4\001\002\000\014\057\156\060\175" +
    "\061\163\063\174\076\170\001\002\000\014\003\uff9e\024" +
    "\uff9e\027\uff9e\077\uff9e\101\uff9e\001\002\000\014\003\uffa2" +
    "\024\uffa2\027\uffa2\077\uffa2\101\uffa2\001\002\000\004\061" +
    "\203\001\002\000\016\003\ufff9\024\ufff9\027\ufff9\064\ufff9" +
    "\077\ufff9\101\ufff9\001\002\000\024\003\uffee\024\uffee\027" +
    "\uffee\064\uffee\065\uffee\066\uffee\067\uffee\077\uffee\101\uffee" +
    "\001\002\000\014\003\uffa7\024\uffa7\027\uffa7\077\uffa7\101" +
    "\uffa7\001\002\000\004\014\201\001\002\000\014\003\uffa0" +
    "\024\uffa0\027\uffa0\077\uffa0\101\uffa0\001\002\000\004\025" +
    "\202\001\002\000\014\003\uffa1\024\uffa1\027\uffa1\077\uffa1" +
    "\101\uffa1\001\002\000\004\076\204\001\002\000\032\011" +
    "\164\015\200\017\161\020\171\025\177\057\156\060\175" +
    "\061\163\063\174\076\170\077\210\100\154\001\002\000" +
    "\004\077\214\001\002\000\014\003\uffbe\024\uffbe\027\211" +
    "\077\uffbe\101\uffbe\001\002\000\010\003\uffa9\024\uffa9\101" +
    "\uffa9\001\002\000\010\003\uffc1\024\uffc1\101\uffc1\001\002" +
    "\000\030\011\164\015\200\017\161\020\171\025\177\057" +
    "\156\060\175\061\163\063\174\076\170\100\154\001\002" +
    "\000\012\003\uffc0\024\uffc0\077\uffc0\101\uffc0\001\002\000" +
    "\012\003\uffbf\024\uffbf\077\uffbf\101\uffbf\001\002\000\012" +
    "\003\uffbe\024\uffbe\027\211\101\uffbe\001\002\000\010\003" +
    "\uffc2\024\uffc2\101\uffc2\001\002\000\006\064\232\077\233" +
    "\001\002\000\014\064\222\065\221\066\220\067\224\077" +
    "\223\001\002\000\010\057\156\060\175\076\225\001\002" +
    "\000\010\057\156\060\175\076\225\001\002\000\010\057" +
    "\156\060\175\076\225\001\002\000\024\003\uffef\024\uffef" +
    "\027\uffef\064\uffef\065\uffef\066\uffef\067\uffef\077\uffef\101" +
    "\uffef\001\002\000\010\057\156\060\175\076\225\001\002" +
    "\000\010\057\156\060\175\076\225\001\002\000\024\003" +
    "\ufff1\024\ufff1\027\ufff1\064\ufff1\065\ufff1\066\ufff1\067\ufff1" +
    "\077\ufff1\101\ufff1\001\002\000\024\003\ufff3\024\ufff3\027" +
    "\ufff3\064\ufff3\065\ufff3\066\220\067\224\077\ufff3\101\ufff3" +
    "\001\002\000\024\003\ufff2\024\ufff2\027\ufff2\064\ufff2\065" +
    "\ufff2\066\220\067\224\077\ufff2\101\ufff2\001\002\000\024" +
    "\003\ufff0\024\ufff0\027\ufff0\064\ufff0\065\ufff0\066\ufff0\067" +
    "\ufff0\077\ufff0\101\ufff0\001\002\000\010\061\163\063\174" +
    "\076\234\001\002\000\016\003\ufffa\024\ufffa\027\ufffa\064" +
    "\ufffa\077\ufffa\101\ufffa\001\002\000\010\061\163\063\174" +
    "\076\234\001\002\000\016\003\ufffb\024\ufffb\027\ufffb\064" +
    "\ufffb\077\ufffb\101\ufffb\001\002\000\054\003\uffc4\004\uffc4" +
    "\005\uffc4\006\uffc4\007\uffc4\010\uffc4\012\uffc4\013\uffc4\016" +
    "\uffc4\024\uffc4\036\uffc4\052\uffc4\053\uffc4\054\uffc4\055\uffc4" +
    "\056\uffc4\061\uffc4\062\uffc4\070\uffc4\076\uffc4\101\uffc4\001" +
    "\002\000\004\061\241\001\002\000\016\003\ufff8\024\ufff8" +
    "\027\ufff8\064\ufff8\077\ufff8\101\ufff8\001\002\000\020\003" +
    "\ufff6\023\237\024\ufff6\027\ufff6\064\ufff6\077\ufff6\101\ufff6" +
    "\001\002\000\016\003\ufff7\024\ufff7\027\ufff7\064\ufff7\077" +
    "\ufff7\101\ufff7\001\002\000\016\003\ufff5\024\ufff5\027\ufff5" +
    "\064\ufff5\077\ufff5\101\ufff5\001\002\000\004\101\245\001" +
    "\002\000\014\003\uffa3\024\uffa3\027\uffa3\077\uffa3\101\uffa3" +
    "\001\002\000\022\003\uffad\024\uffad\027\uffad\036\uffad\061" +
    "\uffad\070\uffad\076\uffad\077\uffad\001\002\000\004\101\uffc9" +
    "\001\002\000\004\030\uffdf\001\002\000\004\030\uffdc\001" +
    "\002\000\050\003\uffdb\004\uffdb\005\uffdb\006\uffdb\007\uffdb" +
    "\010\uffdb\012\uffdb\013\uffdb\016\uffdb\024\uffdb\030\uffdb\036" +
    "\uffdb\052\uffdb\053\uffdb\054\uffdb\061\uffdb\062\uffdb\070\uffdb" +
    "\076\uffdb\001\002\000\050\003\uffd9\004\uffd9\005\uffd9\006" +
    "\uffd9\007\uffd9\010\uffd9\012\uffd9\013\uffd9\016\uffd9\024\uffd9" +
    "\030\uffd9\036\uffd9\052\uffd9\053\uffd9\054\uffd9\061\uffd9\062" +
    "\uffd9\070\uffd9\076\uffd9\001\002\000\004\002\001\001\002" +
    "\000\010\003\060\023\256\024\063\001\002\000\004\061" +
    "\275\001\002\000\020\022\261\030\uffe9\052\uffe9\053\uffe9" +
    "\054\uffe9\055\uffe9\056\uffe9\001\002\000\020\022\uffe3\030" +
    "\uffe3\052\uffe3\053\uffe3\054\uffe3\055\uffe3\056\uffe3\001\002" +
    "\000\004\061\263\001\002\000\016\030\uffec\052\uffec\053" +
    "\uffec\054\uffec\055\uffec\056\uffec\001\002\000\010\003\060" +
    "\023\264\024\063\001\002\000\006\061\270\066\271\001" +
    "\002\000\020\022\261\030\uffe9\052\uffe9\053\uffe9\054\uffe9" +
    "\055\uffe9\056\uffe9\001\002\000\020\022\uffe7\030\uffe7\052" +
    "\uffe7\053\uffe7\054\uffe7\055\uffe7\056\uffe7\001\002\000\016" +
    "\030\uffea\052\uffea\053\uffea\054\uffea\055\uffea\056\uffea\001" +
    "\002\000\010\003\060\023\264\024\063\001\002\000\006" +
    "\003\060\024\063\001\002\000\020\022\uffe8\030\uffe8\052" +
    "\uffe8\053\uffe8\054\uffe8\055\uffe8\056\uffe8\001\002\000\020" +
    "\022\uffe6\030\uffe6\052\uffe6\053\uffe6\054\uffe6\055\uffe6\056" +
    "\uffe6\001\002\000\020\022\uffe5\030\uffe5\052\uffe5\053\uffe5" +
    "\054\uffe5\055\uffe5\056\uffe5\001\002\000\010\003\060\023" +
    "\256\024\063\001\002\000\020\022\uffe4\030\uffe4\052\uffe4" +
    "\053\uffe4\054\uffe4\055\uffe4\056\uffe4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\274\000\006\002\004\006\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\014\015\016\011\017\013" +
    "\020\014\001\001\000\002\001\001\000\004\052\251\001" +
    "\001\000\002\001\001\000\004\017\250\001\001\000\002" +
    "\001\001\000\004\016\247\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\053\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\061\024\001\001\000\014\015\026\016\027\017\031" +
    "\024\025\045\030\001\001\000\034\010\055\021\040\022" +
    "\054\023\065\031\066\032\035\033\043\034\063\035\052" +
    "\036\067\037\046\043\061\046\036\001\001\000\004\062" +
    "\033\001\001\000\006\017\031\045\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\015\246" +
    "\016\027\017\031\024\025\045\030\001\001\000\004\051" +
    "\245\001\001\000\002\001\001\000\024\003\166\004\171" +
    "\005\165\025\164\026\156\027\175\030\161\042\154\055" +
    "\157\001\001\000\004\051\152\001\001\000\002\001\001" +
    "\000\004\051\151\001\001\000\004\051\150\001\001\000" +
    "\002\001\001\000\004\051\110\001\001\000\004\051\147" +
    "\001\001\000\004\051\146\001\001\000\002\001\001\000" +
    "\004\051\145\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\031\066\032\035\033\043\034\063\035\052\036" +
    "\067\037\046\043\104\047\136\001\001\000\002\001\001" +
    "\000\004\051\135\001\001\000\012\010\055\022\123\023" +
    "\065\046\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\063\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\051\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\051" +
    "\075\001\001\000\002\001\001\000\014\015\077\016\027" +
    "\017\031\024\025\045\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\031\066\032\035\033\043\034\063" +
    "\035\052\036\067\037\046\043\104\047\102\001\001\000" +
    "\002\001\001\000\004\051\110\001\001\000\004\050\106" +
    "\001\001\000\024\031\066\032\035\033\043\034\063\035" +
    "\052\036\067\037\046\043\104\047\107\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\066\113\001\001\000\024\031\066\032\035" +
    "\033\043\034\063\035\052\036\067\037\046\043\115\054" +
    "\114\001\001\000\004\067\121\001\001\000\006\010\055" +
    "\023\116\001\001\000\004\060\117\001\001\000\024\031" +
    "\066\032\035\033\043\034\063\035\052\036\067\037\046" +
    "\043\115\054\120\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\031\066\032\035\033\043\034\063\035\052\036" +
    "\067\037\046\043\104\047\126\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\070\131\001\001\000\024\031" +
    "\066\032\035\033\043\034\063\035\052\036\067\037\046" +
    "\043\115\054\132\001\001\000\004\071\133\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\064\141\001\001\000" +
    "\024\031\066\032\035\033\043\034\063\035\052\036\067" +
    "\037\046\043\115\054\142\001\001\000\004\065\143\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\003\166\004\171" +
    "\005\165\025\243\026\156\027\175\030\161\042\154\055" +
    "\157\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\057\237\001\001\000\002\001\001\000\004" +
    "\010\235\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\216\055\215\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\003\166\004\171\005\165\026\156\027\175\030\161" +
    "\041\204\042\205\044\206\055\157\001\001\000\002\001" +
    "\001\000\004\040\211\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\003\166\004\171\005\165\026\156\027" +
    "\175\030\161\041\212\042\205\055\157\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\040\214\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\230\001\001\000\004\003\227\001\001\000\004\003" +
    "\226\001\001\000\002\001\001\000\004\003\225\001\001" +
    "\000\004\003\216\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\055\234" +
    "\001\001\000\002\001\001\000\004\055\215\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\056\241\001\001" +
    "\000\002\001\001\000\004\057\242\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\010\257\013\256\001\001\000\002\001" +
    "\001\000\004\007\261\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\010\265\011\264\001" +
    "\001\000\004\012\271\001\001\000\004\007\266\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\265\011" +
    "\273\001\001\000\004\010\272\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\257\013" +
    "\275\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        
        Sintactico(Lexico lexico){
            super(lexico);
        }

        public void syntax_error(Symbol cur_token) {
        System.out.println("El error es el simbolo: " + sym.terminalNames[cur_token.sym]);
        System.out.println(String.format("En la posicion: %d, %d", cur_token.left, cur_token.right));
        }
        /*public void unrecovered_syntax_error(Symbol cur_token) {
            if (cur_token.sym == sym.EOF) {
             System.out.println("public void unrecoveredsyntax_error!!!!!!!!!!!!!!");
            }
        }*/


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= encabezado clase 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              Object RESULT =null;
System.out.println("********PRIMERA VARIABLE********");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // localMetodo ::= variableID atributos NT$0 localMetodo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("localMetodo",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // localMetodo ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("localMetodo",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // s ::= os 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("s",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // os ::= os SUMA os 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("os",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // os ::= P_APERTURA os P_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("os",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // os ::= TEXT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("os",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // os ::= ID idDato 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("os",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // idDato ::= PUNTO idDatoFac 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("idDato",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // idDato ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("idDato",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // idDatoFac ::= ID idDato 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("idDatoFac",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // j ::= o 
            {
              String RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("j",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // o ::= o SUMA o 
            {
              String RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("o",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // o ::= o RESTA o 
            {
              String RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("o",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // o ::= o DIVISION o 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("o",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // o ::= o MULTIPLICACION o 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("o",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // o ::= P_APERTURA o P_CIERRE 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("o",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // o ::= ENTERO 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("o",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // o ::= DECIMAL 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("o",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // encabezado ::= PACKAGE ID pc importacion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("encabezado",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // encabezado ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("encabezado",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // importacion ::= IMPORT ID sp importacion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("importacion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // importacion ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("importacion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sp ::= PUNTO spp 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sp",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sp ::= p 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sp",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // spp ::= MULTIPLICACION p 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("spp",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // spp ::= ID sp 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("spp",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // pc ::= PUNTO ID pc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("pc",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // pc ::= p 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("pc",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // p ::= PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("p",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // p ::= error 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("p",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // v ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("v",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // v ::= staticCfianl vc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("v",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // v ::= staticCfianl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("v",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // v ::= vc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("v",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // v ::= vc staticCfianl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("v",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // staticCfianl ::= STATIC staticFactori 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("staticCfianl",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // staticCfianl ::= FINAL finalFactori 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("staticCfianl",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // staticFactori ::= FINAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("staticFactori",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // staticFactori ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("staticFactori",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // finalFactori ::= STATIC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("finalFactori",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // finalFactori ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("finalFactori",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // vc ::= PUBLIC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vc",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // vc ::= PRIVATE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vc",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // vc ::= PROTECTED 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vc",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$1 ::= 
            {
              Object RESULT =null;
System.out.println("****INICIO CLASES");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$1",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
System.out.println("****FINAL CLASES");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$2",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // clase ::= v CLASS ID L_APERTURA NT$1 internoClase NT$2 L_CIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("clase",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // internoClase ::= vGlobal internoClaseFa 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("internoClase",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // internoClase ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("internoClase",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // internoClaseFa ::= variableID ayuda 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("internoClaseFa",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // internoClaseFa ::= ayuda 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("internoClaseFa",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$3 ::= 
            {
              Object RESULT =null;
System.out.println("FINAL ATRIBUTO");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$3",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ayuda ::= atributos NT$3 internoClase 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ayuda",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ayuda ::= metodo internoClase 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ayuda",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // vGlobal ::= vc vGlobalFac 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vGlobal",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // vGlobal ::= vGlobalFac 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vGlobal",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // vGlobalFac ::= staticCfianl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vGlobalFac",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // vGlobalFac ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vGlobalFac",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // atributos ::= IGUAL t p 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("atributos",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // atributos ::= p 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("atributos",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // objectInst ::= dSeguidos P_CIERRE dSeguidoF 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("objectInst",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // objectInst ::= P_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("objectInst",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // dSeguidos ::= tDatos dSeguidoF 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dSeguidos",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // dSeguidoF ::= COMA dSeguidos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dSeguidoF",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // dSeguidoF ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dSeguidoF",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // variableID ::= numFloat 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableID",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // variableID ::= numDouble 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableID",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // variableID ::= variableChar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableID",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // variableID ::= variableBoolean 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableID",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // variableID ::= variableStirng 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableID",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // variableID ::= variableObject 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableID",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // variableID ::= numEntero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableID",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // numFloat ::= FLOAT onlyIDArray 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("numFloat",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // numDouble ::= DOUBLE onlyIDArray 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("numDouble",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // variableChar ::= CHAR onlyIDArray 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableChar",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // variableBoolean ::= BOOLEAN onlyIDArray 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableBoolean",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // variableStirng ::= STRING onlyIDArray 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableStirng",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // variableObject ::= ID onlyIDArray 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableObject",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // numEntero ::= BYTE onlyIDArray 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("numEntero",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // numEntero ::= SHORT onlyIDArray 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("numEntero",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // numEntero ::= INT onlyIDArray 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("numEntero",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // numEntero ::= LONG onlyIDArray 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("numEntero",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // onlyIDArray ::= ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("onlyIDArray",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // onlyIDArray ::= C_APERTURA C_CIERRE onlyIDArray 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("onlyIDArray",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // t ::= tDatos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("t",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // t ::= NEW ID P_APERTURA objectInst 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("t",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // tDatos ::= numEnteroDecimal 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatos",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // tDatos ::= vChar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatos",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // tDatos ::= trueOfalse 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatos",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // tDatos ::= s 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatos",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // tDatos ::= F 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatos",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // tDatos ::= L_APERTURA t L_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatos",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // numEnteroDecimal ::= j 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("numEnteroDecimal",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // vChar ::= SIMPLE_COMILLA CARACTER SIMPLE_COMILLA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vChar",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // vChar ::= CHARTN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vChar",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // trueOfalse ::= TRUE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("trueOfalse",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // trueOfalse ::= FALSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("trueOfalse",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // NT$4 ::= 
            {
              Object RESULT =null;
System.out.println("****INICIO METODO");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$4",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
System.out.println("****FINAL METODO");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$5",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // metodo ::= P_APERTURA pMetodoS P_CIERRE L_APERTURA NT$4 localMetodo NT$5 L_CIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("metodo",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // NT$6 ::= 
            {
              Object RESULT =null;
System.out.println("****INICIO METODO");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$6",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
System.out.println("****FINAL METODO");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$7",53, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // metodo ::= VOID ID P_APERTURA pMetodoS P_CIERRE L_APERTURA NT$6 localMetodo NT$7 L_CIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("metodo",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // NT$8 ::= 
            {
              Object RESULT =null;
System.out.println("****INICIO METODO");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$8",54, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // NT$9 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
System.out.println("****FINAL METODO");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$9",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // metodo ::= ID P_APERTURA pMetodoS P_CIERRE L_APERTURA NT$8 localMetodo NT$9 L_CIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("metodo",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // pMetodoS ::= variableID pMetodoSP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("pMetodoS",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // pMetodoS ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("pMetodoS",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // pMetodoSP ::= COMA pMetodoS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("pMetodoSP",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // pMetodoSP ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("pMetodoSP",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
