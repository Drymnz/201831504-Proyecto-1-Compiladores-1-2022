
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.cunoc.JFlex_Cup.Java;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\273\000\002\002\004\000\002\002\004\000\002\005" +
    "\006\000\002\005\003\000\002\012\005\000\002\012\003" +
    "\000\002\006\006\000\002\006\002\000\002\010\004\000" +
    "\002\010\003\000\002\011\004\000\002\011\004\000\002" +
    "\007\003\000\002\007\003\000\002\015\010\000\002\021" +
    "\004\000\002\021\004\000\002\013\003\000\002\013\002" +
    "\000\002\014\003\000\002\014\002\000\002\020\004\000" +
    "\002\020\004\000\002\054\003\000\002\054\002\000\002" +
    "\055\003\000\002\055\002\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\016\004\000\002\016\002" +
    "\000\002\025\004\000\002\025\003\000\002\045\003\000" +
    "\002\045\002\000\002\022\004\000\002\022\003\000\002" +
    "\023\004\000\002\023\004\000\002\043\003\000\002\043" +
    "\003\000\002\043\003\000\002\043\003\000\002\043\003" +
    "\000\002\043\003\000\002\043\003\000\002\030\004\000" +
    "\002\032\004\000\002\033\004\000\002\034\004\000\002" +
    "\037\004\000\002\040\004\000\002\031\004\000\002\031" +
    "\004\000\002\031\004\000\002\031\004\000\002\053\003" +
    "\000\002\053\005\000\002\024\005\000\002\024\003\000" +
    "\002\042\005\000\002\042\003\000\002\046\003\000\002" +
    "\046\003\000\002\046\003\000\002\046\004\000\002\046" +
    "\006\000\002\027\005\000\002\027\003\000\002\057\004" +
    "\000\002\057\003\000\002\041\004\000\002\044\004\000" +
    "\002\044\002\000\002\060\005\000\002\060\003\000\002" +
    "\065\005\000\002\065\002\000\002\047\003\000\002\113" +
    "\006\000\002\113\005\000\002\113\005\000\002\113\006" +
    "\000\002\113\006\000\002\113\003\000\002\113\003\000" +
    "\002\113\004\000\002\113\003\000\002\113\005\000\002" +
    "\115\004\000\002\115\002\000\002\035\003\000\002\035" +
    "\002\000\002\036\003\000\002\036\002\000\002\067\004" +
    "\000\002\067\002\000\002\114\003\000\002\114\004\000" +
    "\002\004\003\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\003\000\002\003" +
    "\003\000\002\003\004\000\002\003\003\000\002\074\004" +
    "\000\002\061\004\000\002\061\006\000\002\061\005\000" +
    "\002\061\002\000\002\056\004\000\002\075\003\000\002" +
    "\075\004\000\002\116\002\000\002\117\002\000\002\050" +
    "\012\000\002\120\002\000\002\121\002\000\002\050\014" +
    "\000\002\122\002\000\002\123\002\000\002\050\013\000" +
    "\002\051\004\000\002\051\002\000\002\052\004\000\002" +
    "\052\002\000\002\064\004\000\002\064\002\000\002\063" +
    "\003\000\002\124\002\000\002\063\004\000\002\063\003" +
    "\000\002\062\004\000\002\076\004\000\002\076\003\000" +
    "\002\076\003\000\002\076\003\000\002\072\003\000\002" +
    "\072\003\000\002\072\003\000\002\072\003\000\002\072" +
    "\003\000\002\072\003\000\002\066\005\000\002\066\002" +
    "\000\002\071\004\000\002\071\003\000\002\073\004\000" +
    "\002\073\003\000\002\100\004\000\002\103\004\000\002" +
    "\103\004\000\002\103\003\000\002\103\004\000\002\103" +
    "\006\000\002\101\004\000\002\101\003\000\002\102\004" +
    "\000\002\102\003\000\002\070\005\000\002\070\004\000" +
    "\002\077\011\000\002\077\013\000\002\077\012\000\002" +
    "\077\006\000\002\105\006\000\002\105\011\000\002\106" +
    "\004\000\002\106\004\000\002\104\003\000\002\104\003" +
    "\000\002\104\003\000\002\104\003\000\002\104\003\000" +
    "\002\104\003\000\002\107\004\000\002\107\005\000\002" +
    "\110\004\000\002\110\003\000\002\111\004\000\002\111" +
    "\002\000\002\112\005\000\002\112\012" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0147\000\020\023\005\024\004\055\ufffa\056\ufffa\057" +
    "\ufffa\060\ufffa\061\ufffa\001\002\000\004\064\u0140\001\002" +
    "\000\004\064\u0139\001\002\000\014\055\ufffe\056\ufffe\057" +
    "\ufffe\060\ufffe\061\ufffe\001\002\000\004\002\u0138\001\002" +
    "\000\014\055\015\056\011\057\013\060\021\061\012\001" +
    "\002\000\046\003\uffe6\004\uffe6\005\uffe6\006\uffe6\007\uffe6" +
    "\010\uffe6\012\uffe6\013\uffe6\016\uffe6\026\uffe6\032\uffe6\040" +
    "\uffe6\060\uffe6\061\uffe6\064\uffe6\065\uffe6\073\uffe6\101\uffe6" +
    "\001\002\000\052\003\uffe9\004\uffe9\005\uffe9\006\uffe9\007" +
    "\uffe9\010\uffe9\012\uffe9\013\uffe9\016\uffe9\026\uffe9\032\uffe9" +
    "\040\uffe9\055\uffe9\056\uffe9\057\uffe9\060\u0137\064\uffe9\065" +
    "\uffe9\073\uffe9\101\uffe9\001\002\000\046\003\uffe4\004\uffe4" +
    "\005\uffe4\006\uffe4\007\uffe4\010\uffe4\012\uffe4\013\uffe4\016" +
    "\uffe4\026\uffe4\032\uffe4\040\uffe4\060\uffe4\061\uffe4\064\uffe4" +
    "\065\uffe4\073\uffe4\101\uffe4\001\002\000\010\032\uffed\060" +
    "\021\061\012\001\002\000\046\003\uffe5\004\uffe5\005\uffe5" +
    "\006\uffe5\007\uffe5\010\uffe5\012\uffe5\013\uffe5\016\uffe5\026" +
    "\uffe5\032\uffe5\040\uffe5\060\uffe5\061\uffe5\064\uffe5\065\uffe5" +
    "\073\uffe5\101\uffe5\001\002\000\012\032\uffef\055\015\056" +
    "\011\057\013\001\002\000\004\032\024\001\002\000\004" +
    "\002\000\001\002\000\052\003\uffe7\004\uffe7\005\uffe7\006" +
    "\uffe7\007\uffe7\010\uffe7\012\uffe7\013\uffe7\016\uffe7\026\uffe7" +
    "\032\uffe7\040\uffe7\055\uffe7\056\uffe7\057\uffe7\061\022\064" +
    "\uffe7\065\uffe7\073\uffe7\101\uffe7\001\002\000\050\003\uffe8" +
    "\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8\012\uffe8\013" +
    "\uffe8\016\uffe8\026\uffe8\032\uffe8\040\uffe8\055\uffe8\056\uffe8" +
    "\057\uffe8\064\uffe8\065\uffe8\073\uffe8\101\uffe8\001\002\000" +
    "\050\003\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb" +
    "\012\uffeb\013\uffeb\016\uffeb\026\uffeb\032\uffeb\040\uffeb\055" +
    "\uffeb\056\uffeb\057\uffeb\064\uffeb\065\uffeb\073\uffeb\101\uffeb" +
    "\001\002\000\004\064\025\001\002\000\004\103\026\001" +
    "\002\000\054\003\uffde\004\uffde\005\uffde\006\uffde\007\uffde" +
    "\010\uffde\012\uffde\013\uffde\016\uffde\026\uffde\040\uffde\055" +
    "\015\056\011\057\013\060\021\061\012\064\uffde\065\uffde" +
    "\073\uffde\101\uffde\104\uffe2\001\002\000\040\003\060\004" +
    "\045\005\061\006\043\007\040\010\054\012\071\013\044" +
    "\016\051\026\063\040\066\064\050\065\052\073\042\101" +
    "\057\001\002\000\004\104\035\001\002\000\044\003\uffde" +
    "\004\uffde\005\uffde\006\uffde\007\uffde\010\uffde\012\uffde\013" +
    "\uffde\016\uffde\026\uffde\040\uffde\060\021\061\012\064\uffde" +
    "\065\uffde\073\uffde\101\uffde\001\002\000\040\003\uffe0\004" +
    "\uffe0\005\uffe0\006\uffe0\007\uffe0\010\uffe0\012\uffe0\013\uffe0" +
    "\016\uffe0\026\uffe0\040\uffe0\064\uffe0\065\uffe0\073\uffe0\101" +
    "\uffe0\001\002\000\040\003\uffdf\004\uffdf\005\uffdf\006\uffdf" +
    "\007\uffdf\010\uffdf\012\uffdf\013\uffdf\016\uffdf\026\uffdf\040" +
    "\uffdf\064\uffdf\065\uffdf\073\uffdf\101\uffdf\001\002\000\040" +
    "\003\uffe1\004\uffe1\005\uffe1\006\uffe1\007\uffe1\010\uffe1\012" +
    "\uffe1\013\uffe1\016\uffe1\026\uffe1\040\uffe1\064\uffe1\065\uffe1" +
    "\073\uffe1\101\uffe1\001\002\000\004\002\ufff3\001\002\000" +
    "\054\003\uffde\004\uffde\005\uffde\006\uffde\007\uffde\010\uffde" +
    "\012\uffde\013\uffde\016\uffde\026\uffde\040\uffde\055\015\056" +
    "\011\057\013\060\021\061\012\064\uffde\065\uffde\073\uffde" +
    "\101\uffde\104\uffe2\001\002\000\022\003\uffd3\026\uffd3\031" +
    "\uffd3\040\uffd3\064\uffd3\073\uffd3\101\uffd3\102\uffd3\001\002" +
    "\000\006\064\074\105\072\001\002\000\004\104\uffe3\001" +
    "\002\000\036\011\164\015\201\017\162\020\167\021\166" +
    "\027\200\037\172\062\161\063\175\064\163\066\174\101" +
    "\165\103\155\105\173\001\002\000\006\064\074\105\072" +
    "\001\002\000\006\064\074\105\072\001\002\000\006\064" +
    "\074\105\072\001\002\000\022\003\uffd8\026\uffd8\031\uffd8" +
    "\040\uffd8\064\uffd8\073\uffd8\101\uffd8\102\uffd8\001\002\000" +
    "\022\003\uffd4\026\uffd4\031\uffd4\040\uffd4\064\uffd4\073\uffd4" +
    "\101\uffd4\102\uffd4\001\002\000\010\064\074\101\u0118\105" +
    "\072\001\002\000\006\064\074\105\072\001\002\000\006" +
    "\064\074\105\072\001\002\000\022\003\uffd6\026\uffd6\031" +
    "\uffd6\040\uffd6\064\uffd6\073\uffd6\101\uffd6\102\uffd6\001\002" +
    "\000\006\064\074\105\072\001\002\000\004\104\uffdc\001" +
    "\002\000\070\003\uffc5\004\uffc5\005\uffc5\006\uffc5\007\uffc5" +
    "\010\uffc5\012\uffc5\013\uffc5\016\uffc5\026\uffc5\040\uffc5\043" +
    "\uffc5\044\uffc5\045\uffc5\046\uffc5\053\uffc5\054\uffc5\055\uffc5" +
    "\056\uffc5\057\uffc5\060\uffc5\061\uffc5\064\uffc5\065\uffc5\073" +
    "\uffc5\101\uffc5\104\uffc5\001\002\000\030\004\045\005\061" +
    "\006\043\007\040\010\054\012\071\013\044\016\051\064" +
    "\102\065\052\102\uff82\001\002\000\072\003\ufff4\004\ufff4" +
    "\005\ufff4\006\ufff4\007\ufff4\010\ufff4\012\ufff4\013\ufff4\016" +
    "\ufff4\024\ufff4\026\ufff4\040\ufff4\043\ufff4\044\ufff4\045\ufff4" +
    "\046\ufff4\053\ufff4\054\ufff4\055\ufff4\056\ufff4\057\ufff4\060" +
    "\ufff4\061\ufff4\064\ufff4\065\ufff4\073\ufff4\101\ufff4\104\ufff4" +
    "\001\002\000\006\064\074\105\072\001\002\000\016\003" +
    "\060\026\063\040\066\064\u0117\073\042\101\057\001\002" +
    "\000\072\003\ufff5\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010" +
    "\ufff5\012\ufff5\013\ufff5\016\ufff5\024\ufff5\026\ufff5\040\ufff5" +
    "\043\ufff5\044\ufff5\045\ufff5\046\ufff5\053\ufff5\054\ufff5\055" +
    "\ufff5\056\ufff5\057\ufff5\060\ufff5\061\ufff5\064\ufff5\065\ufff5" +
    "\073\ufff5\101\ufff5\104\ufff5\001\002\000\022\003\uffd7\026" +
    "\uffd7\031\uffd7\040\uffd7\064\uffd7\073\uffd7\101\uffd7\102\uffd7" +
    "\001\002\000\054\003\uffde\004\uffde\005\uffde\006\uffde\007" +
    "\uffde\010\uffde\012\uffde\013\uffde\016\uffde\026\uffde\040\uffde" +
    "\055\015\056\011\057\013\060\021\061\012\064\uffde\065" +
    "\uffde\073\uffde\101\uffde\104\uffe2\001\002\000\004\064\077" +
    "\001\002\000\022\003\uffd9\026\uffd9\031\uffd9\040\uffd9\064" +
    "\uffd9\073\uffd9\101\uffd9\102\uffd9\001\002\000\022\003\uffd5" +
    "\026\uffd5\031\uffd5\040\uffd5\064\uffd5\073\uffd5\101\uffd5\102" +
    "\uffd5\001\002\000\006\064\074\105\072\001\002\000\004" +
    "\106\075\001\002\000\040\003\uffd1\017\uffd1\020\uffd1\021" +
    "\uffd1\026\uffd1\031\uffd1\040\uffd1\062\uffd1\063\uffd1\064\uffd1" +
    "\066\uffd1\073\uffd1\101\uffd1\102\uffd1\105\uffd1\001\002\000" +
    "\040\003\uffc8\017\uffc8\020\uffc8\021\uffc8\026\uffc8\031\uffc8" +
    "\040\uffc8\062\uffc8\063\uffc8\064\uffc8\066\uffc8\073\uffc8\101" +
    "\uffc8\102\uffc8\105\uffc8\001\002\000\006\064\074\105\072" +
    "\001\002\000\040\003\uffc7\017\uffc7\020\uffc7\021\uffc7\026" +
    "\uffc7\031\uffc7\040\uffc7\062\uffc7\063\uffc7\064\uffc7\066\uffc7" +
    "\073\uffc7\101\uffc7\102\uffc7\105\uffc7\001\002\000\004\101" +
    "\100\001\002\000\030\004\045\005\061\006\043\007\040" +
    "\010\054\012\071\013\044\016\051\064\102\065\052\102" +
    "\uff82\001\002\000\004\102\110\001\002\000\006\064\074" +
    "\105\072\001\002\000\006\031\104\102\uff80\001\002\000" +
    "\030\004\045\005\061\006\043\007\040\010\054\012\071" +
    "\013\044\016\051\064\102\065\052\102\uff82\001\002\000" +
    "\004\102\uff83\001\002\000\004\102\uff81\001\002\000\022" +
    "\003\uffcd\026\uffcd\031\uffcd\040\uffcd\064\uffcd\073\uffcd\101" +
    "\uffcd\102\uffcd\001\002\000\004\103\111\001\002\000\046" +
    "\004\uff89\005\uff89\006\uff89\007\uff89\010\uff89\012\uff89\013" +
    "\uff89\016\uff89\043\uff89\044\uff89\045\uff89\046\uff89\053\uff89" +
    "\054\uff89\060\uff89\064\uff89\065\uff89\104\uff89\001\002\000" +
    "\046\004\045\005\061\006\043\007\040\010\054\012\071" +
    "\013\044\016\051\043\uff7c\044\uff7c\045\uff7c\046\uff7c\053" +
    "\124\054\117\060\127\064\121\065\052\104\uff7e\001\002" +
    "\000\010\003\uff6f\026\uff6f\073\uff6f\001\002\000\054\003" +
    "\uff75\004\uff7a\005\uff7a\006\uff7a\007\uff7a\010\uff7a\012\uff7a" +
    "\013\uff7a\016\uff7a\026\uff75\043\uff7a\044\uff7a\045\uff7a\046" +
    "\uff7a\053\uff7a\054\uff7a\060\uff7a\064\uff7a\065\uff7a\073\uff75" +
    "\104\uff7a\001\002\000\010\003\uff73\026\uff73\073\uff73\001" +
    "\002\000\012\043\333\044\334\045\332\046\335\001\002" +
    "\000\036\011\164\015\201\017\162\020\167\021\166\027" +
    "\200\037\172\062\161\063\175\064\163\066\174\101\165" +
    "\103\155\105\173\001\002\000\010\003\uff76\026\uff76\073" +
    "\uff76\001\002\000\022\003\uff6d\025\145\026\uff6d\067\147" +
    "\070\143\073\146\102\uff6d\105\144\001\002\000\010\003" +
    "\uff77\026\uff77\073\uff77\001\002\000\010\003\uff71\026\uff71" +
    "\073\uff71\001\002\000\006\003\060\026\063\001\002\000" +
    "\046\004\045\005\061\006\043\007\040\010\054\012\071" +
    "\013\044\016\051\043\uff7c\044\uff7c\045\uff7c\046\uff7c\053" +
    "\124\054\117\060\127\064\121\065\052\104\uff7e\001\002" +
    "\000\010\003\060\026\063\073\042\001\002\000\024\004" +
    "\045\005\061\006\043\007\040\010\054\012\071\013\044" +
    "\016\051\065\052\001\002\000\004\104\uff88\001\002\000" +
    "\046\004\uff7d\005\uff7d\006\uff7d\007\uff7d\010\uff7d\012\uff7d" +
    "\013\uff7d\016\uff7d\043\uff7d\044\uff7d\045\uff7d\046\uff7d\053" +
    "\uff7d\054\uff7d\060\uff7d\064\uff7d\065\uff7d\104\uff7d\001\002" +
    "\000\010\003\uff72\026\uff72\073\uff72\001\002\000\010\003" +
    "\uff74\026\uff74\073\uff74\001\002\000\010\003\uff70\026\uff70" +
    "\073\uff70\001\002\000\004\104\136\001\002\000\054\003" +
    "\uff87\004\uff87\005\uff87\006\uff87\007\uff87\010\uff87\012\uff87" +
    "\013\uff87\016\uff87\026\uff87\040\uff87\055\uff87\056\uff87\057" +
    "\uff87\060\uff87\061\uff87\064\uff87\065\uff87\073\uff87\101\uff87" +
    "\104\uff87\001\002\000\010\003\uff78\026\uff78\073\uff78\001" +
    "\002\000\046\004\uff79\005\uff79\006\uff79\007\uff79\010\uff79" +
    "\012\uff79\013\uff79\016\uff79\043\uff79\044\uff79\045\uff79\046" +
    "\uff79\053\uff79\054\uff79\060\uff79\064\uff79\065\uff79\104\uff79" +
    "\001\002\000\004\104\uff7f\001\002\000\054\003\uff5d\004" +
    "\uff5d\005\uff5d\006\uff5d\007\uff5d\010\uff5d\012\uff5d\013\uff5d" +
    "\016\uff5d\026\uff5d\043\uff5d\044\uff5d\045\uff5d\046\uff5d\053" +
    "\uff5d\054\uff5d\060\uff5d\064\uff5d\065\uff5d\073\uff5d\104\uff5d" +
    "\001\002\000\006\070\324\073\325\001\002\000\012\062" +
    "\161\063\175\064\163\066\174\001\002\000\004\064\311" +
    "\001\002\000\036\011\164\015\201\017\162\020\167\021" +
    "\166\027\200\037\172\062\161\063\175\064\163\066\174" +
    "\101\165\103\155\105\173\001\002\000\006\067\154\073" +
    "\153\001\002\000\012\003\uff68\026\uff68\073\uff68\102\uff68" +
    "\001\002\000\012\003\uff65\026\uff65\073\uff65\102\uff65\001" +
    "\002\000\012\003\uff67\026\uff67\073\uff67\102\uff67\001\002" +
    "\000\036\011\164\015\201\017\162\020\167\021\166\027" +
    "\200\037\172\062\161\063\175\064\163\066\174\101\165" +
    "\103\155\105\173\001\002\000\012\003\uff5f\026\uff5f\073" +
    "\uff5f\102\uff5f\001\002\000\040\011\164\015\201\017\162" +
    "\020\167\021\166\027\200\037\172\062\161\063\175\064" +
    "\163\066\174\101\165\103\155\104\302\105\173\001\002" +
    "\000\040\003\uffb2\026\uffb2\031\uffb2\067\uffb2\070\uffb2\071" +
    "\uffb2\072\uffb2\073\235\075\236\076\241\077\240\100\237" +
    "\102\uffb2\104\uffb2\106\uffb2\001\002\000\016\003\uffc3\026" +
    "\uffc3\031\uffc3\073\uffc3\102\uffc3\104\uffc3\001\002\000\012" +
    "\003\uff60\026\uff60\073\uff60\102\uff60\001\002\000\040\003" +
    "\uff97\026\uff97\031\uff97\067\uff97\070\uff97\071\uff97\072\uff97" +
    "\073\uff97\075\uff97\076\uff97\077\uff97\100\uff97\102\uff97\104" +
    "\uff97\106\uff97\001\002\000\040\003\uffab\026\uffab\031\uffab" +
    "\067\uffab\070\uffab\071\uffab\072\uffab\073\uffab\075\uffab\076" +
    "\uffab\077\uffab\100\uffab\102\uffab\104\uffab\106\uffab\001\002" +
    "\000\046\003\uff90\025\263\026\uff90\031\uff90\067\uff90\070" +
    "\uff90\071\uff90\072\uff90\073\uff90\075\uff90\076\uff90\077\uff90" +
    "\100\uff90\101\262\102\uff90\104\uff90\105\261\106\uff90\001" +
    "\002\000\016\003\uffc0\026\uffc0\031\uffc0\073\uffc0\102\uffc0" +
    "\104\uffc0\001\002\000\036\011\164\015\201\017\162\020" +
    "\167\021\166\027\200\037\172\062\161\063\175\064\163" +
    "\066\174\101\165\103\155\105\173\001\002\000\022\017" +
    "\162\020\167\021\166\062\161\063\175\064\163\066\174" +
    "\105\173\001\002\000\040\003\uffac\026\uffac\031\uffac\067" +
    "\uffac\070\uffac\071\uffac\072\uffac\073\uffac\075\uffac\076\uffac" +
    "\077\uffac\100\uffac\102\uffac\104\uffac\106\uffac\001\002\000" +
    "\040\003\uff95\026\uff95\031\uff95\067\uff95\070\uff95\071\uff95" +
    "\072\uff95\073\uff95\075\uff95\076\uff95\077\uff95\100\uff95\102" +
    "\uff95\104\uff95\106\uff95\001\002\000\040\003\uffa9\026\uffa9" +
    "\031\uffa9\067\uffa9\070\uffa9\071\uffa9\072\uffa9\073\uffa9\075" +
    "\uffa9\076\uffa9\077\uffa9\100\uffa9\102\uffa9\104\uffa9\106\uffa9" +
    "\001\002\000\004\064\222\001\002\000\012\062\161\063" +
    "\175\064\163\066\174\001\002\000\040\003\uffa6\026\uffa6" +
    "\031\uffa6\067\216\070\uffa6\071\uffa6\072\uffa6\073\uffa6\075" +
    "\uffa6\076\uffa6\077\uffa6\100\uffa6\102\uffa6\104\uffa6\106\uffa6" +
    "\001\002\000\040\003\uff98\026\uff98\031\uff98\067\uff98\070" +
    "\uff98\071\uff98\072\uff98\073\uff98\075\uff98\076\uff98\077\uff98" +
    "\100\uff98\102\uff98\104\uff98\106\uff98\001\002\000\016\003" +
    "\uffc1\026\uffc1\031\uffc1\073\uffc1\102\uffc1\104\uffc1\001\002" +
    "\000\040\003\uff9d\026\uff9d\031\uff9d\067\207\070\205\071" +
    "\206\072\210\073\uff9d\075\uff9d\076\uff9d\077\uff9d\100\uff9d" +
    "\102\uff9d\104\uff9d\106\uff9d\001\002\000\004\014\203\001" +
    "\002\000\016\003\uffbc\026\uffbc\031\uffbc\073\uffbc\102\uffbc" +
    "\104\uffbc\001\002\000\016\003\uffc2\026\uffc2\031\uffc2\073" +
    "\uffc2\102\uffc2\104\uffc2\001\002\000\004\027\204\001\002" +
    "\000\016\003\uffbd\026\uffbd\031\uffbd\073\uffbd\102\uffbd\104" +
    "\uffbd\001\002\000\012\062\161\063\175\064\163\066\174" +
    "\001\002\000\012\062\161\063\175\064\163\066\174\001" +
    "\002\000\012\062\161\063\175\064\163\066\174\001\002" +
    "\000\012\062\161\063\175\064\163\066\174\001\002\000" +
    "\040\003\uff9a\026\uff9a\031\uff9a\067\uff9a\070\uff9a\071\uff9a" +
    "\072\uff9a\073\uff9a\075\uff9a\076\uff9a\077\uff9a\100\uff9a\102" +
    "\uff9a\104\uff9a\106\uff9a\001\002\000\040\003\uff9c\026\uff9c" +
    "\031\uff9c\067\uff9c\070\uff9c\071\206\072\210\073\uff9c\075" +
    "\uff9c\076\uff9c\077\uff9c\100\uff9c\102\uff9c\104\uff9c\106\uff9c" +
    "\001\002\000\040\003\uff99\026\uff99\031\uff99\067\uff99\070" +
    "\uff99\071\uff99\072\uff99\073\uff99\075\uff99\076\uff99\077\uff99" +
    "\100\uff99\102\uff99\104\uff99\106\uff99\001\002\000\040\003" +
    "\uff9b\026\uff9b\031\uff9b\067\uff9b\070\uff9b\071\206\072\210" +
    "\073\uff9b\075\uff9b\076\uff9b\077\uff9b\100\uff9b\102\uff9b\104" +
    "\uff9b\106\uff9b\001\002\000\040\003\uff96\026\uff96\031\uff96" +
    "\067\uff96\070\uff96\071\uff96\072\uff96\073\uff96\075\uff96\076" +
    "\uff96\077\uff96\100\uff96\102\uff96\104\uff96\106\uff96\001\002" +
    "\000\022\017\162\020\167\021\166\062\161\063\175\064" +
    "\163\066\174\105\173\001\002\000\040\003\uffa7\026\uffa7" +
    "\031\uffa7\067\uffa7\070\uffa7\071\uffa7\072\uffa7\073\uffa7\075" +
    "\uffa7\076\uffa7\077\uffa7\100\uffa7\102\uffa7\104\uffa7\106\uffa7" +
    "\001\002\000\004\106\221\001\002\000\040\003\uffa8\026" +
    "\uffa8\031\uffa8\067\uffa8\070\uffa8\071\uffa8\072\uffa8\073\uffa8" +
    "\075\uffa8\076\uffa8\077\uffa8\100\uffa8\102\uffa8\104\uffa8\106" +
    "\uffa8\001\002\000\004\101\223\001\002\000\040\011\164" +
    "\015\201\017\162\020\167\021\166\027\200\037\172\062" +
    "\161\063\175\064\163\066\174\101\165\102\227\103\155" +
    "\105\173\001\002\000\004\102\233\001\002\000\006\031" +
    "\230\102\uffb7\001\002\000\016\003\uffbe\026\uffbe\031\uffbe" +
    "\073\uffbe\102\uffbe\104\uffbe\001\002\000\016\003\uffba\026" +
    "\uffba\031\uffba\073\uffba\102\uffba\104\uffba\001\002\000\036" +
    "\011\164\015\201\017\162\020\167\021\166\027\200\037" +
    "\172\062\161\063\175\064\163\066\174\101\165\103\155" +
    "\105\173\001\002\000\004\102\uffb9\001\002\000\004\102" +
    "\uffb8\001\002\000\016\003\uffbb\026\uffbb\031\uffbb\073\uffbb" +
    "\102\uffbb\104\uffbb\001\002\000\040\003\uffaa\026\uffaa\031" +
    "\uffaa\067\uffaa\070\uffaa\071\uffaa\072\uffaa\073\235\075\236" +
    "\076\241\077\240\100\237\102\uffaa\104\uffaa\106\uffaa\001" +
    "\002\000\004\073\255\001\002\000\024\017\162\020\167" +
    "\021\166\062\161\063\175\064\163\066\174\073\244\105" +
    "\173\001\002\000\024\017\uffa2\020\uffa2\021\uffa2\062\uffa2" +
    "\063\uffa2\064\uffa2\066\uffa2\100\252\105\uffa2\001\002\000" +
    "\024\017\uffa4\020\uffa4\021\uffa4\062\uffa4\063\uffa4\064\uffa4" +
    "\066\uffa4\077\247\105\uffa4\001\002\000\024\017\162\020" +
    "\167\021\166\062\161\063\175\064\163\066\174\073\244" +
    "\105\173\001\002\000\040\003\uffb0\026\uffb0\031\uffb0\067" +
    "\uffb0\070\uffb0\071\uffb0\072\uffb0\073\uffb0\075\uffb0\076\uffb0" +
    "\077\uffb0\100\uffb0\102\uffb0\104\uffb0\106\uffb0\001\002\000" +
    "\040\003\uff9f\026\uff9f\031\uff9f\067\uff9f\070\uff9f\071\uff9f" +
    "\072\uff9f\073\235\075\236\076\241\077\240\100\237\102" +
    "\uff9f\104\uff9f\106\uff9f\001\002\000\022\017\162\020\167" +
    "\021\166\062\161\063\175\064\163\066\174\105\173\001" +
    "\002\000\040\003\uff9e\026\uff9e\031\uff9e\067\uff9e\070\uff9e" +
    "\071\uff9e\072\uff9e\073\uff9e\075\uff9e\076\uff9e\077\uff9e\100" +
    "\uff9e\102\uff9e\104\uff9e\106\uff9e\001\002\000\022\017\162" +
    "\020\167\021\166\062\161\063\175\064\163\066\174\105" +
    "\173\001\002\000\022\017\uffa5\020\uffa5\021\uffa5\062\uffa5" +
    "\063\uffa5\064\uffa5\066\uffa5\105\uffa5\001\002\000\040\003" +
    "\uffae\026\uffae\031\uffae\067\uffae\070\uffae\071\uffae\072\uffae" +
    "\073\235\075\236\076\241\077\uffae\100\237\102\uffae\104" +
    "\uffae\106\uffae\001\002\000\022\017\162\020\167\021\166" +
    "\062\161\063\175\064\163\066\174\105\173\001\002\000" +
    "\022\017\uffa3\020\uffa3\021\uffa3\062\uffa3\063\uffa3\064\uffa3" +
    "\066\uffa3\105\uffa3\001\002\000\040\003\uffad\026\uffad\031" +
    "\uffad\067\uffad\070\uffad\071\uffad\072\uffad\073\uffad\075\uffad" +
    "\076\uffad\077\uffad\100\uffad\102\uffad\104\uffad\106\uffad\001" +
    "\002\000\040\003\uffaf\026\uffaf\031\uffaf\067\uffaf\070\uffaf" +
    "\071\uffaf\072\uffaf\073\uffaf\075\uffaf\076\uffaf\077\uffaf\100" +
    "\uffaf\102\uffaf\104\uffaf\106\uffaf\001\002\000\022\017\162" +
    "\020\167\021\166\062\161\063\175\064\163\066\174\105" +
    "\173\001\002\000\040\003\uffb1\026\uffb1\031\uffb1\067\uffb1" +
    "\070\uffb1\071\uffb1\072\uffb1\073\uffb1\075\uffb1\076\uffb1\077" +
    "\uffb1\100\uffb1\102\uffb1\104\uffb1\106\uffb1\001\002\000\004" +
    "\102\260\001\002\000\016\003\uffc4\026\uffc4\031\uffc4\073" +
    "\uffc4\102\uffc4\104\uffc4\001\002\000\012\062\161\063\175" +
    "\064\163\066\174\001\002\000\036\011\164\015\201\017" +
    "\162\020\167\021\166\027\200\037\172\062\161\063\175" +
    "\064\163\066\174\101\165\103\155\105\173\001\002\000" +
    "\004\064\266\001\002\000\040\003\uff94\026\uff94\031\uff94" +
    "\067\uff94\070\uff94\071\uff94\072\uff94\073\uff94\075\uff94\076" +
    "\uff94\077\uff94\100\uff94\102\uff94\104\uff94\106\uff94\001\002" +
    "\000\040\003\uff93\026\uff93\031\uff93\067\uff93\070\uff93\071" +
    "\uff93\072\uff93\073\uff93\075\uff93\076\uff93\077\uff93\100\uff93" +
    "\102\uff93\104\uff93\106\uff93\001\002\000\046\003\uff90\025" +
    "\263\026\uff90\031\uff90\067\uff90\070\uff90\071\uff90\072\uff90" +
    "\073\uff90\075\uff90\076\uff90\077\uff90\100\uff90\101\267\102" +
    "\uff90\104\uff90\105\261\106\uff90\001\002\000\040\011\164" +
    "\015\201\017\162\020\167\021\166\027\200\037\172\062" +
    "\161\063\175\064\163\066\174\101\165\102\273\103\155" +
    "\105\173\001\002\000\040\003\uff8e\026\uff8e\031\uff8e\067" +
    "\uff8e\070\uff8e\071\uff8e\072\uff8e\073\uff8e\075\uff8e\076\uff8e" +
    "\077\uff8e\100\uff8e\102\uff8e\104\uff8e\106\uff8e\001\002\000" +
    "\040\003\uff8f\026\uff8f\031\uff8f\067\uff8f\070\uff8f\071\uff8f" +
    "\072\uff8f\073\uff8f\075\uff8f\076\uff8f\077\uff8f\100\uff8f\102" +
    "\uff8f\104\uff8f\106\uff8f\001\002\000\004\102\274\001\002" +
    "\000\040\003\uff8d\026\uff8d\031\uff8d\067\uff8d\070\uff8d\071" +
    "\uff8d\072\uff8d\073\uff8d\075\uff8d\076\uff8d\077\uff8d\100\uff8d" +
    "\102\uff8d\104\uff8d\106\uff8d\001\002\000\040\003\uff91\026" +
    "\uff91\031\uff91\067\uff91\070\uff91\071\uff91\072\uff91\073\uff91" +
    "\075\uff91\076\uff91\077\uff91\100\uff91\102\uff91\104\uff91\106" +
    "\uff91\001\002\000\004\106\276\001\002\000\046\003\uff90" +
    "\025\263\026\uff90\031\uff90\067\uff90\070\uff90\071\uff90\072" +
    "\uff90\073\uff90\075\uff90\076\uff90\077\uff90\100\uff90\101\262" +
    "\102\uff90\104\uff90\105\261\106\uff90\001\002\000\040\003" +
    "\uff92\026\uff92\031\uff92\067\uff92\070\uff92\071\uff92\072\uff92" +
    "\073\uff92\075\uff92\076\uff92\077\uff92\100\uff92\102\uff92\104" +
    "\uff92\106\uff92\001\002\000\006\031\303\104\uffb3\001\002" +
    "\000\016\003\uffbf\026\uffbf\031\uffbf\073\uffbf\102\uffbf\104" +
    "\uffbf\001\002\000\016\003\uffb5\026\uffb5\031\uffb5\073\uffb5" +
    "\102\uffb5\104\uffb5\001\002\000\036\011\164\015\201\017" +
    "\162\020\167\021\166\027\200\037\172\062\161\063\175" +
    "\064\163\066\174\101\165\103\155\105\173\001\002\000" +
    "\004\104\305\001\002\000\016\003\uffb6\026\uffb6\031\uffb6" +
    "\073\uffb6\102\uffb6\104\uffb6\001\002\000\006\031\303\104" +
    "\uffb3\001\002\000\004\104\uffb4\001\002\000\012\003\uff64" +
    "\026\uff64\073\uff64\102\uff64\001\002\000\016\003\uff6d\025" +
    "\145\026\uff6d\073\uff6d\101\312\102\uff6d\001\002\000\040" +
    "\011\164\015\201\017\162\020\167\021\166\027\200\037" +
    "\172\062\161\063\175\064\163\066\174\101\165\102\317" +
    "\103\155\105\173\001\002\000\012\003\uff6e\026\uff6e\073" +
    "\uff6e\102\uff6e\001\002\000\012\003\uff6b\026\uff6b\073\uff6b" +
    "\102\uff6b\001\002\000\004\102\320\001\002\000\012\003" +
    "\uff6c\026\uff6c\073\uff6c\102\uff6c\001\002\000\012\003\uff69" +
    "\026\uff69\073\uff69\102\uff69\001\002\000\012\003\uff6a\026" +
    "\uff6a\073\uff6a\102\uff6a\001\002\000\004\106\322\001\002" +
    "\000\014\003\uff6d\025\145\026\uff6d\073\uff6d\102\uff6d\001" +
    "\002\000\012\003\uff63\026\uff63\073\uff63\102\uff63\001\002" +
    "\000\012\003\uff61\026\uff61\073\uff61\102\uff61\001\002\000" +
    "\036\011\164\015\201\017\162\020\167\021\166\027\200" +
    "\037\172\062\161\063\175\064\163\066\174\101\165\103" +
    "\155\105\173\001\002\000\012\003\uff66\026\uff66\073\uff66" +
    "\102\uff66\001\002\000\012\003\uff62\026\uff62\073\uff62\102" +
    "\uff62\001\002\000\006\003\060\026\063\001\002\000\054" +
    "\003\uff5e\004\uff5e\005\uff5e\006\uff5e\007\uff5e\010\uff5e\012" +
    "\uff5e\013\uff5e\016\uff5e\026\uff5e\043\uff5e\044\uff5e\045\uff5e" +
    "\046\uff5e\053\uff5e\054\uff5e\060\uff5e\064\uff5e\065\uff5e\073" +
    "\uff5e\104\uff5e\001\002\000\004\103\u010d\001\002\000\004" +
    "\101\371\001\002\000\004\101\363\001\002\000\004\101" +
    "\337\001\002\000\046\004\uff7b\005\uff7b\006\uff7b\007\uff7b" +
    "\010\uff7b\012\uff7b\013\uff7b\016\uff7b\043\uff7b\044\uff7b\045" +
    "\uff7b\046\uff7b\053\uff7b\054\uff7b\060\uff7b\064\uff7b\065\uff7b" +
    "\104\uff7b\001\002\000\022\017\162\020\167\021\166\062" +
    "\161\063\175\064\163\066\174\105\173\001\002\000\004" +
    "\102\341\001\002\000\004\103\342\001\002\000\046\004" +
    "\045\005\061\006\043\007\040\010\054\012\071\013\044" +
    "\016\051\043\uff7c\044\uff7c\045\uff7c\046\uff7c\053\124\054" +
    "\117\060\127\064\121\065\052\104\uff7e\001\002\000\004" +
    "\104\344\001\002\000\050\004\uff49\005\uff49\006\uff49\007" +
    "\uff49\010\uff49\012\uff49\013\uff49\016\uff49\043\uff49\044\uff49" +
    "\045\uff49\046\uff49\047\345\053\uff49\054\uff49\060\uff49\064" +
    "\uff49\065\uff49\104\uff49\001\002\000\006\046\351\103\347" +
    "\001\002\000\046\004\uff5a\005\uff5a\006\uff5a\007\uff5a\010" +
    "\uff5a\012\uff5a\013\uff5a\016\uff5a\043\uff5a\044\uff5a\045\uff5a" +
    "\046\uff5a\053\uff5a\054\uff5a\060\uff5a\064\uff5a\065\uff5a\104" +
    "\uff5a\001\002\000\046\004\045\005\061\006\043\007\040" +
    "\010\054\012\071\013\044\016\051\043\uff7c\044\uff7c\045" +
    "\uff7c\046\uff7c\053\124\054\117\060\127\064\121\065\052" +
    "\104\uff7e\001\002\000\046\004\uff4a\005\uff4a\006\uff4a\007" +
    "\uff4a\010\uff4a\012\uff4a\013\uff4a\016\uff4a\043\uff4a\044\uff4a" +
    "\045\uff4a\046\uff4a\053\uff4a\054\uff4a\060\uff4a\064\uff4a\065" +
    "\uff4a\104\uff4a\001\002\000\004\101\352\001\002\000\022" +
    "\017\162\020\167\021\166\062\161\063\175\064\163\066" +
    "\174\105\173\001\002\000\004\102\354\001\002\000\004" +
    "\103\355\001\002\000\046\004\045\005\061\006\043\007" +
    "\040\010\054\012\071\013\044\016\051\043\uff7c\044\uff7c" +
    "\045\uff7c\046\uff7c\053\124\054\117\060\127\064\121\065" +
    "\052\104\uff7e\001\002\000\004\104\357\001\002\000\050" +
    "\004\uff49\005\uff49\006\uff49\007\uff49\010\uff49\012\uff49\013" +
    "\uff49\016\uff49\043\uff49\044\uff49\045\uff49\046\uff49\047\345" +
    "\053\uff49\054\uff49\060\uff49\064\uff49\065\uff49\104\uff49\001" +
    "\002\000\046\004\uff47\005\uff47\006\uff47\007\uff47\010\uff47" +
    "\012\uff47\013\uff47\016\uff47\043\uff47\044\uff47\045\uff47\046" +
    "\uff47\053\uff47\054\uff47\060\uff47\064\uff47\065\uff47\104\uff47" +
    "\001\002\000\004\104\362\001\002\000\046\004\uff48\005" +
    "\uff48\006\uff48\007\uff48\010\uff48\012\uff48\013\uff48\016\uff48" +
    "\043\uff48\044\uff48\045\uff48\046\uff48\053\uff48\054\uff48\060" +
    "\uff48\064\uff48\065\uff48\104\uff48\001\002\000\022\017\162" +
    "\020\167\021\166\062\161\063\175\064\163\066\174\105" +
    "\173\001\002\000\004\102\365\001\002\000\004\103\366" +
    "\001\002\000\046\004\045\005\061\006\043\007\040\010" +
    "\054\012\071\013\044\016\051\043\uff7c\044\uff7c\045\uff7c" +
    "\046\uff7c\053\124\054\117\060\127\064\121\065\052\104" +
    "\uff7e\001\002\000\004\104\370\001\002\000\046\004\uff5c" +
    "\005\uff5c\006\uff5c\007\uff5c\010\uff5c\012\uff5c\013\uff5c\016" +
    "\uff5c\043\uff5c\044\uff5c\045\uff5c\046\uff5c\053\uff5c\054\uff5c" +
    "\060\uff5c\064\uff5c\065\uff5c\104\uff5c\001\002\000\024\004" +
    "\045\005\061\006\043\007\040\010\054\012\071\013\044" +
    "\016\051\065\052\001\002\000\024\017\uff50\020\uff50\021" +
    "\uff50\062\uff50\063\uff50\064\uff50\066\uff50\102\uff50\105\uff50" +
    "\001\002\000\024\017\uff54\020\uff54\021\uff54\062\uff54\063" +
    "\uff54\064\uff54\066\uff54\102\uff54\105\uff54\001\002\000\024" +
    "\017\uff51\020\uff51\021\uff51\062\uff51\063\uff51\064\uff51\066" +
    "\uff51\102\uff51\105\uff51\001\002\000\024\017\uff4f\020\uff4f" +
    "\021\uff4f\062\uff4f\063\uff4f\064\uff4f\066\uff4f\102\uff4f\105" +
    "\uff4f\001\002\000\024\017\uff53\020\uff53\021\uff53\062\uff53" +
    "\063\uff53\064\uff53\066\uff53\102\uff53\105\uff53\001\002\000" +
    "\024\017\uff52\020\uff52\021\uff52\062\uff52\063\uff52\064\uff52" +
    "\066\uff52\102\uff52\105\uff52\001\002\000\024\017\162\020" +
    "\167\021\166\062\161\063\175\064\163\066\174\102\u0102" +
    "\105\173\001\002\000\006\003\060\026\063\001\002\000" +
    "\004\103\u0104\001\002\000\046\004\uff59\005\uff59\006\uff59" +
    "\007\uff59\010\uff59\012\uff59\013\uff59\016\uff59\043\uff59\044" +
    "\uff59\045\uff59\046\uff59\053\uff59\054\uff59\060\uff59\064\uff59" +
    "\065\uff59\104\uff59\001\002\000\046\004\045\005\061\006" +
    "\043\007\040\010\054\012\071\013\044\016\051\043\uff7c" +
    "\044\uff7c\045\uff7c\046\uff7c\053\124\054\117\060\127\064" +
    "\121\065\052\104\uff7e\001\002\000\004\104\u0106\001\002" +
    "\000\046\004\uff58\005\uff58\006\uff58\007\uff58\010\uff58\012" +
    "\uff58\013\uff58\016\uff58\043\uff58\044\uff58\045\uff58\046\uff58" +
    "\053\uff58\054\uff58\060\uff58\064\uff58\065\uff58\104\uff58\001" +
    "\002\000\004\064\121\001\002\000\004\102\u0109\001\002" +
    "\000\004\103\u010a\001\002\000\046\004\045\005\061\006" +
    "\043\007\040\010\054\012\071\013\044\016\051\043\uff7c" +
    "\044\uff7c\045\uff7c\046\uff7c\053\124\054\117\060\127\064" +
    "\121\065\052\104\uff7e\001\002\000\004\104\u010c\001\002" +
    "\000\046\004\uff57\005\uff57\006\uff57\007\uff57\010\uff57\012" +
    "\uff57\013\uff57\016\uff57\043\uff57\044\uff57\045\uff57\046\uff57" +
    "\053\uff57\054\uff57\060\uff57\064\uff57\065\uff57\104\uff57\001" +
    "\002\000\046\004\045\005\061\006\043\007\040\010\054" +
    "\012\071\013\044\016\051\043\uff7c\044\uff7c\045\uff7c\046" +
    "\uff7c\053\124\054\117\060\127\064\121\065\052\104\uff7e" +
    "\001\002\000\004\104\u010f\001\002\000\004\044\u0110\001" +
    "\002\000\004\101\u0111\001\002\000\022\017\162\020\167" +
    "\021\166\062\161\063\175\064\163\066\174\105\173\001" +
    "\002\000\004\102\u0113\001\002\000\006\003\060\026\063" +
    "\001\002\000\046\004\uff5b\005\uff5b\006\uff5b\007\uff5b\010" +
    "\uff5b\012\uff5b\013\uff5b\016\uff5b\043\uff5b\044\uff5b\045\uff5b" +
    "\046\uff5b\053\uff5b\054\uff5b\060\uff5b\064\uff5b\065\uff5b\104" +
    "\uff5b\001\002\000\004\104\uffdb\001\002\000\004\104\uffdd" +
    "\001\002\000\004\101\u0118\001\002\000\030\004\045\005" +
    "\061\006\043\007\040\010\054\012\071\013\044\016\051" +
    "\064\102\065\052\102\uff82\001\002\000\004\102\u011a\001" +
    "\002\000\004\103\u011b\001\002\000\046\004\uff86\005\uff86" +
    "\006\uff86\007\uff86\010\uff86\012\uff86\013\uff86\016\uff86\043" +
    "\uff86\044\uff86\045\uff86\046\uff86\053\uff86\054\uff86\060\uff86" +
    "\064\uff86\065\uff86\104\uff86\001\002\000\046\004\045\005" +
    "\061\006\043\007\040\010\054\012\071\013\044\016\051" +
    "\043\uff7c\044\uff7c\045\uff7c\046\uff7c\053\124\054\117\060" +
    "\127\064\121\065\052\104\uff7e\001\002\000\004\104\uff85" +
    "\001\002\000\004\104\u011f\001\002\000\054\003\uff84\004" +
    "\uff84\005\uff84\006\uff84\007\uff84\010\uff84\012\uff84\013\uff84" +
    "\016\uff84\026\uff84\040\uff84\055\uff84\056\uff84\057\uff84\060" +
    "\uff84\061\uff84\064\uff84\065\uff84\073\uff84\101\uff84\104\uff84" +
    "\001\002\000\040\003\uffcb\017\uffcb\020\uffcb\021\uffcb\026" +
    "\uffcb\031\uffcb\040\uffcb\062\uffcb\063\uffcb\064\uffcb\066\uffcb" +
    "\073\uffcb\101\uffcb\102\uffcb\105\uffcb\001\002\000\004\102" +
    "\u0122\001\002\000\004\103\u0123\001\002\000\046\004\uff8c" +
    "\005\uff8c\006\uff8c\007\uff8c\010\uff8c\012\uff8c\013\uff8c\016" +
    "\uff8c\043\uff8c\044\uff8c\045\uff8c\046\uff8c\053\uff8c\054\uff8c" +
    "\060\uff8c\064\uff8c\065\uff8c\104\uff8c\001\002\000\046\004" +
    "\045\005\061\006\043\007\040\010\054\012\071\013\044" +
    "\016\051\043\uff7c\044\uff7c\045\uff7c\046\uff7c\053\124\054" +
    "\117\060\127\064\121\065\052\104\uff7e\001\002\000\004" +
    "\104\uff8b\001\002\000\004\104\u0127\001\002\000\054\003" +
    "\uff8a\004\uff8a\005\uff8a\006\uff8a\007\uff8a\010\uff8a\012\uff8a" +
    "\013\uff8a\016\uff8a\026\uff8a\040\uff8a\055\uff8a\056\uff8a\057" +
    "\uff8a\060\uff8a\061\uff8a\064\uff8a\065\uff8a\073\uff8a\101\uff8a" +
    "\104\uff8a\001\002\000\040\003\uffd2\017\uffd2\020\uffd2\021" +
    "\uffd2\026\uffd2\031\uffd2\040\uffd2\062\uffd2\063\uffd2\064\uffd2" +
    "\066\uffd2\073\uffd2\101\uffd2\102\uffd2\105\uffd2\001\002\000" +
    "\040\003\uffce\017\uffce\020\uffce\021\uffce\026\uffce\031\uffce" +
    "\040\uffce\062\uffce\063\uffce\064\uffce\066\uffce\073\uffce\101" +
    "\uffce\102\uffce\105\uffce\001\002\000\040\003\uffcf\017\uffcf" +
    "\020\uffcf\021\uffcf\026\uffcf\031\uffcf\040\uffcf\062\uffcf\063" +
    "\uffcf\064\uffcf\066\uffcf\073\uffcf\101\uffcf\102\uffcf\105\uffcf" +
    "\001\002\000\040\003\uffcc\017\uffcc\020\uffcc\021\uffcc\026" +
    "\uffcc\031\uffcc\040\uffcc\062\uffcc\063\uffcc\064\uffcc\066\uffcc" +
    "\073\uffcc\101\uffcc\102\uffcc\105\uffcc\001\002\000\040\003" +
    "\uffd0\017\uffd0\020\uffd0\021\uffd0\026\uffd0\031\uffd0\040\uffd0" +
    "\062\uffd0\063\uffd0\064\uffd0\066\uffd0\073\uffd0\101\uffd0\102" +
    "\uffd0\105\uffd0\001\002\000\040\003\uffca\017\uffca\020\uffca" +
    "\021\uffca\026\uffca\031\uffca\040\uffca\062\uffca\063\uffca\064" +
    "\uffca\066\uffca\073\uffca\101\uffca\102\uffca\105\uffca\001\002" +
    "\000\006\003\060\026\063\001\002\000\070\003\uffc6\004" +
    "\uffc6\005\uffc6\006\uffc6\007\uffc6\010\uffc6\012\uffc6\013\uffc6" +
    "\016\uffc6\026\uffc6\040\uffc6\043\uffc6\044\uffc6\045\uffc6\046" +
    "\uffc6\053\uffc6\054\uffc6\055\uffc6\056\uffc6\057\uffc6\060\uffc6" +
    "\061\uffc6\064\uffc6\065\uffc6\073\uffc6\101\uffc6\104\uffc6\001" +
    "\002\000\040\003\uffc9\017\uffc9\020\uffc9\021\uffc9\026\uffc9" +
    "\031\uffc9\040\uffc9\062\uffc9\063\uffc9\064\uffc9\066\uffc9\073" +
    "\uffc9\101\uffc9\102\uffc9\105\uffc9\001\002\000\004\104\uffda" +
    "\001\002\000\004\032\ufff0\001\002\000\004\032\ufff2\001" +
    "\002\000\004\032\ufff1\001\002\000\004\032\uffee\001\002" +
    "\000\050\003\uffec\004\uffec\005\uffec\006\uffec\007\uffec\010" +
    "\uffec\012\uffec\013\uffec\016\uffec\026\uffec\032\uffec\040\uffec" +
    "\055\uffec\056\uffec\057\uffec\064\uffec\065\uffec\073\uffec\101" +
    "\uffec\001\002\000\050\003\uffea\004\uffea\005\uffea\006\uffea" +
    "\007\uffea\010\uffea\012\uffea\013\uffea\016\uffea\026\uffea\032" +
    "\uffea\040\uffea\055\uffea\056\uffea\057\uffea\064\uffea\065\uffea" +
    "\073\uffea\101\uffea\001\002\000\004\002\001\001\002\000" +
    "\010\003\060\025\u013a\026\063\001\002\000\004\064\u013e" +
    "\001\002\000\016\024\004\055\ufffa\056\ufffa\057\ufffa\060" +
    "\ufffa\061\ufffa\001\002\000\016\024\ufffc\055\ufffc\056\ufffc" +
    "\057\ufffc\060\ufffc\061\ufffc\001\002\000\014\055\uffff\056" +
    "\uffff\057\uffff\060\uffff\061\uffff\001\002\000\010\003\060" +
    "\025\u013a\026\063\001\002\000\016\024\ufffd\055\ufffd\056" +
    "\ufffd\057\ufffd\060\ufffd\061\ufffd\001\002\000\010\003\060" +
    "\025\u0141\026\063\001\002\000\006\064\u0145\071\u0146\001" +
    "\002\000\016\024\004\055\ufffa\056\ufffa\057\ufffa\060\ufffa" +
    "\061\ufffa\001\002\000\016\024\ufff8\055\ufff8\056\ufff8\057" +
    "\ufff8\060\ufff8\061\ufff8\001\002\000\014\055\ufffb\056\ufffb" +
    "\057\ufffb\060\ufffb\061\ufffb\001\002\000\010\003\060\025" +
    "\u0141\026\063\001\002\000\006\003\060\026\063\001\002" +
    "\000\016\024\ufff9\055\ufff9\056\ufff9\057\ufff9\060\ufff9\061" +
    "\ufff9\001\002\000\016\024\ufff7\055\ufff7\056\ufff7\057\ufff7" +
    "\060\ufff7\061\ufff7\001\002\000\016\024\ufff6\055\ufff6\056" +
    "\ufff6\057\ufff6\060\ufff6\061\ufff6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0147\000\010\002\006\005\007\006\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\015\017\017\013\020\015\021\016\001" +
    "\001\000\002\001\001\000\004\054\u0135\001\001\000\002" +
    "\001\001\000\006\014\u0133\020\u0134\001\001\000\002\001" +
    "\001\000\006\013\u0132\017\u0131\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\055\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\016\027\017\030\020\032\025\026\045\031\001" +
    "\001\000\034\007\055\022\040\023\054\024\064\030\066" +
    "\031\036\032\045\033\063\034\052\037\067\040\046\043" +
    "\061\050\035\001\001\000\002\001\001\000\006\020\032" +
    "\045\033\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\016\u0130\017\030" +
    "\020\032\025\026\045\031\001\001\000\002\001\001\000" +
    "\004\053\u012f\001\001\000\002\001\001\000\022\003\176" +
    "\004\170\027\175\042\u012d\046\156\047\201\074\167\113" +
    "\155\001\001\000\004\053\u012c\001\001\000\004\053\u012b" +
    "\001\001\000\004\053\u012a\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\053\106\001\001\000\004\053\u0129" +
    "\001\001\000\004\053\u0128\001\001\000\002\001\001\000" +
    "\004\053\u0127\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\030\066\031\036\032\045\033\063\034\052\037" +
    "\067\040\046\043\102\051\u0120\001\001\000\002\001\001" +
    "\000\004\053\u011f\001\001\000\012\007\055\023\u0115\024" +
    "\064\050\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\016\u0114\017\030\020\032\025\026\045\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\053\072\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\053\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\030\066\031\036\032" +
    "\045\033\063\034\052\037\067\040\046\043\102\051\100" +
    "\001\001\000\002\001\001\000\004\053\106\001\001\000" +
    "\004\052\104\001\001\000\024\030\066\031\036\032\045" +
    "\033\063\034\052\037\067\040\046\043\102\051\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\120\111\001\001\000\036\030" +
    "\132\031\112\032\114\033\131\034\122\037\133\062\130" +
    "\063\124\064\127\070\113\072\121\076\125\100\117\124" +
    "\115\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\077\335\001\001\000\022\003\176\004" +
    "\170\027\175\042\327\046\156\047\201\074\167\113\155" +
    "\001\001\000\002\001\001\000\006\066\150\103\147\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\141" +
    "\001\001\000\036\030\132\031\112\032\114\033\131\034" +
    "\122\037\133\062\130\063\124\064\140\070\113\072\121" +
    "\076\125\100\117\124\115\001\001\000\006\007\055\024" +
    "\137\001\001\000\020\030\132\031\112\032\114\033\131" +
    "\034\122\037\133\072\136\001\001\000\004\121\134\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\101\325\001\001\000\010\003\176\004" +
    "\320\074\167\001\001\000\002\001\001\000\022\003\176" +
    "\004\170\027\175\042\307\046\156\047\201\074\167\113" +
    "\155\001\001\000\004\102\151\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\003\176\004" +
    "\170\027\175\042\157\046\156\047\201\074\167\113\155" +
    "\001\001\000\002\001\001\000\024\003\176\004\170\027" +
    "\175\042\277\046\156\047\201\060\300\074\167\113\155" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\061\263" +
    "\001\001\000\002\001\001\000\022\003\176\004\170\027" +
    "\175\042\256\046\156\047\201\074\167\113\155\001\001" +
    "\000\012\003\176\004\170\074\167\113\233\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\003\176\004\217\074\167\001\001\000" +
    "\004\115\214\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\213\074\167\001\001\000\006\003\212\074\167\001" +
    "\001\000\006\003\211\074\167\001\001\000\006\003\210" +
    "\074\167\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\176\004\170\047\216\074\167\113\155\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\003\176\004\170\027\175\041\223\042" +
    "\224\046\156\047\201\057\225\074\167\113\155\001\001" +
    "\000\002\001\001\000\004\044\230\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\003\176\004\170\027\175" +
    "\041\231\042\224\046\156\047\201\074\167\113\155\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\003\176\004" +
    "\170\074\167\113\242\114\253\001\001\000\004\036\250" +
    "\001\001\000\004\035\245\001\001\000\014\003\176\004" +
    "\170\074\167\113\242\114\241\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\003\176\004\170\074\167\113" +
    "\244\001\001\000\002\001\001\000\012\003\176\004\170" +
    "\074\167\113\247\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\003\176\004\170\074\167\113\252\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\003\176\004\170\074\167\113\255\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\003" +
    "\176\004\274\074\167\001\001\000\024\003\176\004\170" +
    "\027\175\041\271\042\224\046\156\047\201\074\167\113" +
    "\155\001\001\000\004\056\264\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\061\267\075\270\001\001\000" +
    "\024\003\176\004\170\027\175\041\271\042\224\046\156" +
    "\047\201\074\167\113\155\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\061\276\001\001\000" +
    "\002\001\001\000\004\065\303\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\003\176\004\170\027\175\042" +
    "\305\046\156\047\201\074\167\113\155\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\065\306\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\066\313\071\312" +
    "\001\001\000\024\003\176\004\170\027\175\042\314\046" +
    "\156\047\201\073\315\074\167\113\155\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\066\322\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\003\176\004\170\027\175\042\326\046\156" +
    "\047\201\074\167\113\155\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\330\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\176\004\170" +
    "\047\337\074\167\113\155\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\030\132\031\112\032\114\033\131" +
    "\034\122\037\133\062\130\063\124\064\342\070\113\072" +
    "\121\076\125\100\117\124\115\001\001\000\002\001\001" +
    "\000\004\111\345\001\001\000\004\112\347\001\001\000" +
    "\002\001\001\000\036\030\132\031\112\032\114\033\131" +
    "\034\122\037\133\062\130\063\124\064\360\070\113\072" +
    "\121\076\125\100\117\124\115\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\003\176\004\170\047\352\074" +
    "\167\113\155\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\030\132\031\112\032\114\033\131\034\122\037" +
    "\133\062\130\063\124\064\355\070\113\072\121\076\125" +
    "\100\117\124\115\001\001\000\002\001\001\000\004\111" +
    "\357\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\003\176\004\170\047\363\074\167\113" +
    "\155\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\030\132\031\112\032\114\033\131\034\122\037\133\062" +
    "\130\063\124\064\366\070\113\072\121\076\125\100\117" +
    "\124\115\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\030\372\031\374\032\375\033\376\034\373\037\371" +
    "\104\377\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\003\176\004\170\047\u0100\074\167\105" +
    "\u0102\113\155\001\001\000\004\007\u0106\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\030\132\031\112\032" +
    "\114\033\131\034\122\037\133\062\130\063\124\064\u0104" +
    "\070\113\072\121\076\125\100\117\124\115\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\100\u0107\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\030\132\031" +
    "\112\032\114\033\131\034\122\037\133\062\130\063\124" +
    "\064\u010a\070\113\072\121\076\125\100\117\124\115\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\030\132" +
    "\031\112\032\114\033\131\034\122\037\133\062\130\063" +
    "\124\064\u010d\070\113\072\121\076\125\100\117\124\115" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\003\176\004\170\047\u0111\074\167\113\155" +
    "\001\001\000\002\001\001\000\004\007\u0113\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\030\066\031\036\032\045\033\063\034" +
    "\052\037\067\040\046\043\102\051\u0118\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\122\u011b\001\001\000" +
    "\036\030\132\031\112\032\114\033\131\034\122\037\133" +
    "\062\130\063\124\064\u011c\070\113\072\121\076\125\100" +
    "\117\124\115\001\001\000\004\123\u011d\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\116\u0123\001\001\000\036" +
    "\030\132\031\112\032\114\033\131\034\122\037\133\062" +
    "\130\063\124\064\u0124\070\113\072\121\076\125\100\117" +
    "\124\115\001\001\000\004\117\u0125\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\u012e\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\u013b\012\u013a\001\001\000\002\001\001\000\004\006\u013c" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\u013b\012\u013e\001\001\000\002\001\001\000\006\007\u0142" +
    "\010\u0141\001\001\000\004\011\u0146\001\001\000\004\006" +
    "\u0143\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\u0142\010\u0148\001\001\000\004\007\u0147\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        Sintactico(Lexico lexico){
            super(lexico);
        }
        public void syntax_error(Symbol cur_token) {
        System.out.println("El error es el simbolo: " + sym.terminalNames[cur_token.sym]);
        System.out.println(String.format("En la posicion: %d, %d", cur_token.left, cur_token.right));
        }
        /*public void unrecovered_syntax_error(Symbol cur_token) {
            if (cur_token.sym == sym.EOF) {
             System.out.println("public void unrecoveredsyntax_error!!!!!!!!!!!!!!");
            }
        }*/


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= encabezado clase 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // encabezado ::= PACKAGE ID pc importacion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("encabezado",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // encabezado ::= importacion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("encabezado",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // pc ::= PUNTO ID pc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("pc",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // pc ::= p 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("pc",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // importacion ::= IMPORT ID sp importacion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("importacion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // importacion ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("importacion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sp ::= PUNTO spp 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sp",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sp ::= p 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sp",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // spp ::= MULTIPLICACION p 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("spp",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // spp ::= ID sp 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("spp",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // p ::= PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("p",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // p ::= error 
            {
              Object RESULT =null;
		System.out.println("te falto colocar ;");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("p",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // clase ::= v CLASS ID L_APERTURA internoClase L_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("clase",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // v ::= staticCfianl vfactorizadoStatic 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("v",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // v ::= vc vfactorizadoVC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("v",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // vfactorizadoStatic ::= vc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vfactorizadoStatic",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // vfactorizadoStatic ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vfactorizadoStatic",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // vfactorizadoVC ::= staticCfianl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vfactorizadoVC",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // vfactorizadoVC ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vfactorizadoVC",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // staticCfianl ::= STATIC staticFactori 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("staticCfianl",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // staticCfianl ::= FINAL finalFactori 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("staticCfianl",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // staticFactori ::= FINAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("staticFactori",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // staticFactori ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("staticFactori",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // finalFactori ::= STATIC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("finalFactori",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // finalFactori ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("finalFactori",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // vc ::= PUBLIC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vc",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // vc ::= PRIVATE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vc",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // vc ::= PROTECTED 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vc",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // internoClase ::= vGlobal internoClaseFa 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("internoClase",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // internoClase ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("internoClase",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // vGlobal ::= vc vGlobalFac 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vGlobal",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // vGlobal ::= vGlobalFac 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vGlobal",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // vGlobalFac ::= staticCfianl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vGlobalFac",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // vGlobalFac ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vGlobalFac",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // internoClaseFa ::= variableID ayuda 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("internoClaseFa",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // internoClaseFa ::= ayuda 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("internoClaseFa",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ayuda ::= asignacionVariable internoClase 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ayuda",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ayuda ::= metodo internoClase 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ayuda",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // variableID ::= numFloat 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableID",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // variableID ::= numDouble 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableID",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // variableID ::= variableChar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableID",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // variableID ::= variableBoolean 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableID",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // variableID ::= variableStirng 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableID",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // variableID ::= variableObject 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableID",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // variableID ::= numEntero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableID",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // numFloat ::= FLOAT onlyIDArray 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("numFloat",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // numDouble ::= DOUBLE onlyIDArray 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("numDouble",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // variableChar ::= CHAR onlyIDArray 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableChar",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // variableBoolean ::= BOOLEAN onlyIDArray 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableBoolean",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // variableStirng ::= STRING onlyIDArray 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableStirng",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // variableObject ::= ID onlyIDArray 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableObject",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // numEntero ::= BYTE onlyIDArray 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("numEntero",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // numEntero ::= SHORT onlyIDArray 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("numEntero",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // numEntero ::= INT onlyIDArray 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("numEntero",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // numEntero ::= LONG onlyIDArray 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("numEntero",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // onlyIDArray ::= ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("onlyIDArray",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // onlyIDArray ::= C_APERTURA C_CIERRE onlyIDArray 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("onlyIDArray",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // asignacionVariable ::= IGUAL tDatos p 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacionVariable",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // asignacionVariable ::= p 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacionVariable",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // tDatos ::= P_APERTURA tDatos P_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatos",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // tDatos ::= tDataP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatos",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // tDataP ::= operadores 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDataP",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // tDataP ::= vChar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDataP",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // tDataP ::= F 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDataP",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // tDataP ::= L_APERTURA lCon 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDataP",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // tDataP ::= NEW ID P_APERTURA tFact 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDataP",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // vChar ::= SIMPLE_COMILLA CARACTER SIMPLE_COMILLA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vChar",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // vChar ::= CHARTN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vChar",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // tFact ::= dSeguidoF P_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tFact",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // tFact ::= P_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tFact",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // dSeguidoF ::= tDatos objectInst 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dSeguidoF",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // objectInst ::= COMA dSeguidoF 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("objectInst",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // objectInst ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("objectInst",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // lCon ::= tDatos lConFact L_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lCon",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // lCon ::= L_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lCon",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // lConFact ::= COMA tDatos lConFact 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lConFact",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // lConFact ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lConFact",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // operadores ::= operarBoolean 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operadores",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // operarBoolean ::= operarBoolean IGUAL IGUAL operarBoolean 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operarBoolean",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // operarBoolean ::= operarBoolean MAYOR_Q opBooleanIGUALFac 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operarBoolean",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // operarBoolean ::= operarBoolean MENOR_Q opBooleanIGUALFac 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operarBoolean",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // operarBoolean ::= operarBoolean Y dosY operarBoolean 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operarBoolean",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // operarBoolean ::= operarBoolean O dosO operarBoolean 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operarBoolean",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // operarBoolean ::= FALSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operarBoolean",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // operarBoolean ::= TRUE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operarBoolean",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // operarBoolean ::= ADMIRACION operarBoolean 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operarBoolean",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // operarBoolean ::= j 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operarBoolean",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // operarBoolean ::= C_APERTURA j C_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operarBoolean",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // textOperar ::= SUMA operadores 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("textOperar",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // textOperar ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("textOperar",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // dosY ::= Y 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dosY",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // dosY ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dosY",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // dosO ::= O 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dosO",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // dosO ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dosO",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // operarText ::= SUMA operarBoolean 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operarText",53, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // operarText ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operarText",53, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // opBooleanIGUALFac ::= operarBoolean 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("opBooleanIGUALFac",74, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // opBooleanIGUALFac ::= IGUAL operarBoolean 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("opBooleanIGUALFac",74, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // j ::= operaionNumerica 
            {
              String RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("j",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // operaionNumerica ::= operaionNumerica SUMA operaionNumerica 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operaionNumerica",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // operaionNumerica ::= operaionNumerica RESTA operaionNumerica 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operaionNumerica",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // operaionNumerica ::= operaionNumerica DIVISION operaionNumerica 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operaionNumerica",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // operaionNumerica ::= operaionNumerica MULTIPLICACION operaionNumerica 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operaionNumerica",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // operaionNumerica ::= ENTERO 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operaionNumerica",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // operaionNumerica ::= DECIMAL 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operaionNumerica",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // operaionNumerica ::= TEXT textOperar 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operaionNumerica",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // operaionNumerica ::= usarOBJECT 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operaionNumerica",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // usarOBJECT ::= ID idDato 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("usarOBJECT",58, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // idDato ::= PUNTO idDatoFac 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("idDato",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // idDato ::= C_APERTURA j C_CIERRE idDato 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("idDato",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // idDato ::= P_APERTURA dSeguidoF P_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("idDato",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // idDato ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("idDato",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // idDatoFac ::= ID idGet 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("idDatoFac",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // idGet ::= idDato 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("idGet",59, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // idGet ::= P_APERTURA P_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("idGet",59, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // NT$0 ::= 
            {
              Object RESULT =null;
System.out.println("**********************************************************INICIO METODO*************************");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",76, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
System.out.println("****FINAL METODO");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$1",77, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // metodo ::= P_APERTURA pMetodoS P_CIERRE L_APERTURA NT$0 localMetodo NT$1 L_CIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("metodo",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // NT$2 ::= 
            {
              Object RESULT =null;
System.out.println("**********************************************************INICIO METODO*************************");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$2",78, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
System.out.println("****FINAL METODO");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$3",79, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // metodo ::= VOID ID P_APERTURA pMetodoS P_CIERRE L_APERTURA NT$2 localMetodo NT$3 L_CIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("metodo",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // NT$4 ::= 
            {
              Object RESULT =null;
System.out.println("**********************************************************INICIO METODO*************************");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$4",80, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
System.out.println("****FINAL METODO");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$5",81, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // metodo ::= ID P_APERTURA pMetodoS P_CIERRE L_APERTURA NT$4 localMetodo NT$5 L_CIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("metodo",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // pMetodoS ::= variableID pMetodoSP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("pMetodoS",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // pMetodoS ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("pMetodoS",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // pMetodoSP ::= COMA pMetodoS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("pMetodoSP",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // pMetodoSP ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("pMetodoSP",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // localMetodo ::= local localMetodo 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("localMetodo",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // localMetodo ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("localMetodo",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // local ::= variableLocal 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("local",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // NT$6 ::= 
            {
              Object RESULT =null;
System.out.println("************************SENTENCIA DE CONTORL********");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$6",82, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // local ::= NT$6 sentenciaControl 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		System.out.println("************************FINAL SENTENCIA DE CONTORL********");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("local",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // local ::= terminalAccion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("local",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // variableLocal ::= variableLocalFinal asignacionVariable 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableLocal",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // variableLocalFinal ::= FINAL variableIDLocal 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableLocalFinal",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // variableLocalFinal ::= variableIDLocal 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableLocalFinal",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // variableLocalFinal ::= usarVariable 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableLocalFinal",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // variableLocalFinal ::= terminalAccion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableLocalFinal",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // variableIDLocal ::= numFloat 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableIDLocal",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // variableIDLocal ::= numDouble 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableIDLocal",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // variableIDLocal ::= variableChar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableIDLocal",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // variableIDLocal ::= variableBoolean 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableIDLocal",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // variableIDLocal ::= variableStirng 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableIDLocal",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // variableIDLocal ::= numEntero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableIDLocal",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // loclaMetodFacto ::= PUNTO ID variableObjectUsarCrear 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("loclaMetodFacto",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // loclaMetodFacto ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("loclaMetodFacto",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // variableObjectUsarCrear ::= P_APERTURA variableSet 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableObjectUsarCrear",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // variableObjectUsarCrear ::= loclaMetodFacto 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableObjectUsarCrear",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // variableSet ::= tDatos P_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableSet",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // variableSet ::= P_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableSet",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // usarVariable ::= ID usarVariableFacto 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("usarVariable",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // usarVariableFacto ::= SUMA sumarIgual 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("usarVariableFacto",65, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // usarVariableFacto ::= RESTA restarIgual 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("usarVariableFacto",65, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // usarVariableFacto ::= loclaMetodFacto 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("usarVariableFacto",65, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // usarVariableFacto ::= IGUAL tDatos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("usarVariableFacto",65, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // usarVariableFacto ::= C_APERTURA j C_CIERRE loclaMetodFacto 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("usarVariableFacto",65, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // restarIgual ::= IGUAL tDatos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("restarIgual",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // restarIgual ::= RESTA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("restarIgual",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // sumarIgual ::= IGUAL tDatos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sumarIgual",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // sumarIgual ::= SUMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sumarIgual",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // terminalAccion ::= RETURN tDatos p 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("terminalAccion",54, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // terminalAccion ::= BREAK p 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("terminalAccion",54, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // sentenciaControl ::= WHILE P_APERTURA operadores P_CIERRE L_APERTURA localMetodo L_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciaControl",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // sentenciaControl ::= DO L_APERTURA localMetodo L_CIERRE WHILE P_APERTURA operadores P_CIERRE p 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciaControl",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // sentenciaControl ::= IF P_APERTURA operadores P_CIERRE L_APERTURA localMetodo L_CIERRE sentenciaElse 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciaControl",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // sentenciaControl ::= FOR P_APERTURA variableIDFor sentenciaFor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciaControl",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // sentenciaFor ::= P_CIERRE L_APERTURA localMetodo L_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciaFor",67, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // sentenciaFor ::= operadores p usarVariable P_CIERRE L_APERTURA localMetodo L_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciaFor",67, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // inializarVariable ::= variableIDFor asignacionVariable 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("inializarVariable",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // inializarVariable ::= ID forVariableId 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("inializarVariable",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // variableIDFor ::= numFloat 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableIDFor",66, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // variableIDFor ::= numDouble 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableIDFor",66, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // variableIDFor ::= variableChar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableIDFor",66, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // variableIDFor ::= variableBoolean 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableIDFor",66, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // variableIDFor ::= variableStirng 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableIDFor",66, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // variableIDFor ::= numEntero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableIDFor",66, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // forVariableId ::= ID forVariableIdFac 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("forVariableId",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // forVariableId ::= C_APERTURA C_CIERRE forVariableId 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("forVariableId",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // forVariableIdFac ::= DOBLE_PUNTO ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("forVariableIdFac",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // forVariableIdFac ::= asignacionVariable 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("forVariableIdFac",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // sentenciaElse ::= ELSE sentenciaElseFac 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciaElse",71, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // sentenciaElse ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciaElse",71, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // sentenciaElseFac ::= L_APERTURA localMetodo L_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciaElseFac",72, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // sentenciaElseFac ::= IF P_APERTURA operadores P_CIERRE L_APERTURA localMetodo L_CIERRE sentenciaElse 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciaElseFac",72, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
