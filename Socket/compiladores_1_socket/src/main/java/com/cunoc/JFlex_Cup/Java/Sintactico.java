
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.cunoc.JFlex_Cup.Java;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\234\000\002\002\004\000\002\002\004\000\002\062" +
    "\004\000\002\062\002\000\002\061\003\000\002\061\003" +
    "\000\002\070\011\000\002\070\006\000\002\070\013\000" +
    "\002\070\012\000\002\077\004\000\002\077\002\000\002" +
    "\100\005\000\002\100\012\000\002\073\006\000\002\073" +
    "\011\000\002\074\004\000\002\074\004\000\002\072\003" +
    "\000\002\072\003\000\002\072\003\000\002\072\003\000" +
    "\002\072\003\000\002\072\003\000\002\075\004\000\002" +
    "\075\005\000\002\076\004\000\002\076\003\000\002\071" +
    "\005\000\002\071\005\000\002\005\003\000\002\052\005" +
    "\000\002\052\005\000\002\056\004\000\002\056\002\000" +
    "\002\053\004\000\002\004\003\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\004\000\002\006\006\000\002\006\002\000" +
    "\002\007\006\000\002\007\002\000\002\011\004\000\002" +
    "\011\003\000\002\012\004\000\002\012\004\000\002\013" +
    "\005\000\002\013\003\000\002\010\003\000\002\010\003" +
    "\000\002\020\002\000\002\020\004\000\002\020\003\000" +
    "\002\020\003\000\002\020\004\000\002\017\004\000\002" +
    "\017\004\000\002\050\003\000\002\050\002\000\002\051" +
    "\003\000\002\051\002\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\101\002\000\002\102\002\000" +
    "\002\014\012\000\002\015\004\000\002\015\002\000\002" +
    "\021\004\000\002\021\003\000\002\022\004\000\002\022" +
    "\004\000\002\024\004\000\002\024\003\000\002\043\003" +
    "\000\002\043\002\000\002\023\005\000\002\023\003\000" +
    "\002\040\003\000\002\040\003\000\002\040\003\000\002" +
    "\040\003\000\002\040\003\000\002\040\004\000\002\040" +
    "\006\000\002\054\004\000\002\054\003\000\002\037\004" +
    "\000\002\042\004\000\002\042\002\000\002\055\005\000" +
    "\002\055\003\000\002\063\005\000\002\063\002\000\002" +
    "\057\003\000\002\025\003\000\002\026\005\000\002\026" +
    "\003\000\002\027\003\000\002\041\003\000\002\041\003" +
    "\000\002\041\003\000\002\041\003\000\002\041\003\000" +
    "\002\041\003\000\002\041\003\000\002\030\004\000\002" +
    "\032\004\000\002\033\004\000\002\034\004\000\002\035" +
    "\004\000\002\036\004\000\002\031\004\000\002\031\004" +
    "\000\002\031\004\000\002\031\004\000\002\047\003\000" +
    "\002\047\005\000\002\103\002\000\002\104\002\000\002" +
    "\044\012\000\002\105\002\000\002\106\002\000\002\044" +
    "\014\000\002\107\002\000\002\110\002\000\002\044\013" +
    "\000\002\045\004\000\002\045\002\000\002\046\004\000" +
    "\002\046\002\000\002\060\004\000\002\060\004\000\002" +
    "\060\004\000\002\066\003\000\002\066\003\000\002\066" +
    "\003\000\002\066\003\000\002\066\003\000\002\066\003" +
    "\000\002\066\004\000\002\064\005\000\002\064\002\000" +
    "\002\065\004\000\002\065\003\000\002\067\004\000\002" +
    "\067\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0115\000\020\023\004\032\uffd2\055\uffd2\056\uffd2\057" +
    "\uffd2\060\uffd2\061\uffd2\001\002\000\004\064\u0106\001\002" +
    "\000\004\002\u0105\001\002\000\016\032\uffc7\055\013\056" +
    "\007\057\011\060\017\061\010\001\002\000\046\003\uffbc" +
    "\004\uffbc\005\uffbc\006\uffbc\007\uffbc\010\uffbc\012\uffbc\013" +
    "\uffbc\016\uffbc\026\uffbc\032\uffbc\040\uffbc\060\uffbc\061\uffbc" +
    "\064\uffbc\065\uffbc\073\uffbc\101\uffbc\001\002\000\052\003" +
    "\uffbf\004\uffbf\005\uffbf\006\uffbf\007\uffbf\010\uffbf\012\uffbf" +
    "\013\uffbf\016\uffbf\026\uffbf\032\uffbf\040\uffbf\055\uffbf\056" +
    "\uffbf\057\uffbf\060\u0104\064\uffbf\065\uffbf\073\uffbf\101\uffbf" +
    "\001\002\000\046\003\uffba\004\uffba\005\uffba\006\uffba\007" +
    "\uffba\010\uffba\012\uffba\013\uffba\016\uffba\026\uffba\032\uffba" +
    "\040\uffba\060\uffba\061\uffba\064\uffba\065\uffba\073\uffba\101" +
    "\uffba\001\002\000\010\032\uffc4\060\017\061\010\001\002" +
    "\000\046\003\uffbb\004\uffbb\005\uffbb\006\uffbb\007\uffbb\010" +
    "\uffbb\012\uffbb\013\uffbb\016\uffbb\026\uffbb\032\uffbb\040\uffbb" +
    "\060\uffbb\061\uffbb\064\uffbb\065\uffbb\073\uffbb\101\uffbb\001" +
    "\002\000\012\032\uffc5\055\013\056\007\057\011\001\002" +
    "\000\004\032\022\001\002\000\004\002\000\001\002\000" +
    "\052\003\uffbd\004\uffbd\005\uffbd\006\uffbd\007\uffbd\010\uffbd" +
    "\012\uffbd\013\uffbd\016\uffbd\026\uffbd\032\uffbd\040\uffbd\055" +
    "\uffbd\056\uffbd\057\uffbd\061\020\064\uffbd\065\uffbd\073\uffbd" +
    "\101\uffbd\001\002\000\050\003\uffbe\004\uffbe\005\uffbe\006" +
    "\uffbe\007\uffbe\010\uffbe\012\uffbe\013\uffbe\016\uffbe\026\uffbe" +
    "\032\uffbe\040\uffbe\055\uffbe\056\uffbe\057\uffbe\064\uffbe\065" +
    "\uffbe\073\uffbe\101\uffbe\001\002\000\050\003\uffc1\004\uffc1" +
    "\005\uffc1\006\uffc1\007\uffc1\010\uffc1\012\uffc1\013\uffc1\016" +
    "\uffc1\026\uffc1\032\uffc1\040\uffc1\055\uffc1\056\uffc1\057\uffc1" +
    "\064\uffc1\065\uffc1\073\uffc1\101\uffc1\001\002\000\004\064" +
    "\023\001\002\000\004\103\024\001\002\000\054\003\uffb9" +
    "\004\uffb9\005\uffb9\006\uffb9\007\uffb9\010\uffb9\012\uffb9\013" +
    "\uffb9\016\uffb9\026\uffb9\040\uffb9\055\uffb9\056\uffb9\057\uffb9" +
    "\060\uffb9\061\uffb9\064\uffb9\065\uffb9\073\uffb9\101\uffb9\104" +
    "\uffb9\001\002\000\054\003\uffad\004\uffad\005\uffad\006\uffad" +
    "\007\uffad\010\uffad\012\uffad\013\uffad\016\uffad\026\uffad\040" +
    "\uffad\055\013\056\007\057\011\060\017\061\010\064\uffad" +
    "\065\uffad\073\uffad\101\uffad\104\uffb5\001\002\000\040\003" +
    "\060\004\044\005\061\006\042\007\040\010\054\012\071" +
    "\013\045\016\051\026\063\040\066\064\050\065\052\073" +
    "\043\101\057\001\002\000\004\104\uffb8\001\002\000\044" +
    "\003\uffad\004\uffad\005\uffad\006\uffad\007\uffad\010\uffad\012" +
    "\uffad\013\uffad\016\uffad\026\uffad\040\uffad\060\017\061\010" +
    "\064\uffad\065\uffad\073\uffad\101\uffad\001\002\000\040\003" +
    "\uffaf\004\uffaf\005\uffaf\006\uffaf\007\uffaf\010\uffaf\012\uffaf" +
    "\013\uffaf\016\uffaf\026\uffaf\040\uffaf\064\uffaf\065\uffaf\073" +
    "\uffaf\101\uffaf\001\002\000\040\003\uffae\004\uffae\005\uffae" +
    "\006\uffae\007\uffae\010\uffae\012\uffae\013\uffae\016\uffae\026" +
    "\uffae\040\uffae\064\uffae\065\uffae\073\uffae\101\uffae\001\002" +
    "\000\040\003\uffb0\004\uffb0\005\uffb0\006\uffb0\007\uffb0\010" +
    "\uffb0\012\uffb0\013\uffb0\016\uffb0\026\uffb0\040\uffb0\064\uffb0" +
    "\065\uffb0\073\uffb0\101\uffb0\001\002\000\004\104\035\001" +
    "\002\000\004\002\uffb7\001\002\000\054\003\uffad\004\uffad" +
    "\005\uffad\006\uffad\007\uffad\010\uffad\012\uffad\013\uffad\016" +
    "\uffad\026\uffad\040\uffad\055\013\056\007\057\011\060\017" +
    "\061\010\064\uffad\065\uffad\073\uffad\101\uffad\104\uffb5\001" +
    "\002\000\022\003\uff8f\026\uff8f\031\uff8f\040\uff8f\064\uff8f" +
    "\073\uff8f\101\uff8f\102\uff8f\001\002\000\006\064\073\105" +
    "\074\001\002\000\004\104\uffb6\001\002\000\006\064\073" +
    "\105\074\001\002\000\030\011\222\015\235\022\150\027" +
    "\233\037\226\062\214\063\227\064\221\066\230\101\224" +
    "\103\212\001\002\000\006\064\073\105\074\001\002\000" +
    "\006\064\073\105\074\001\002\000\022\003\uff94\026\uff94" +
    "\031\uff94\040\uff94\064\uff94\073\uff94\101\uff94\102\uff94\001" +
    "\002\000\022\003\uff90\026\uff90\031\uff90\040\uff90\064\uff90" +
    "\073\uff90\101\uff90\102\uff90\001\002\000\010\064\073\101" +
    "\347\105\074\001\002\000\006\064\073\105\074\001\002" +
    "\000\006\064\073\105\074\001\002\000\022\003\uff92\026" +
    "\uff92\031\uff92\040\uff92\064\uff92\073\uff92\101\uff92\102\uff92" +
    "\001\002\000\006\064\073\105\074\001\002\000\004\104" +
    "\uffb3\001\002\000\070\003\uffab\004\uffab\005\uffab\006\uffab" +
    "\007\uffab\010\uffab\012\uffab\013\uffab\016\uffab\026\uffab\040" +
    "\uffab\043\uffab\044\uffab\045\uffab\046\uffab\053\uffab\054\uffab" +
    "\055\uffab\056\uffab\057\uffab\060\uffab\061\uffab\064\uffab\065" +
    "\uffab\073\uffab\101\uffab\104\uffab\001\002\000\030\004\044" +
    "\005\061\006\042\007\040\010\054\012\071\013\045\016" +
    "\051\064\102\065\052\102\uff78\001\002\000\074\003\uffc8" +
    "\004\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8\012\uffc8\013" +
    "\uffc8\016\uffc8\024\uffc8\026\uffc8\032\uffc8\040\uffc8\043\uffc8" +
    "\044\uffc8\045\uffc8\046\uffc8\053\uffc8\054\uffc8\055\uffc8\056" +
    "\uffc8\057\uffc8\060\uffc8\061\uffc8\064\uffc8\065\uffc8\073\uffc8" +
    "\101\uffc8\104\uffc8\001\002\000\006\064\073\105\074\001" +
    "\002\000\016\003\060\026\063\040\066\064\346\073\043" +
    "\101\057\001\002\000\074\003\uffc9\004\uffc9\005\uffc9\006" +
    "\uffc9\007\uffc9\010\uffc9\012\uffc9\013\uffc9\016\uffc9\024\uffc9" +
    "\026\uffc9\032\uffc9\040\uffc9\043\uffc9\044\uffc9\045\uffc9\046" +
    "\uffc9\053\uffc9\054\uffc9\055\uffc9\056\uffc9\057\uffc9\060\uffc9" +
    "\061\uffc9\064\uffc9\065\uffc9\073\uffc9\101\uffc9\104\uffc9\001" +
    "\002\000\054\003\uffad\004\uffad\005\uffad\006\uffad\007\uffad" +
    "\010\uffad\012\uffad\013\uffad\016\uffad\026\uffad\040\uffad\055" +
    "\013\056\007\057\011\060\017\061\010\064\uffad\065\uffad" +
    "\073\uffad\101\uffad\104\uffb5\001\002\000\022\003\uff93\026" +
    "\uff93\031\uff93\040\uff93\064\uff93\073\uff93\101\uff93\102\uff93" +
    "\001\002\000\004\064\077\001\002\000\022\003\uff95\026" +
    "\uff95\031\uff95\040\uff95\064\uff95\073\uff95\101\uff95\102\uff95" +
    "\001\002\000\022\003\uff91\026\uff91\031\uff91\040\uff91\064" +
    "\uff91\073\uff91\101\uff91\102\uff91\001\002\000\006\064\073" +
    "\105\074\001\002\000\024\003\uff8d\022\uff8d\026\uff8d\031" +
    "\uff8d\040\uff8d\064\uff8d\073\uff8d\101\uff8d\102\uff8d\001\002" +
    "\000\024\003\uff84\022\uff84\026\uff84\031\uff84\040\uff84\064" +
    "\uff84\073\uff84\101\uff84\102\uff84\001\002\000\004\106\075" +
    "\001\002\000\006\064\073\105\074\001\002\000\024\003" +
    "\uff83\022\uff83\026\uff83\031\uff83\040\uff83\064\uff83\073\uff83" +
    "\101\uff83\102\uff83\001\002\000\004\101\100\001\002\000" +
    "\030\004\044\005\061\006\042\007\040\010\054\012\071" +
    "\013\045\016\051\064\102\065\052\102\uff78\001\002\000" +
    "\004\102\110\001\002\000\006\064\073\105\074\001\002" +
    "\000\006\031\104\102\uff76\001\002\000\030\004\044\005" +
    "\061\006\042\007\040\010\054\012\071\013\045\016\051" +
    "\064\102\065\052\102\uff78\001\002\000\004\102\uff79\001" +
    "\002\000\004\102\uff77\001\002\000\022\003\uff89\026\uff89" +
    "\031\uff89\040\uff89\064\uff89\073\uff89\101\uff89\102\uff89\001" +
    "\002\000\004\103\111\001\002\000\044\004\uff7f\005\uff7f" +
    "\006\uff7f\007\uff7f\010\uff7f\012\uff7f\013\uff7f\016\uff7f\043" +
    "\uff7f\044\uff7f\045\uff7f\046\uff7f\053\uff7f\054\uff7f\064\uff7f" +
    "\065\uff7f\104\uff7f\001\002\000\044\004\044\005\061\006" +
    "\042\007\040\010\054\012\071\013\045\016\051\043\131" +
    "\044\115\045\122\046\117\053\124\054\116\064\120\065" +
    "\052\104\ufffe\001\002\000\010\003\uff6d\026\uff6d\073\uff6d" +
    "\001\002\000\010\003\uff71\026\uff71\073\uff71\001\002\000" +
    "\004\101\336\001\002\000\032\004\044\005\061\006\042" +
    "\007\040\010\054\012\071\013\045\016\051\053\124\054" +
    "\116\064\120\065\052\001\002\000\004\101\311\001\002" +
    "\000\012\003\uff6a\025\204\026\uff6a\073\uff6a\001\002\000" +
    "\010\003\060\026\063\073\043\001\002\000\004\103\173" +
    "\001\002\000\010\003\uff6f\026\uff6f\073\uff6f\001\002\000" +
    "\006\003\060\026\063\001\002\000\044\004\044\005\061" +
    "\006\042\007\040\010\054\012\071\013\045\016\051\043" +
    "\131\044\115\045\122\046\117\053\124\054\116\064\120" +
    "\065\052\104\ufffe\001\002\000\004\104\uff7e\001\002\000" +
    "\044\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\012\ufffc" +
    "\013\ufffc\016\ufffc\043\ufffc\044\ufffc\045\ufffc\046\ufffc\053" +
    "\ufffc\054\ufffc\064\ufffc\065\ufffc\104\ufffc\001\002\000\044" +
    "\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\012\ufffd\013" +
    "\ufffd\016\ufffd\043\ufffd\044\ufffd\045\ufffd\046\ufffd\053\ufffd" +
    "\054\ufffd\064\ufffd\065\ufffd\104\ufffd\001\002\000\004\101" +
    "\135\001\002\000\010\003\uff70\026\uff70\073\uff70\001\002" +
    "\000\010\003\uff72\026\uff72\073\uff72\001\002\000\010\003" +
    "\uff6e\026\uff6e\073\uff6e\001\002\000\024\004\044\005\061" +
    "\006\042\007\040\010\054\012\071\013\045\016\051\065" +
    "\052\001\002\000\006\022\uffeb\102\uffeb\001\002\000\006" +
    "\022\uffef\102\uffef\001\002\000\006\022\uffec\102\uffec\001" +
    "\002\000\006\022\uffea\102\uffea\001\002\000\006\022\uffee" +
    "\102\uffee\001\002\000\006\022\uffed\102\uffed\001\002\000" +
    "\006\022\150\102\146\001\002\000\006\003\060\026\063" +
    "\001\002\000\004\103\151\001\002\000\044\004\ufffa\005" +
    "\ufffa\006\ufffa\007\ufffa\010\ufffa\012\ufffa\013\ufffa\016\ufffa" +
    "\043\ufffa\044\ufffa\045\ufffa\046\ufffa\053\ufffa\054\ufffa\064" +
    "\ufffa\065\ufffa\104\ufffa\001\002\000\014\003\uff96\026\uff96" +
    "\031\uff96\102\uff96\104\uff96\001\002\000\044\004\044\005" +
    "\061\006\042\007\040\010\054\012\071\013\045\016\051" +
    "\043\131\044\115\045\122\046\117\053\124\054\116\064" +
    "\120\065\052\104\ufffe\001\002\000\004\104\153\001\002" +
    "\000\044\004\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3\012" +
    "\ufff3\013\ufff3\016\ufff3\043\ufff3\044\ufff3\045\ufff3\046\ufff3" +
    "\053\ufff3\054\ufff3\064\ufff3\065\ufff3\104\ufff3\001\002\000" +
    "\004\064\155\001\002\000\006\067\164\070\163\001\002" +
    "\000\004\102\157\001\002\000\004\103\160\001\002\000" +
    "\044\004\044\005\061\006\042\007\040\010\054\012\071" +
    "\013\045\016\051\043\131\044\115\045\122\046\117\053" +
    "\124\054\116\064\120\065\052\104\ufffe\001\002\000\004" +
    "\104\162\001\002\000\044\004\ufff2\005\ufff2\006\ufff2\007" +
    "\ufff2\010\ufff2\012\ufff2\013\ufff2\016\ufff2\043\ufff2\044\ufff2" +
    "\045\ufff2\046\ufff2\053\ufff2\054\ufff2\064\ufff2\065\ufff2\104" +
    "\ufff2\001\002\000\004\070\166\001\002\000\004\067\165" +
    "\001\002\000\004\102\uffe5\001\002\000\004\102\uffe4\001" +
    "\002\000\004\104\170\001\002\000\054\003\uff7d\004\uff7d" +
    "\005\uff7d\006\uff7d\007\uff7d\010\uff7d\012\uff7d\013\uff7d\016" +
    "\uff7d\026\uff7d\040\uff7d\055\uff7d\056\uff7d\057\uff7d\060\uff7d" +
    "\061\uff7d\064\uff7d\065\uff7d\073\uff7d\101\uff7d\104\uff7d\001" +
    "\002\000\004\104\uffff\001\002\000\044\004\uff73\005\uff73" +
    "\006\uff73\007\uff73\010\uff73\012\uff73\013\uff73\016\uff73\043" +
    "\uff73\044\uff73\045\uff73\046\uff73\053\uff73\054\uff73\064\uff73" +
    "\065\uff73\104\uff73\001\002\000\044\004\044\005\061\006" +
    "\042\007\040\010\054\012\071\013\045\016\051\043\131" +
    "\044\115\045\122\046\117\053\124\054\116\064\120\065" +
    "\052\104\ufffe\001\002\000\004\104\175\001\002\000\004" +
    "\044\176\001\002\000\004\101\177\001\002\000\004\022" +
    "\150\001\002\000\004\102\201\001\002\000\006\003\060" +
    "\026\063\001\002\000\044\004\ufff9\005\ufff9\006\ufff9\007" +
    "\ufff9\010\ufff9\012\ufff9\013\ufff9\016\ufff9\043\ufff9\044\ufff9" +
    "\045\ufff9\046\ufff9\053\ufff9\054\ufff9\064\ufff9\065\ufff9\104" +
    "\ufff9\001\002\000\044\004\uff75\005\uff75\006\uff75\007\uff75" +
    "\010\uff75\012\uff75\013\uff75\016\uff75\043\uff75\044\uff75\045" +
    "\uff75\046\uff75\053\uff75\054\uff75\064\uff75\065\uff75\104\uff75" +
    "\001\002\000\004\064\206\001\002\000\010\003\uff6c\026" +
    "\uff6c\073\uff6c\001\002\000\014\003\uff6a\025\204\026\uff6a" +
    "\073\uff6a\101\207\001\002\000\032\011\222\015\235\022" +
    "\150\027\233\037\226\062\214\063\227\064\221\066\230" +
    "\101\224\102\236\103\212\001\002\000\010\003\uff6b\026" +
    "\uff6b\073\uff6b\001\002\000\010\003\uff68\026\uff68\073\uff68" +
    "\001\002\000\032\011\222\015\235\022\150\027\233\037" +
    "\226\062\214\063\227\064\221\066\230\101\224\103\212" +
    "\104\303\001\002\000\004\102\300\001\002\000\024\003" +
    "\uffd6\026\uffd6\031\uffd6\067\uffd6\070\uffd6\071\uffd6\072\uffd6" +
    "\102\uffd6\104\uffd6\001\002\000\010\003\uff69\026\uff69\073" +
    "\uff69\001\002\000\014\003\uffaa\026\uffaa\031\uffaa\102\uffaa" +
    "\104\uffaa\001\002\000\016\003\uffe3\026\uffe3\031\uffe3\067" +
    "\267\102\uffe3\104\uffe3\001\002\000\014\003\uffa8\026\uffa8" +
    "\031\uffa8\102\uffa8\104\uffa8\001\002\000\026\003\uffdf\025" +
    "\273\026\uffdf\031\uffdf\067\uffdf\070\uffdf\071\uffdf\072\uffdf" +
    "\102\uffdf\104\uffdf\001\002\000\014\003\uffa6\026\uffa6\031" +
    "\uffa6\102\uffa6\104\uffa6\001\002\000\014\003\uff9a\026\uff9a" +
    "\031\uff9a\102\uff9a\104\uff9a\001\002\000\014\062\214\063" +
    "\227\064\221\066\230\101\224\001\002\000\014\003\uff99" +
    "\026\uff99\031\uff99\102\uff99\104\uff99\001\002\000\004\064" +
    "\254\001\002\000\024\003\uffd7\026\uffd7\031\uffd7\067\uffd7" +
    "\070\uffd7\071\uffd7\072\uffd7\102\uffd7\104\uffd7\001\002\000" +
    "\024\003\uffd5\026\uffd5\031\uffd5\067\uffd5\070\uffd5\071\uffd5" +
    "\072\uffd5\102\uffd5\104\uffd5\001\002\000\014\003\uffa9\026" +
    "\uffa9\031\uffa9\102\uffa9\104\uffa9\001\002\000\024\003\uffdd" +
    "\026\uffdd\031\uffdd\067\243\070\242\071\241\072\244\102" +
    "\uffdd\104\uffdd\001\002\000\004\014\237\001\002\000\014" +
    "\003\uffa7\026\uffa7\031\uffa7\102\uffa7\104\uffa7\001\002\000" +
    "\014\003\uff97\026\uff97\031\uff97\102\uff97\104\uff97\001\002" +
    "\000\010\003\uff66\026\uff66\073\uff66\001\002\000\004\027" +
    "\240\001\002\000\014\003\uff98\026\uff98\031\uff98\102\uff98" +
    "\104\uff98\001\002\000\014\062\214\063\227\064\221\066" +
    "\230\101\245\001\002\000\014\062\214\063\227\064\221" +
    "\066\230\101\245\001\002\000\014\062\214\063\227\064" +
    "\221\066\230\101\245\001\002\000\014\062\214\063\227" +
    "\064\221\066\230\101\245\001\002\000\014\062\214\063" +
    "\227\064\221\066\230\101\245\001\002\000\024\003\uffda" +
    "\026\uffda\031\uffda\067\uffda\070\uffda\071\uffda\072\uffda\102" +
    "\uffda\104\uffda\001\002\000\014\067\243\070\242\071\241" +
    "\072\244\102\250\001\002\000\024\003\uffd8\026\uffd8\031" +
    "\uffd8\067\uffd8\070\uffd8\071\uffd8\072\uffd8\102\uffd8\104\uffd8" +
    "\001\002\000\024\003\uffdc\026\uffdc\031\uffdc\067\uffdc\070" +
    "\uffdc\071\241\072\244\102\uffdc\104\uffdc\001\002\000\024" +
    "\003\uffdb\026\uffdb\031\uffdb\067\uffdb\070\uffdb\071\241\072" +
    "\244\102\uffdb\104\uffdb\001\002\000\024\003\uffd9\026\uffd9" +
    "\031\uffd9\067\uffd9\070\uffd9\071\uffd9\072\uffd9\102\uffd9\104" +
    "\uffd9\001\002\000\004\101\255\001\002\000\032\011\222" +
    "\015\235\022\150\027\233\037\226\062\214\063\227\064" +
    "\221\066\230\101\224\102\261\103\212\001\002\000\004" +
    "\102\265\001\002\000\006\031\262\102\uff9f\001\002\000" +
    "\014\003\uffa4\026\uffa4\031\uffa4\102\uffa4\104\uffa4\001\002" +
    "\000\014\003\uffa2\026\uffa2\031\uffa2\102\uffa2\104\uffa2\001" +
    "\002\000\030\011\222\015\235\022\150\027\233\037\226" +
    "\062\214\063\227\064\221\066\230\101\224\103\212\001" +
    "\002\000\004\102\uffa1\001\002\000\004\102\uffa0\001\002" +
    "\000\014\003\uffa3\026\uffa3\031\uffa3\102\uffa3\104\uffa3\001" +
    "\002\000\006\067\267\102\270\001\002\000\004\101\271" +
    "\001\002\000\016\003\uffe1\026\uffe1\031\uffe1\067\uffe1\102" +
    "\uffe1\104\uffe1\001\002\000\004\101\271\001\002\000\016" +
    "\003\uffe2\026\uffe2\031\uffe2\067\uffe2\102\uffe2\104\uffe2\001" +
    "\002\000\004\064\276\001\002\000\024\003\uffd4\026\uffd4" +
    "\031\uffd4\067\uffd4\070\uffd4\071\uffd4\072\uffd4\102\uffd4\104" +
    "\uffd4\001\002\000\024\003\uffe0\026\uffe0\031\uffe0\067\uffe0" +
    "\070\uffe0\071\uffe0\072\uffe0\102\uffe0\104\uffe0\001\002\000" +
    "\026\003\uffdf\025\273\026\uffdf\031\uffdf\067\uffdf\070\uffdf" +
    "\071\uffdf\072\uffdf\102\uffdf\104\uffdf\001\002\000\024\003" +
    "\uffde\026\uffde\031\uffde\067\uffde\070\uffde\071\uffde\072\uffde" +
    "\102\uffde\104\uffde\001\002\000\010\003\uff67\026\uff67\073" +
    "\uff67\001\002\000\006\031\304\104\uff9b\001\002\000\014" +
    "\003\uffa5\026\uffa5\031\uffa5\102\uffa5\104\uffa5\001\002\000" +
    "\014\003\uff9d\026\uff9d\031\uff9d\102\uff9d\104\uff9d\001\002" +
    "\000\030\011\222\015\235\022\150\027\233\037\226\062" +
    "\214\063\227\064\221\066\230\101\224\103\212\001\002" +
    "\000\004\104\306\001\002\000\014\003\uff9e\026\uff9e\031" +
    "\uff9e\102\uff9e\104\uff9e\001\002\000\006\031\304\104\uff9b" +
    "\001\002\000\004\104\uff9c\001\002\000\004\022\150\001" +
    "\002\000\004\102\313\001\002\000\004\103\314\001\002" +
    "\000\044\004\044\005\061\006\042\007\040\010\054\012" +
    "\071\013\045\016\051\043\131\044\115\045\122\046\117" +
    "\053\124\054\116\064\120\065\052\104\ufffe\001\002\000" +
    "\004\104\316\001\002\000\046\004\ufff6\005\ufff6\006\ufff6" +
    "\007\ufff6\010\ufff6\012\ufff6\013\ufff6\016\ufff6\043\ufff6\044" +
    "\ufff6\045\ufff6\046\ufff6\047\317\053\ufff6\054\ufff6\064\ufff6" +
    "\065\ufff6\104\ufff6\001\002\000\006\046\323\103\321\001" +
    "\002\000\044\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8" +
    "\012\ufff8\013\ufff8\016\ufff8\043\ufff8\044\ufff8\045\ufff8\046" +
    "\ufff8\053\ufff8\054\ufff8\064\ufff8\065\ufff8\104\ufff8\001\002" +
    "\000\044\004\044\005\061\006\042\007\040\010\054\012" +
    "\071\013\045\016\051\043\131\044\115\045\122\046\117" +
    "\053\124\054\116\064\120\065\052\104\ufffe\001\002\000" +
    "\044\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\012\ufff7" +
    "\013\ufff7\016\ufff7\043\ufff7\044\ufff7\045\ufff7\046\ufff7\053" +
    "\ufff7\054\ufff7\064\ufff7\065\ufff7\104\ufff7\001\002\000\004" +
    "\101\324\001\002\000\004\022\150\001\002\000\004\102" +
    "\326\001\002\000\004\103\327\001\002\000\044\004\044" +
    "\005\061\006\042\007\040\010\054\012\071\013\045\016" +
    "\051\043\131\044\115\045\122\046\117\053\124\054\116" +
    "\064\120\065\052\104\ufffe\001\002\000\004\104\331\001" +
    "\002\000\046\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6" +
    "\012\ufff6\013\ufff6\016\ufff6\043\ufff6\044\ufff6\045\ufff6\046" +
    "\ufff6\047\317\053\ufff6\054\ufff6\064\ufff6\065\ufff6\104\ufff6" +
    "\001\002\000\044\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010" +
    "\ufff4\012\ufff4\013\ufff4\016\ufff4\043\ufff4\044\ufff4\045\ufff4" +
    "\046\ufff4\053\ufff4\054\ufff4\064\ufff4\065\ufff4\104\ufff4\001" +
    "\002\000\004\104\334\001\002\000\044\004\ufff5\005\ufff5" +
    "\006\ufff5\007\ufff5\010\ufff5\012\ufff5\013\ufff5\016\ufff5\043" +
    "\ufff5\044\ufff5\045\ufff5\046\ufff5\053\ufff5\054\ufff5\064\ufff5" +
    "\065\ufff5\104\ufff5\001\002\000\044\004\uff74\005\uff74\006" +
    "\uff74\007\uff74\010\uff74\012\uff74\013\uff74\016\uff74\043\uff74" +
    "\044\uff74\045\uff74\046\uff74\053\uff74\054\uff74\064\uff74\065" +
    "\uff74\104\uff74\001\002\000\004\022\150\001\002\000\004" +
    "\102\340\001\002\000\004\103\341\001\002\000\044\004" +
    "\044\005\061\006\042\007\040\010\054\012\071\013\045" +
    "\016\051\043\131\044\115\045\122\046\117\053\124\054" +
    "\116\064\120\065\052\104\ufffe\001\002\000\004\104\343" +
    "\001\002\000\044\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010" +
    "\ufffb\012\ufffb\013\ufffb\016\ufffb\043\ufffb\044\ufffb\045\ufffb" +
    "\046\ufffb\053\ufffb\054\ufffb\064\ufffb\065\ufffb\104\ufffb\001" +
    "\002\000\004\104\uffb2\001\002\000\004\104\uffb4\001\002" +
    "\000\004\101\347\001\002\000\030\004\044\005\061\006" +
    "\042\007\040\010\054\012\071\013\045\016\051\064\102" +
    "\065\052\102\uff78\001\002\000\004\102\351\001\002\000" +
    "\004\103\352\001\002\000\044\004\uff7c\005\uff7c\006\uff7c" +
    "\007\uff7c\010\uff7c\012\uff7c\013\uff7c\016\uff7c\043\uff7c\044" +
    "\uff7c\045\uff7c\046\uff7c\053\uff7c\054\uff7c\064\uff7c\065\uff7c" +
    "\104\uff7c\001\002\000\044\004\044\005\061\006\042\007" +
    "\040\010\054\012\071\013\045\016\051\043\131\044\115" +
    "\045\122\046\117\053\124\054\116\064\120\065\052\104" +
    "\ufffe\001\002\000\004\104\uff7b\001\002\000\004\104\356" +
    "\001\002\000\054\003\uff7a\004\uff7a\005\uff7a\006\uff7a\007" +
    "\uff7a\010\uff7a\012\uff7a\013\uff7a\016\uff7a\026\uff7a\040\uff7a" +
    "\055\uff7a\056\uff7a\057\uff7a\060\uff7a\061\uff7a\064\uff7a\065" +
    "\uff7a\073\uff7a\101\uff7a\104\uff7a\001\002\000\024\003\uff87" +
    "\022\uff87\026\uff87\031\uff87\040\uff87\064\uff87\073\uff87\101" +
    "\uff87\102\uff87\001\002\000\004\102\361\001\002\000\004" +
    "\103\362\001\002\000\044\004\uff82\005\uff82\006\uff82\007" +
    "\uff82\010\uff82\012\uff82\013\uff82\016\uff82\043\uff82\044\uff82" +
    "\045\uff82\046\uff82\053\uff82\054\uff82\064\uff82\065\uff82\104" +
    "\uff82\001\002\000\044\004\044\005\061\006\042\007\040" +
    "\010\054\012\071\013\045\016\051\043\131\044\115\045" +
    "\122\046\117\053\124\054\116\064\120\065\052\104\ufffe" +
    "\001\002\000\004\104\uff81\001\002\000\004\104\366\001" +
    "\002\000\054\003\uff80\004\uff80\005\uff80\006\uff80\007\uff80" +
    "\010\uff80\012\uff80\013\uff80\016\uff80\026\uff80\040\uff80\055" +
    "\uff80\056\uff80\057\uff80\060\uff80\061\uff80\064\uff80\065\uff80" +
    "\073\uff80\101\uff80\104\uff80\001\002\000\024\003\uff8e\022" +
    "\uff8e\026\uff8e\031\uff8e\040\uff8e\064\uff8e\073\uff8e\101\uff8e" +
    "\102\uff8e\001\002\000\024\003\uff8a\022\uff8a\026\uff8a\031" +
    "\uff8a\040\uff8a\064\uff8a\073\uff8a\101\uff8a\102\uff8a\001\002" +
    "\000\024\003\uff8b\022\uff8b\026\uff8b\031\uff8b\040\uff8b\064" +
    "\uff8b\073\uff8b\101\uff8b\102\uff8b\001\002\000\024\003\uff8c" +
    "\022\uff8c\026\uff8c\031\uff8c\040\uff8c\064\uff8c\073\uff8c\101" +
    "\uff8c\102\uff8c\001\002\000\024\003\uff88\022\uff88\026\uff88" +
    "\031\uff88\040\uff88\064\uff88\073\uff88\101\uff88\102\uff88\001" +
    "\002\000\006\003\060\026\063\001\002\000\070\003\uffac" +
    "\004\uffac\005\uffac\006\uffac\007\uffac\010\uffac\012\uffac\013" +
    "\uffac\016\uffac\026\uffac\040\uffac\043\uffac\044\uffac\045\uffac" +
    "\046\uffac\053\uffac\054\uffac\055\uffac\056\uffac\057\uffac\060" +
    "\uffac\061\uffac\064\uffac\065\uffac\073\uffac\101\uffac\104\uffac" +
    "\001\002\000\024\003\uff86\022\uff86\026\uff86\031\uff86\040" +
    "\uff86\064\uff86\073\uff86\101\uff86\102\uff86\001\002\000\024" +
    "\003\uff85\022\uff85\026\uff85\031\uff85\040\uff85\064\uff85\073" +
    "\uff85\101\uff85\102\uff85\001\002\000\004\104\uffb1\001\002" +
    "\000\004\032\uffc6\001\002\000\004\032\uffc3\001\002\000" +
    "\050\003\uffc2\004\uffc2\005\uffc2\006\uffc2\007\uffc2\010\uffc2" +
    "\012\uffc2\013\uffc2\016\uffc2\026\uffc2\032\uffc2\040\uffc2\055" +
    "\uffc2\056\uffc2\057\uffc2\064\uffc2\065\uffc2\073\uffc2\101\uffc2" +
    "\001\002\000\050\003\uffc0\004\uffc0\005\uffc0\006\uffc0\007" +
    "\uffc0\010\uffc0\012\uffc0\013\uffc0\016\uffc0\026\uffc0\032\uffc0" +
    "\040\uffc0\055\uffc0\056\uffc0\057\uffc0\064\uffc0\065\uffc0\073" +
    "\uffc0\101\uffc0\001\002\000\004\002\001\001\002\000\010" +
    "\003\060\025\u0107\026\063\001\002\000\004\064\u0116\001" +
    "\002\000\020\024\u010a\032\uffd0\055\uffd0\056\uffd0\057\uffd0" +
    "\060\uffd0\061\uffd0\001\002\000\020\024\uffca\032\uffca\055" +
    "\uffca\056\uffca\057\uffca\060\uffca\061\uffca\001\002\000\004" +
    "\064\u010c\001\002\000\016\032\uffd3\055\uffd3\056\uffd3\057" +
    "\uffd3\060\uffd3\061\uffd3\001\002\000\010\003\060\025\u010d" +
    "\026\063\001\002\000\006\064\u0111\071\u0112\001\002\000" +
    "\020\024\u010a\032\uffd0\055\uffd0\056\uffd0\057\uffd0\060\uffd0" +
    "\061\uffd0\001\002\000\020\024\uffce\032\uffce\055\uffce\056" +
    "\uffce\057\uffce\060\uffce\061\uffce\001\002\000\016\032\uffd1" +
    "\055\uffd1\056\uffd1\057\uffd1\060\uffd1\061\uffd1\001\002\000" +
    "\010\003\060\025\u010d\026\063\001\002\000\006\003\060" +
    "\026\063\001\002\000\020\024\uffcf\032\uffcf\055\uffcf\056" +
    "\uffcf\057\uffcf\060\uffcf\061\uffcf\001\002\000\020\024\uffcd" +
    "\032\uffcd\055\uffcd\056\uffcd\057\uffcd\060\uffcd\061\uffcd\001" +
    "\002\000\020\024\uffcc\032\uffcc\055\uffcc\056\uffcc\057\uffcc" +
    "\060\uffcc\061\uffcc\001\002\000\010\003\060\025\u0107\026" +
    "\063\001\002\000\020\024\uffcb\032\uffcb\055\uffcb\056\uffcb" +
    "\057\uffcb\060\uffcb\061\uffcb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0115\000\006\002\004\006\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\014\015\016\011\017\013" +
    "\020\014\001\001\000\002\001\001\000\004\050\u0102\001" +
    "\001\000\002\001\001\000\004\017\u0101\001\001\000\002" +
    "\001\001\000\004\016\u0100\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\051\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\101\024\001\001\000\014\015\026\016\027\017\031" +
    "\024\025\043\030\001\001\000\034\010\055\021\040\022" +
    "\054\023\063\030\066\031\036\032\045\033\064\034\052" +
    "\035\067\036\046\041\061\044\035\001\001\000\004\102" +
    "\033\001\001\000\006\017\031\043\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\015\377\016\027\017\031" +
    "\024\025\043\030\001\001\000\002\001\001\000\004\047" +
    "\376\001\001\000\002\001\001\000\004\047\375\001\001" +
    "\000\024\003\231\004\224\005\222\025\215\026\230\027" +
    "\217\040\373\052\216\057\233\001\001\000\004\047\372" +
    "\001\001\000\004\047\371\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\047\106\001\001\000\004\047\370" +
    "\001\001\000\004\047\367\001\001\000\002\001\001\000" +
    "\004\047\366\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\030\066\031\036\032\045\033\064\034\052\035" +
    "\067\036\046\041\102\045\357\001\001\000\002\001\001" +
    "\000\004\047\356\001\001\000\012\010\055\022\344\023" +
    "\063\044\035\001\001\000\002\001\001\000\014\015\343" +
    "\016\027\017\031\024\025\043\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\047\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\047\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\030\066\031\036\032" +
    "\045\033\064\034\052\035\067\036\046\041\102\045\100" +
    "\001\001\000\002\001\001\000\004\047\106\001\001\000" +
    "\004\046\104\001\001\000\024\030\066\031\036\032\045" +
    "\033\064\034\052\035\067\036\046\041\102\045\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\105\111\001\001\000\030\030" +
    "\132\031\112\032\113\033\131\034\122\035\133\060\127" +
    "\061\124\062\125\066\120\070\126\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\030\132" +
    "\031\112\032\113\033\131\034\122\035\133\060\334\066" +
    "\120\001\001\000\002\001\001\000\004\064\204\001\001" +
    "\000\006\010\055\023\202\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\171\001\001\000\030\030\132" +
    "\031\112\032\113\033\131\034\122\035\133\060\127\061" +
    "\124\062\170\066\120\070\126\001\001\000\004\106\166" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\030\136\031\140\032\141\033\142\034\137\035" +
    "\135\072\143\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\027\144\073\146\001\001\000\004" +
    "\010\153\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\030\132\031\112\032\113\033\131" +
    "\034\122\035\133\060\127\061\124\062\151\066\120\070" +
    "\126\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\071\155\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\030\132\031\112\032\113\033\131" +
    "\034\122\035\133\060\127\061\124\062\160\066\120\070" +
    "\126\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\030\132\031\112\032\113\033" +
    "\131\034\122\035\133\060\127\061\124\062\173\066\120" +
    "\070\126\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\177\001\001\000\002\001\001" +
    "\000\004\010\201\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\064\210" +
    "\065\207\001\001\000\026\003\231\004\224\005\222\025" +
    "\215\026\230\027\217\040\212\052\216\057\233\067\214" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\003" +
    "\231\004\224\005\222\025\215\026\230\027\217\040\300" +
    "\052\216\055\301\057\233\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\056\273\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\246\052\265" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\252\001\001\000\004\003\251\001\001\000\004\003" +
    "\250\001\001\000\004\003\245\001\001\000\004\003\246" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\003\231\004\224\005\222\025" +
    "\215\026\230\027\217\037\255\040\256\052\216\054\257" +
    "\057\233\001\001\000\002\001\001\000\004\042\262\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\003\231" +
    "\004\224\005\222\025\215\026\230\027\217\037\263\040" +
    "\256\052\216\057\233\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\052" +
    "\271\001\001\000\002\001\001\000\004\052\265\001\001" +
    "\000\002\001\001\000\004\053\274\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\056\276\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\063\304\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\003\231\004\224" +
    "\005\222\025\215\026\230\027\217\040\306\052\216\057" +
    "\233\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\063\307\001\001\000\002\001\001\000\004\027\311\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\030\132" +
    "\031\112\032\113\033\131\034\122\035\133\060\127\061" +
    "\124\062\314\066\120\070\126\001\001\000\002\001\001" +
    "\000\004\077\317\001\001\000\004\100\321\001\001\000" +
    "\002\001\001\000\030\030\132\031\112\032\113\033\131" +
    "\034\122\035\133\060\127\061\124\062\332\066\120\070" +
    "\126\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\324\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\030\132\031\112\032\113\033\131\034\122\035\133" +
    "\060\127\061\124\062\327\066\120\070\126\001\001\000" +
    "\002\001\001\000\004\077\331\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\336\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\030\132\031\112\032\113\033\131\034\122\035" +
    "\133\060\127\061\124\062\341\066\120\070\126\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\030\066\031\036" +
    "\032\045\033\064\034\052\035\067\036\046\041\102\045" +
    "\347\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\107\352\001\001\000\030\030\132\031\112\032\113\033" +
    "\131\034\122\035\133\060\127\061\124\062\353\066\120" +
    "\070\126\001\001\000\004\110\354\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\103\362\001\001\000\030\030" +
    "\132\031\112\032\113\033\131\034\122\035\133\060\127" +
    "\061\124\062\363\066\120\070\126\001\001\000\004\104" +
    "\364\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\374\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\u0108\013" +
    "\u0107\001\001\000\002\001\001\000\004\007\u010a\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\010\u010e\011\u010d\001\001\000\004\012\u0112\001\001" +
    "\000\004\007\u010f\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\u010e\011\u0114\001\001\000\004\010\u0113" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\u0108\013\u0116\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        
        Sintactico(Lexico lexico){
            super(lexico);
        }

        public void syntax_error(Symbol cur_token) {
        System.out.println("El error es el simbolo: " + sym.terminalNames[cur_token.sym]);
        System.out.println(String.format("En la posicion: %d, %d", cur_token.left, cur_token.right));
        }
        /*public void unrecovered_syntax_error(Symbol cur_token) {
            if (cur_token.sym == sym.EOF) {
             System.out.println("public void unrecoveredsyntax_error!!!!!!!!!!!!!!");
            }
        }*/


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= encabezado clase 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // localMetodo ::= local localMetodo 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("localMetodo",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // localMetodo ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("localMetodo",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // local ::= variableLocal 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("local",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // local ::= sentenciaControl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("local",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sentenciaControl ::= WHILE P_APERTURA trueOfalse P_CIERRE L_APERTURA localMetodo L_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciaControl",54, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sentenciaControl ::= FOR P_APERTURA variableIDFor sentenciaFor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciaControl",54, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sentenciaControl ::= DO L_APERTURA localMetodo L_CIERRE WHILE P_APERTURA trueOfalse P_CIERRE p 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciaControl",54, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sentenciaControl ::= IF P_APERTURA trueOfalse P_CIERRE L_APERTURA localMetodo L_CIERRE sentenciaElse 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciaControl",54, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sentenciaElse ::= ELSE sentenciaElseFac 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciaElse",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sentenciaElse ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciaElse",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sentenciaElseFac ::= L_APERTURA localMetodo L_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciaElseFac",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sentenciaElseFac ::= IF P_APERTURA trueOfalse P_CIERRE L_APERTURA localMetodo L_CIERRE sentenciaElse 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciaElseFac",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sentenciaFor ::= P_CIERRE L_APERTURA localMetodo L_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciaFor",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sentenciaFor ::= trueOfalse p accionMetodo P_CIERRE L_APERTURA localMetodo L_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciaFor",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // inializarVariable ::= variableIDFor asignacionVariable 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("inializarVariable",58, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // inializarVariable ::= ID forVariableId 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("inializarVariable",58, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // variableIDFor ::= numFloat 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableIDFor",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // variableIDFor ::= numDouble 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableIDFor",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // variableIDFor ::= variableChar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableIDFor",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // variableIDFor ::= variableBoolean 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableIDFor",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // variableIDFor ::= variableStirng 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableIDFor",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // variableIDFor ::= numEntero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableIDFor",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // forVariableId ::= ID forVariableIdFac 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("forVariableId",59, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // forVariableId ::= C_APERTURA C_CIERRE forVariableId 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("forVariableId",59, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // forVariableIdFac ::= DOBLE_PUNTO ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("forVariableIdFac",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // forVariableIdFac ::= asignacionVariable 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("forVariableIdFac",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // accionMetodo ::= ID SUMA SUMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("accionMetodo",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // accionMetodo ::= ID RESTA RESTA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("accionMetodo",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // s ::= os 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("s",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // os ::= os SUMA os 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("os",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // os ::= P_APERTURA os P_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("os",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // idDato ::= PUNTO idDatoFac 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("idDato",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // idDato ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("idDato",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // idDatoFac ::= ID idDato 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("idDatoFac",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // j ::= operaionNumerica 
            {
              String RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("j",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // operaionNumerica ::= operaionNumerica SUMA operaionNumerica 
            {
              String RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operaionNumerica",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // operaionNumerica ::= operaionNumerica RESTA operaionNumerica 
            {
              String RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operaionNumerica",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // operaionNumerica ::= operaionNumerica DIVISION operaionNumerica 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operaionNumerica",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // operaionNumerica ::= operaionNumerica MULTIPLICACION operaionNumerica 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operaionNumerica",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // operaionNumerica ::= P_APERTURA operaionNumerica P_CIERRE 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operaionNumerica",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // operaionNumerica ::= ENTERO 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operaionNumerica",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // operaionNumerica ::= DECIMAL 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operaionNumerica",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // operaionNumerica ::= TEXT 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operaionNumerica",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // operaionNumerica ::= ID idDato 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operaionNumerica",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // encabezado ::= PACKAGE ID pc importacion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("encabezado",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // encabezado ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("encabezado",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // importacion ::= IMPORT ID sp importacion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("importacion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // importacion ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("importacion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // sp ::= PUNTO spp 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sp",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // sp ::= p 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sp",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // spp ::= MULTIPLICACION p 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("spp",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // spp ::= ID sp 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("spp",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // pc ::= PUNTO ID pc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("pc",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // pc ::= p 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("pc",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // p ::= PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("p",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // p ::= error 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("p",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // v ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("v",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // v ::= staticCfianl vc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("v",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // v ::= staticCfianl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("v",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // v ::= vc 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("v",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // v ::= vc staticCfianl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("v",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // staticCfianl ::= STATIC staticFactori 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("staticCfianl",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // staticCfianl ::= FINAL finalFactori 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("staticCfianl",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // staticFactori ::= FINAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("staticFactori",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // staticFactori ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("staticFactori",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // finalFactori ::= STATIC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("finalFactori",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // finalFactori ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("finalFactori",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // vc ::= PUBLIC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vc",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // vc ::= PRIVATE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vc",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // vc ::= PROTECTED 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vc",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NT$0 ::= 
            {
              Object RESULT =null;
System.out.println("****INICIO CLASES");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
System.out.println("****FINAL CLASES");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$1",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // clase ::= v CLASS ID L_APERTURA NT$0 internoClase NT$1 L_CIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("clase",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // internoClase ::= vGlobal internoClaseFa 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("internoClase",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // internoClase ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("internoClase",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // internoClaseFa ::= variableID ayuda 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("internoClaseFa",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // internoClaseFa ::= ayuda 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("internoClaseFa",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ayuda ::= asignacionVariable internoClase 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ayuda",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ayuda ::= metodo internoClase 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ayuda",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // vGlobal ::= vc vGlobalFac 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vGlobal",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // vGlobal ::= vGlobalFac 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vGlobal",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // vGlobalFac ::= staticCfianl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vGlobalFac",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // vGlobalFac ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vGlobalFac",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // asignacionVariable ::= IGUAL tDatos p 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacionVariable",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // asignacionVariable ::= p 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacionVariable",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // tDatos ::= numEnteroDecimal 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatos",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // tDatos ::= vChar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatos",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // tDatos ::= trueOfalse 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatos",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // tDatos ::= textoIngresoado 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatos",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // tDatos ::= F 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatos",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // tDatos ::= L_APERTURA lCon 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatos",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // tDatos ::= NEW ID P_APERTURA tFact 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDatos",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // tFact ::= dSeguidoF P_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tFact",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // tFact ::= P_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tFact",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // dSeguidoF ::= tDatos objectInst 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dSeguidoF",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // objectInst ::= COMA dSeguidoF 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("objectInst",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // objectInst ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("objectInst",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // lCon ::= tDatos lConFact L_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lCon",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // lCon ::= L_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lCon",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // lConFact ::= COMA tDatos lConFact 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lConFact",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // lConFact ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lConFact",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // textoIngresoado ::= s 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("textoIngresoado",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // numEnteroDecimal ::= j 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("numEnteroDecimal",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // vChar ::= SIMPLE_COMILLA CARACTER SIMPLE_COMILLA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vChar",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // vChar ::= CHARTN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vChar",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // trueOfalse ::= operarBoolean 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("trueOfalse",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // variableID ::= numFloat 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableID",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // variableID ::= numDouble 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableID",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // variableID ::= variableChar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableID",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // variableID ::= variableBoolean 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableID",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // variableID ::= variableStirng 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableID",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // variableID ::= variableObject 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableID",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // variableID ::= numEntero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableID",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // numFloat ::= FLOAT onlyIDArray 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("numFloat",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // numDouble ::= DOUBLE onlyIDArray 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("numDouble",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // variableChar ::= CHAR onlyIDArray 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableChar",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // variableBoolean ::= BOOLEAN onlyIDArray 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableBoolean",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // variableStirng ::= STRING onlyIDArray 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableStirng",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // variableObject ::= ID onlyIDArray 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableObject",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // numEntero ::= BYTE onlyIDArray 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("numEntero",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // numEntero ::= SHORT onlyIDArray 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("numEntero",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // numEntero ::= INT onlyIDArray 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("numEntero",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // numEntero ::= LONG onlyIDArray 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("numEntero",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // onlyIDArray ::= ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("onlyIDArray",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // onlyIDArray ::= C_APERTURA C_CIERRE onlyIDArray 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("onlyIDArray",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // NT$2 ::= 
            {
              Object RESULT =null;
System.out.println("**********************************************************INICIO METODO*************************");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$2",65, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
System.out.println("****FINAL METODO");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$3",66, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // metodo ::= P_APERTURA pMetodoS P_CIERRE L_APERTURA NT$2 localMetodo NT$3 L_CIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("metodo",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // NT$4 ::= 
            {
              Object RESULT =null;
System.out.println("**********************************************************INICIO METODO*************************");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$4",67, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
System.out.println("****FINAL METODO");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$5",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // metodo ::= VOID ID P_APERTURA pMetodoS P_CIERRE L_APERTURA NT$4 localMetodo NT$5 L_CIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("metodo",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // NT$6 ::= 
            {
              Object RESULT =null;
System.out.println("**********************************************************INICIO METODO*************************");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$6",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
System.out.println("****FINAL METODO");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$7",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // metodo ::= ID P_APERTURA pMetodoS P_CIERRE L_APERTURA NT$6 localMetodo NT$7 L_CIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("metodo",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // pMetodoS ::= variableID pMetodoSP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("pMetodoS",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // pMetodoS ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("pMetodoS",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // pMetodoSP ::= COMA pMetodoS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("pMetodoSP",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // pMetodoSP ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("pMetodoSP",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // variableLocal ::= variableIDLocal asignacionVariable 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableLocal",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // variableLocal ::= RETURN variableLocal 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableLocal",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // variableLocal ::= BREAK p 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableLocal",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // variableIDLocal ::= numFloat 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableIDLocal",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // variableIDLocal ::= numDouble 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableIDLocal",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // variableIDLocal ::= variableChar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableIDLocal",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // variableIDLocal ::= variableBoolean 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableIDLocal",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // variableIDLocal ::= variableStirng 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableIDLocal",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // variableIDLocal ::= numEntero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableIDLocal",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // variableIDLocal ::= ID loclaMetodFacto 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableIDLocal",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // loclaMetodFacto ::= PUNTO ID variableObjectUsarCrear 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("loclaMetodFacto",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // loclaMetodFacto ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("loclaMetodFacto",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // variableObjectUsarCrear ::= P_APERTURA variableSet 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableObjectUsarCrear",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // variableObjectUsarCrear ::= loclaMetodFacto 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableObjectUsarCrear",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // variableSet ::= tDatos P_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableSet",53, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // variableSet ::= P_CIERRE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableSet",53, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
