/*************************************CODE******************************************************/
package com.cunoc.JFlex_Cup.Java;

import java_cup.runtime.*;

    parser code {:
        
        Sintactico(Lexico lexico){
            super(lexico);
        }

        public void syntax_error(Symbol cur_token) {
        System.out.println("El error es el simbolo: " + sym.terminalNames[cur_token.sym]);
        System.out.println(String.format("En la posicion: %d, %d", cur_token.left, cur_token.right));
        }
        /*public void unrecovered_syntax_error(Symbol cur_token) {
            if (cur_token.sym == sym.EOF) {
             System.out.println("public void unrecoveredsyntax_error!!!!!!!!!!!!!!");
            }
        }*/
:}
/*************************************TERMINALES******************************************************/
/*************VARIABLES PRIMITIVAS***************/
terminal BYTE,SHORT,INT,LONG,FLOAT,F,DOUBLE;//num
terminal CHAR,CARACTER,CHARTN;//CARACTER
terminal BOOLEAN,TRUE,FALSE;//boolean
/*ENCABEZADO*/
terminal PACKAGE,IMPORT;
/*************PUNTUACION***************/
terminal PUNTO,PUNTO_COMA,SIMPLE_COMILLA,DOBLE_PUNTO,COMA;//PUNTUACION
/*************CLASE***************/
terminal CLASS,THIS;
terminal EXNTENDS,IMPLEMENTS,SUPER;//HERENCIA
/*************TODAS PARTES***************/
terminal NEW,VOID;
/*TRY CATCH*/
terminal TRY,CATCH;
/*SENTENCIAS DE CONTORL*/
terminal FOR,WHILE,DO,IF,ELSE,SWITCH,CASE;
/*FINAL SENTENCIAS DE CONTORL*/ 
terminal BREAK,RETURN;
/*VISIBILIDA*/ 
terminal PRIVATE,PUBLIC,PROTECTED;
terminal FINAL,STATIC;//USO DE MEMORIA
/****************************/
terminal String DECIMAL,ENTERO,ID,STRING;//TOKEN 
terminal Stirng TEXT;
terminal SUMA,RESTA,MULTIPLICACION,DIVISION;//OPERACION
terminal IGUAL,MODULO;//= 
/*SIMBOLOS OPERADOR RELACIONALES*/
terminal MENOR_Q,MAYOR_Q,Y,O;
/**************************AGRUPACION********************************/
terminal P_APERTURA,P_CIERRE,L_APERTURA,L_CIERRE,C_APERTURA,C_CIERRE;
/*************************************NO TERMINALES******************************************************/
non terminal inicio;//INICIO DE TODO
/*c , d , g ,h ,i , k , q ,r,e,w,z,f,u,s,b,n,m,a,l  */
non terminal String o,j;//operaciones
non terminal String s;//operaciones
/*LA PARTE DE package Y import*/
non terminal encabezado,importacion,p,sp,spp,pc;
/*LA CLASE*/
non terminal clase,internoClase,vc,staticCfianl,v,internoClaseFa,ayuda;
/*VARIABLE GLOBAL O ATRIBUTOS DE LA CALSE*/
non terminal atributos,vGlobal,t,numEnteroDecimal,vChar,trueOfalse;
non terminal numFloat,numEntero, numDouble, variableChar, variableBoolean,variableStirng, variableObject;
non terminal dSeguidoF,dSeguidos,tDatos,variableID,objectInst,vGlobalFac;
/*METODOS*/
non terminal metodo,pMetodoS,pMetodoSP;
non terminal onlyIDArray,staticFactori,finalFactori;
/*LOCAL METODO*/
non terminal localMetodo,os,idDatoFac ,tFact,lCon, idDato,textoIngresoado,lConFact;
/*************************************PRECEDENCIA******************************************************/
precedence left SUMA, RESTA;
precedence left MULTIPLICACION, DIVISION;
/*************************************GRAMATICA******************************************************/
start with inicio;
/******INICIO DE TODO *****/
inicio ::= encabezado clase;
/******operaciones matematicas*****/
localMetodo ::= variableID atributos {:System.out.println("********PRIMERA VARIABLE********");:} localMetodo
|
;













/*OPERACION String*/
s ::= os;
os::= os SUMA os {::}
| P_APERTURA os P_CIERRE
| TEXT//"TEXT"
| ID idDato
;
idDato ::= PUNTO idDatoFac
|
;
idDatoFac ::= ID  idDato
; 




/*OPERACION NUMERICA*/
j ::= o {::} /*A QUI ESTA EL TOTAL DE LA OPERACION*/
;
o ::= o SUMA o {::}
|  o RESTA o {::}
|  o DIVISION o
|  o MULTIPLICACION o
| P_APERTURA o P_CIERRE
| ENTERO
| DECIMAL
;
/*****PRIMERA PARTE*******/
encabezado ::= PACKAGE ID pc importacion
|
;
importacion ::= IMPORT ID sp importacion
|
;
sp ::= PUNTO spp
| p
;
spp ::= MULTIPLICACION p
| ID sp
;

pc ::= PUNTO ID pc
| p
;

p ::= PUNTO_COMA
| error {::}
;
/*****FINAL PRIMERA PARTE****/
/*PARTE DE LA CLASE ******************************************************* CLASE CLASE*/
v ::= 
| staticCfianl vc
| staticCfianl
| vc
| vc staticCfianl
;
staticCfianl ::= STATIC staticFactori
|FINAL finalFactori
;
staticFactori ::= FINAL
|
;
finalFactori ::= STATIC
|
;
vc ::= PUBLIC
| PRIVATE
| PROTECTED
;
clase ::= v CLASS ID L_APERTURA {:System.out.println("****INICIO CLASES");:} internoClase {:System.out.println("****FINAL CLASES");:} L_CIERRE
;
internoClase ::= vGlobal internoClaseFa
| 
;
internoClaseFa ::= variableID ayuda
|ayuda
;
ayuda ::= atributos {:System.out.println("FINAL ATRIBUTO");:} internoClase
| metodo internoClase
;
vGlobal ::= vc vGlobalFac 
| vGlobalFac
;
vGlobalFac ::= staticCfianl
| 
;
/*FINAL PARTE DE LA CLASE*/
/*****************ATRIBUTOS DE UNA CLASE**************/
atributos ::=  IGUAL t p
|p
;





tFact ::= dSeguidoF P_CIERRE 
| P_CIERRE 
;

dSeguidoF ::= tDatos objectInst
;
objectInst ::= COMA dSeguidoF
|
;


t ::=  tDatos ;

tDatos ::= numEnteroDecimal
|vChar
|trueOfalse
|textoIngresoado
|F
|L_APERTURA lCon
|NEW ID P_APERTURA  tFact
;
lCon ::= tDatos lConFact L_CIERRE
| L_CIERRE
;
lConFact ::=  COMA tDatos  lConFact
|
;








/*DATOS INGRESADOS*/
textoIngresoado ::= s; 
numEnteroDecimal ::= j;
vChar ::= SIMPLE_COMILLA CARACTER SIMPLE_COMILLA
| CHARTN
;
trueOfalse ::= TRUE
|FALSE
;
/*DATOS INGRESADOS*/
/*DATOS */
/*****************VARIABLE**************/
variableID ::= numFloat 
| numDouble 
| variableChar 
| variableBoolean 
| variableStirng 
| variableObject 
| numEntero 
;
numFloat ::= FLOAT onlyIDArray;
numDouble ::= DOUBLE onlyIDArray;
variableChar ::= CHAR onlyIDArray;
variableBoolean ::=BOOLEAN onlyIDArray;
variableStirng ::= STRING onlyIDArray;
variableObject ::= ID onlyIDArray;
numEntero ::= BYTE onlyIDArray
| SHORT onlyIDArray
| INT onlyIDArray
| LONG onlyIDArray 
;
onlyIDArray ::= ID 
| C_APERTURA C_CIERRE onlyIDArray
;

/*****************FINAL VARIABLE**************/
/*****************FINAL ATRIBUTOS DE UNA CLASE**************/
/***********************************METODOS**************/
metodo ::= P_APERTURA pMetodoS P_CIERRE L_APERTURA {:System.out.println("****INICIO METODO");:} localMetodo {:System.out.println("****FINAL METODO");:} L_CIERRE 
|VOID  ID P_APERTURA pMetodoS P_CIERRE L_APERTURA {:System.out.println("****INICIO METODO");:} localMetodo  {:System.out.println("****FINAL METODO");:} L_CIERRE
|ID P_APERTURA pMetodoS P_CIERRE L_APERTURA {:System.out.println("****INICIO METODO");:} localMetodo  {:System.out.println("****FINAL METODO");:} L_CIERRE
;
pMetodoS ::= variableID pMetodoSP
|
;
pMetodoSP ::= COMA pMetodoS
| 
;
/***********************************FINAL METODOS**************/